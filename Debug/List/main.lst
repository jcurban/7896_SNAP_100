###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             17/Jul/2013  08:20:55 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\main.c    #
#    Command line =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\main.c    #
#                    -e --enable_multibytes -On --no_cse --no_unroll          #
#                    --no_inline --no_code_motion --no_tbaa --no_cross_call   #
#                    --debug --code_model medium --data_model medium -o       #
#                    C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Obj #
#                    \ --dlib_config "C:\Program Files\IAR Systems\Embedded   #
#                    Workbench 6.5\stm8\LIB\dlstm8mmn.h" -D STM8S007 -lC      #
#                    C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\ -I .\ --no_system_include --require_prototypes        #
#                    --vregs 16                                               #
#    List file    =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\main.lst                                               #
#    Object file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Obj #
#                    \main.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\jurban\Documents\GitHub\7896_SNAP_100\main.c
      1          /*-------------extern -----------------------------------------------------------------------*/
      2          /* SNAP JOB#7896 USES STM8007C8T6 PROCESSOR                                           */
      3          /* - 32K FLASH 2KRAM  128 EEPROM  ver 1.00                                            */
      4          /*------------------------------------------------------------------------------------*/
      5          /* Includes ------------------------------------------------------------------*/
      6          #include "main.h"
      7          #include "SNAP_Defines.h"
      8          extern char CID_Value;
      9          extern char SNAP_State;
     10          extern void Send_Powered(void);
     11          extern void Wait_For_Update(void);
     12          extern void Process_Received_Update(void);
     13          extern void GetNetworkStatusFromGS1011(void);
     14          extern void Reset_Network_Access(void);
     15          extern void Get_Website_Response_and_Respond(void);
     16          extern void Get_Website_IP_address(void);
     17          extern void Set_Mars_as_Website(void);
     18          extern void Set_Keep_Alive(void);
     19          extern void HTTPOPEN_Get_CID(void);
     20          extern void Convert_update_and_Send(void);
     21          extern void Get_Website_Response_and_Respond(void);
     22          extern void Reset_Network_Access(void);
     23          extern void Set_FactoryReset(void);
     24          extern void ResetAdaptor(void);
     25          extern void DisassociateWeb(void);
     26          extern void SetupSendInitialIPAddress(void);
     27          extern void SendWM_2(void);
     28          extern void SendWA_Init(void);
     29          extern void setDHCPSRVR(void);
     30          extern void SetProvisioning(void);
     31          
     32          extern u16 EEWRTimout;
     33          extern u8 Device_Rcvr_Complete_flag;
     34          extern int GS1011_Rvcr_Count;
     35          extern char GS1011_Xmit_Buffer;
     36          extern char *GS1011_Rcvr_Pointer;
     37          extern char GS1011_Received_Response_Flag;
     38          void SendYouThereMessageToGS1011(void);
     39          void InitializeGS1011Buffer(void);
     40          void InitializeDeviceBuffer (void);
     41          
     42          
     43          /* Local Var------------------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     44          u8  TEST;
   \                     TEST:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     45          u8  BLCNT_INDX;
   \                     BLCNT_INDX:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     46          u8  BLCNT_STATE;
   \                     BLCNT_STATE:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     47          u8  BLCNT_VAL;         /*VERSION BLINK VALUE*/
   \                     BLCNT_VAL:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
     48          u8  SysError;          /* bit 0 = 1 if Temp reading ou   t of limits
   \                     SysError:
   \   000000              DS8 1
     49                                    bit 1 = 1 if command start and no response*/
     50          /*--------------VERSION NUMBER OF THIS FIRMWARE-------------------------------*/

   \                                 In section .near.data, align 1
     51          u8 VER[4] = {VER0,VER1,VER2,VER3};
   \                     VER:
   \   000000 00 02 00 04  DC8 0, 2, 0, 4
     52          /*----------------------------------------------------------------------------*/
     53          
     54          /* Private function prototypes -----------------------------------------------*/
     55          void RCC_Configuration(void);
     56          void GPIO_Configuration(void);
     57          void TIMER1_Configuration (void);
     58          void InitEEData(void);
     59          void InitDeviceUART(void);
     60          void InitGS1011UART(void);
     61          /*external Functions ---------------------------------------------------------*/
     62          /*void Make_Send_SNAP_Ready_Message(void);*/
     63          void Send_powered_Message(void);
     64          void Save_PValues(void);
     65          /* Main powerup/main loop -----------------------------------------------*/
     66          extern char * GS1011_Xmit_Pointer;

   \                                 In section .far_func.text, align 1
     67          int main( void ){
     68            /* System Clocks Configuration */
     69            RCC_Configuration();
   \                     main:
   \   000000 8D ......    CALLF     RCC_Configuration
     70            /* Configure the GPIO ports */
     71            GPIO_Configuration();
   \   000004 8D ......    CALLF     GPIO_Configuration
     72            /*CONFIGURE TIMER1*/
     73            TIMER1_Configuration();
   \   000008 8D ......    CALLF     TIMER1_Configuration
     74            /*Configure device UART*/
     75            InitDeviceUART();
   \   00000C 8D ......    CALLF     InitDeviceUART
     76            /*Configure GS101 UART*/
     77            InitGS1011UART();
   \   000010 8D ......    CALLF     InitGS1011UART
     78            InitializeGS1011Buffer();
   \   000014 8D ......    CALLF     InitializeGS1011Buffer
     79            InitializeDeviceBuffer();
   \   000018 8D ......    CALLF     InitializeDeviceBuffer
     80            enableInterrupts();
   \   00001C 9A           RIM
     81            SNAP_State = 0;
   \   00001D 35 00 ....   MOV       L:SNAP_State, #0x0
     82            CID_Value = 0x00;
   \   000021 35 00 ....   MOV       L:CID_Value, #0x0
     83            GS1011_Received_Response_Flag = 0x00;
   \   000025 35 00 ....   MOV       L:GS1011_Received_Response_Flag, #0x0
     84            SendYouThereMessageToGS1011();                /* sacrificial message*/
   \   000029 8D ......    CALLF     SendYouThereMessageToGS1011
     85          
     86            while (1)
     87            {
     88              switch (SNAP_State){
   \                     ??main_0:
   \   00002D C6 ....      LD        A, L:SNAP_State
   \   000030 4D           TNZ       A
   \   000031 27 36        JREQ      L:??main_1
   \   000033 4A           DEC       A
   \   000034 27 39        JREQ      L:??main_2
   \   000036 4A           DEC       A
   \   000037 27 3C        JREQ      L:??main_3
   \   000039 4A           DEC       A
   \   00003A 27 3F        JREQ      L:??main_4
   \   00003C 4A           DEC       A
   \   00003D 27 42        JREQ      L:??main_5
   \   00003F 4A           DEC       A
   \   000040 27 45        JREQ      L:??main_6
   \   000042 4A           DEC       A
   \   000043 27 48        JREQ      L:??main_7
   \   000045 4A           DEC       A
   \   000046 27 4B        JREQ      L:??main_8
   \   000048 4A           DEC       A
   \   000049 27 4E        JREQ      L:??main_9
   \   00004B A0 02        SUB       A, #0x2
   \   00004D 27 50        JREQ      L:??main_10
   \   00004F 4A           DEC       A
   \   000050 27 53        JREQ      L:??main_11
   \   000052 4A           DEC       A
   \   000053 27 56        JREQ      L:??main_12
   \   000055 4A           DEC       A
   \   000056 27 5A        JREQ      L:??main_13
   \   000058 4A           DEC       A
   \   000059 27 5E        JREQ      L:??main_14
   \   00005B 4A           DEC       A
   \   00005C 27 62        JREQ      L:??main_15
   \   00005E 4A           DEC       A
   \   00005F 27 66        JREQ      L:??main_16
   \   000061 4A           DEC       A
   \   000062 27 6A        JREQ      L:??main_17
   \   000064 4A           DEC       A
   \   000065 27 6E        JREQ      L:??main_18
   \   000067 20 C4        JRA       L:??main_0
     89              case SEND_POWERED_STATE:         /* let the device know we're ready*/
     90                Send_Powered();
   \                     ??main_1:
   \   000069 8D ......    CALLF     Send_Powered
     91                break;
   \   00006D 20 BE        JRA       L:??main_0
     92              case WAIT_FOR_UPDATE_STATE:      /* wait for the device update */   
     93                Wait_For_Update();
   \                     ??main_2:
   \   00006F 8D ......    CALLF     Wait_For_Update
     94                break;
   \   000073 20 B8        JRA       L:??main_0
     95              case PREOCESS_DEVICE_UPDATE_STATE:
     96                Process_Received_Update();     /* de-escape and check checksum */
   \                     ??main_3:
   \   000075 8D ......    CALLF     Process_Received_Update
     97                break;
   \   000079 20 B2        JRA       L:??main_0
     98              case GET_GS1011_NETWORK_STATE:
     99                GetNetworkStatusFromGS1011();  /* check if gs1011 connected to router */ 
   \                     ??main_4:
   \   00007B 8D ......    CALLF     GetNetworkStatusFromGS1011
    100                break;                         /* if connected send update, esle config */
   \   00007F 20 AC        JRA       L:??main_0
    101              case GET_WEBSITE_IP_ADDRESS_STATE:                              
    102                Get_Website_IP_address();      /* set GS1011 address to 192.168.1.1 */
   \                     ??main_5:
   \   000081 8D ......    CALLF     Get_Website_IP_address
    103                break;
   \   000085 20 A6        JRA       L:??main_0
    104              case SET_MARS_AS_WEBSITE_STATE:
    105                Set_Mars_as_Website();         /* set the host to mars.bwgrp.com */
   \                     ??main_6:
   \   000087 8D ......    CALLF     Set_Mars_as_Website
    106                break;
   \   00008B 20 A0        JRA       L:??main_0
    107              case SET_KEEP_ALIVE_STATE:
    108                Set_Keep_Alive();             /* prevent a disconnect after status returned */
   \                     ??main_7:
   \   00008D 8D ......    CALLF     Set_Keep_Alive
    109                break;
   \   000091 20 9A        JRA       L:??main_0
    110              case HTTPOPEN_GET_CID_STATE:
    111                HTTPOPEN_Get_CID();           /* open the port, get CID (Connection ID 0-9) */
   \                     ??main_8:
   \   000093 8D ......    CALLF     HTTPOPEN_Get_CID
    112                break;
   \   000097 20 94        JRA       L:??main_0
    113              case CONVERT_DEVICE_DATA_AND_SEND_STATE:
    114                Convert_update_and_Send();
   \                     ??main_9:
   \   000099 8D ......    CALLF     Convert_update_and_Send
    115                break;
   \   00009D 20 8E        JRA       L:??main_0
    116          /*                                    reset the adaptor and provision*/ 
    117              case RESET_NETWORK_ACCESS_STATE:
    118                Reset_Network_Access();
   \                     ??main_10:
   \   00009F 8D ......    CALLF     Reset_Network_Access
    119                break;
   \   0000A3 20 88        JRA       L:??main_0
    120              case SET_FACTORY_RESET_STATE:
    121                Set_FactoryReset();
   \                     ??main_11:
   \   0000A5 8D ......    CALLF     Set_FactoryReset
    122                break;
   \   0000A9 20 82        JRA       L:??main_0
    123              case RESET_GS1011_ADAPTOR_STATE:
    124                ResetAdaptor();
   \                     ??main_12:
   \   0000AB 8D ......    CALLF     ResetAdaptor
    125                break;
   \   0000AF CC ....      JP        L:??main_0
    126              case DISACSSOCIATE_WEB_ACCESS_STATE:
    127                DisassociateWeb();
   \                     ??main_13:
   \   0000B2 8D ......    CALLF     DisassociateWeb
    128                break;
   \   0000B6 CC ....      JP        L:??main_0
    129              case SET_INITIAL_IPADDRESS_STATE:
    130                SetupSendInitialIPAddress();
   \                     ??main_14:
   \   0000B9 8D ......    CALLF     SetupSendInitialIPAddress
    131                break;
   \   0000BD CC ....      JP        L:??main_0
    132              case SET_WEB_MODE_TO_LIMITED_STATE:
    133                SendWM_2();
   \                     ??main_15:
   \   0000C0 8D ......    CALLF     SendWM_2
    134                break;
   \   0000C4 CC ....      JP        L:??main_0
    135              case INIT_WEB_ACCESS_STATE:
    136                SendWA_Init();
   \                     ??main_16:
   \   0000C7 8D ......    CALLF     SendWA_Init
    137                break;
   \   0000CB CC ....      JP        L:??main_0
    138              case SET_DHCPSRVR_STATE:
    139                setDHCPSRVR();
   \                     ??main_17:
   \   0000CE 8D ......    CALLF     setDHCPSRVR
    140                break;
   \   0000D2 CC ....      JP        L:??main_0
    141              case SET_PROVISIONING_STATE:
    142                SetProvisioning();
   \                     ??main_18:
   \   0000D5 8D ......    CALLF     SetProvisioning
    143                break;
   \   0000D9 CC ....      JP        L:??main_0
    144              }
    145            }
    146           /*infinite loop*/
    147          }
    148          /* Get the EEData on startup-------------------------------------------------*/
    149          /*                                                                           */
    150          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    151          void InitEEData(void){
    152          }
   \                     InitEEData:
   \   000000 87           RETF

   \                                 In section .far_func.text, align 1
    153          void assert_failed(uint8_t* file, uint32_t line)
    154          {
    155            /* User can add his own implementation to report the file name and line number,
    156               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    157          }
   \                     assert_failed:
   \   000000 87           RETF
    158          /*******************************************************************************
    159          * Function Name  : RCC_Configuration
    160          * Description    : Configures the different system clocks.
    161          *                 16MHZ INTERNAL OSCILLATOR HSI ENABLED BY DEFAULT
    162          * Input          : None
    163          * Output         : None
    164          * Return         : None
    165          *******************************************************************************/

   \                                 In section .far_func.text, align 1
    166          void RCC_Configuration(void){
    167            CLK->SWCR = 0x08;     /*SWIF SET TO AUTO*/
   \                     RCC_Configuration:
   \   000000 35 08 50C5   MOV       L:0x50c5, #0x8
    168            CLK->CKDIVR = 0;      /*SET TO FULL SPEED 16MHZ*/
   \   000004 35 00 50C6   MOV       L:0x50c6, #0x0
    169            CLK->PCKENR1 = 0x8D;  /*TIM1, I2C CLOCK ENABLED, UART1,3*/
   \   000008 35 8D 50C7   MOV       L:0x50c7, #0x8d
    170            CLK->PCKENR2 = 0x08;  /*ADC CLOCK ENABLED*/
   \   00000C 35 08 50CA   MOV       L:0x50ca, #0x8
    171            CLK->CSSR = 0x00;     /*security off*/
   \   000010 35 00 50C8   MOV       L:0x50c8, #0x0
    172          }
   \   000014 87           RETF
    173          /*******************************************************************************
    174          * Function Name  : GPIO_Configuration
    175          * Description    : Configures the different GPIO ports.
    176          * Input          : None
    177          * Output         : None
    178          * Return         : None
    179          *******************************************************************************/

   \                                 In section .far_func.text, align 1
    180          void GPIO_Configuration(void){
    181            GPIOA->DDR = 0xDF;  /*all outputs*/
   \                     GPIO_Configuration:
   \   000000 35 DF 5002   MOV       L:0x5002, #0xdf
    182            GPIOA->CR1 = 0x70; /*default inputs floating outputs OD*/
   \   000004 35 70 5003   MOV       L:0x5003, #0x70
    183            GPIOA->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000008 35 00 5004   MOV       L:0x5004, #0x0
    184            GPIOB->DDR = 0xF0;  /*4-7 outputs, 0-3 inputs*/
   \   00000C 35 F0 5007   MOV       L:0x5007, #0xf0
    185            GPIOB->CR1 = 0; /*default inputs floating outputs OD*/
   \   000010 35 00 5008   MOV       L:0x5008, #0x0
    186            GPIOB->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000014 35 00 5009   MOV       L:0x5009, #0x0
    187            GPIOC->DDR = 0xFF;  /*all outputs*/
   \   000018 35 FF 500C   MOV       L:0x500c, #0xff
    188            GPIOC->CR1 = 0xFF; /*outputs push pull*/
   \   00001C 35 FF 500D   MOV       L:0x500d, #0xff
    189            GPIOC->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000020 35 00 500E   MOV       L:0x500e, #0x0
    190            GPIOD->DDR = 0xBD;  /*all outputs except D1,D6 */
   \   000024 35 BD 5011   MOV       L:0x5011, #0xbd
    191            GPIOD->CR1 = 0xB1; /*outputs push pull except 2,3,46 OD*/
   \   000028 35 B1 5012   MOV       L:0x5012, #0xb1
    192            GPIOD->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   00002C 35 00 5013   MOV       L:0x5013, #0x0
    193            GPIOE->DDR = 0xFF;  /*all outputs */
   \   000030 35 FF 5016   MOV       L:0x5016, #0xff
    194            GPIOE->CR1 = 0x09; /*default inputs floating outputs OD*/
   \   000034 35 09 5017   MOV       L:0x5017, #0x9
    195            GPIOE->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000038 35 00 5018   MOV       L:0x5018, #0x0
    196            GPIOG->DDR = 0xFE;  /*all outputs except PG0 */
   \   00003C 35 FE 5020   MOV       L:0x5020, #0xfe
    197            GPIOG->CR1 = 0xFE; /*outputs push pull input is floating */
   \   000040 35 FE 5021   MOV       L:0x5021, #0xfe
    198            GPIOG->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000044 35 00 5022   MOV       L:0x5022, #0x0
    199          }
   \   000048 87           RETF
    200          
    201          /* TIMER1 configuration -----------------------------------------------------*/
    202          /*USED FOR GP TIMING RUN AT 200HZ                                            */
    203          /*---------------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
    204          void TIMER1_Configuration (void){
    205            TIM1->PSCRH = 0x00; /*prescale div by 4  (16m/4 = 4mhz)*/
   \                     TIMER1_Configuration:
   \   000000 35 00 5260   MOV       L:0x5260, #0x0
    206            TIM1->PSCRL = 0x03; /*prescale div by 4  (16m/4 = 4mhz)*/
   \   000004 35 03 5261   MOV       L:0x5261, #0x3
    207            TIM1->ARRH = 0x4E; /*auto reload = 20000 (4m/20k = 200)*/
   \   000008 35 4E 5262   MOV       L:0x5262, #0x4e
    208            TIM1->ARRL = 0x20;
   \   00000C 35 20 5263   MOV       L:0x5263, #0x20
    209            TIM1->CR1 = 0x91; /*enable counter with interrupts on overflow*/
   \   000010 35 91 5250   MOV       L:0x5250, #0x91
    210            TIM1->IER = 0x01; /*enable interrupts*/
   \   000014 35 01 5254   MOV       L:0x5254, #0x1
    211          }
   \   000018 87           RETF
    212          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  BLCNT_INDX
       1  BLCNT_STATE
       1  BLCNT_VAL
      73  GPIO_Configuration
       1  InitEEData
      21  RCC_Configuration
       1  SysError
       1  TEST
      25  TIMER1_Configuration
       4  VER
       1  assert_failed
     220  main

 
 341 bytes in section .far_func.text
   5 bytes in section .near.bss
   4 bytes in section .near.data
 
 341 bytes of CODE memory
   9 bytes of DATA memory

Errors: none
Warnings: none
