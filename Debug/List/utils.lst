###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             03/Jul/2013  11:50:56 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\utils.c   #
#    Command line =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\utils.c   #
#                    -e --enable_multibytes -On --no_cse --no_unroll          #
#                    --no_inline --no_code_motion --no_tbaa --no_cross_call   #
#                    --debug --code_model medium --data_model medium -o       #
#                    C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Obj #
#                    \ --dlib_config "C:\Program Files\IAR Systems\Embedded   #
#                    Workbench 6.5\stm8\LIB\dlstm8mmn.h" -D STM8S007 -lC      #
#                    C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\ -I .\ --no_system_include --require_prototypes        #
#                    --vregs 16                                               #
#    List file    =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\utils.lst                                              #
#    Object file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Obj #
#                    \utils.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\jurban\Documents\GitHub\7896_SNAP_100\utils.c
      1          #include "main.h"
      2          extern char B2ASCBuf[];
      3          extern void FillBuffer (char bufr[],char filchr, int cntr);
      4          

   \                                 In section .near.bss, align 1
      5          char Indx;
   \                     Indx:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
      6          char Temp;	
   \                     Temp:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
      7          char Temp1;	
   \                     Temp1:
   \   000000              DS8 1

   \                                 In section .near.bss, align 1
      8          char Temp2;	
   \                     Temp2:
   \   000000              DS8 1
      9          extern char tempblock[4];

   \                                 In section .near.bss, align 1
     10          char temphldf[5];
   \                     temphldf:
   \   000000              DS8 5

   \                                 In section .near.bss, align 1
     11          char testbuffer[30];
   \                     testbuffer:
   \   000000              DS8 30

   \                                 In section .near.bss, align 1
     12          u32 LocalSum;
   \                     LocalSum:
   \   000000              DS8 4

   \                                 In section .near.bss, align 1
     13          char UartSendBlock[32];
   \                     UartSendBlock:
   \   000000              DS8 32
     14          void StoreB2AscBuf( u32 BinNum);
     15          void BIN2ASC(u32 BinNum);
     16          void Int2ASCII(void);
     17          void TESTHDR(void);
     18          
     19          
     20          

   \                                 In section .far_func.text, align 1
     21          void Int2ASCII(void){
     22                  LocalSum = tempblock[0];
   \                     Int2ASCII:
   \   000000 C6 ....      LD        A, L:tempblock
   \   000003 5F           CLRW      X
   \   000004 97           LD        XL, A
   \   000005 BF ..        LDW       S:?w1, X
   \   000007 5F           CLRW      X
   \   000008 BF ..        LDW       S:?w0, X
   \   00000A AE ....      LDW       X, #LocalSum
   \   00000D 8D ......    CALLF     L:?load32_0x_l0
     23          	LocalSum = LocalSum + (tempblock[1] * 256);
   \   000011 C6 ....      LD        A, L:tempblock + 1
   \   000014 905F         CLRW      Y
   \   000016 9097         LD        YL, A
   \   000018 AE 0100      LDW       X, #0x100
   \   00001B BF ..        LDW       S:?w0, X
   \   00001D 93           LDW       X, Y
   \   00001E 8D ......    CALLF     L:?mul16_x_x_w0
   \   000022 8D ......    CALLF     L:?sext32_l0_x
   \   000026 AE ....      LDW       X, #LocalSum
   \   000029 8D ......    CALLF     L:?add32_l0_l0_0x
   \   00002D AE ....      LDW       X, #LocalSum
   \   000030 8D ......    CALLF     L:?load32_0x_l0
     24           	LocalSum = LocalSum + (tempblock[2] * 65536);
   \   000034 C6 ....      LD        A, L:tempblock + 2
   \   000037 5F           CLRW      X
   \   000038 97           LD        XL, A
   \   000039 BF ..        LDW       S:?w1, X
   \   00003B 5F           CLRW      X
   \   00003C BF ..        LDW       S:?w0, X
   \   00003E 5F           CLRW      X
   \   00003F BF ..        LDW       S:?w3, X
   \   000041 5C           INCW      X
   \   000042 BF ..        LDW       S:?w2, X
   \   000044 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   000048 AE ....      LDW       X, #LocalSum
   \   00004B 8D ......    CALLF     L:?add32_l0_l0_0x
   \   00004F AE ....      LDW       X, #LocalSum
   \   000052 8D ......    CALLF     L:?load32_0x_l0
     25          	StoreB2AscBuf( LocalSum);	/*uses up 8 bytes in send block*/
   \   000056 AE ....      LDW       X, #LocalSum
   \   000059 8D ......    CALLF     L:?load32_l0_0x
   \   00005D 8D ......    CALLF     StoreB2AscBuf
     26          }
   \   000061 87           RETF
     27          /****************************************************************/
     28          /*helper routine to take a binary number conver to ascii	*/
     29          /*then put into B2ASCBuf					*/
     30          /* input BinNum = number to convert to 8 digits			*/
     31          /*       Indx = index to store ascii into buffer B2ASCBuf	*/ 
     32          /****************************************************************/

   \                                 In section .far_func.text, align 1
     33          void StoreB2AscBuf(u32 BinNum){
   \                     StoreB2AscBuf:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?mov_l2_l0
     34          	BIN2ASC(BinNum);	/*counts*/
   \   000008 8D ......    CALLF     L:?mov_l0_l2
   \   00000C 8D ......    CALLF     BIN2ASC
     35          }
   \   000010 AC ......    JPF       L:?epilogue_l2
     36          /*----------------------------------------------------------------------*/
     37          /*up to 3 bytes binary to ascii output					*/
     38          /*leading zero not supressed. to buffer B2ASCBuf[8] returns number count*/
     39          /*STK =1								*/
     40          /*----------------------------------------------------------------------*/

   \                                 In section .far_func.text, align 1
     41          void BIN2ASC(u32 InNum){
   \                     BIN2ASC:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w6
   \   000008 8D ......    CALLF     L:?mov_l2_l0
     42          char Bufptr;
     43          char Res;
     44            FillBuffer(B2ASCBuf,' ', 8);
   \   00000C 90AE 0008    LDW       Y, #0x8
   \   000010 A6 20        LD        A, #0x20
   \   000012 AE ....      LDW       X, #B2ASCBuf
   \   000015 8D ......    CALLF     FillBuffer
     45          	Bufptr = 0;
   \   000019 4F           CLR       A
   \   00001A B7 ..        LD        S:?b12, A
     46          	Res = InNum / (u32)10000000;
   \   00001C 8D ......    CALLF     L:?mov_l0_l2
   \   000020 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   000024 00989680     DC32      0x989680
   \   000028 45 .. ..     MOV       S:?b13, S:?b3
     47          	B2ASCBuf[Bufptr] = Res | 0x30;
   \   00002B 5F           CLRW      X
   \   00002C 41           EXG       A, XL
   \   00002D B6 ..        LD        A, S:?b12
   \   00002F 41           EXG       A, XL
   \   000030 B6 ..        LD        A, S:?b13
   \   000032 AA 30        OR        A, #0x30
   \   000034 D7 ....      LD        (L:B2ASCBuf,X), A
     48          	InNum = InNum - (Res * (u32)10000000);
   \   000037 5F           CLRW      X
   \   000038 41           EXG       A, XL
   \   000039 B6 ..        LD        A, S:?b13
   \   00003B 41           EXG       A, XL
   \   00003C BF ..        LDW       S:?w1, X
   \   00003E 5F           CLRW      X
   \   00003F BF ..        LDW       S:?w0, X
   \   000041 AE 9680      LDW       X, #0x9680
   \   000044 BF ..        LDW       S:?w3, X
   \   000046 AE 0098      LDW       X, #0x98
   \   000049 BF ..        LDW       S:?w2, X
   \   00004B 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   00004F 8D ......    CALLF     L:?mov_l1_l0
   \   000053 8D ......    CALLF     L:?mov_l0_l2
   \   000057 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   00005B 8D ......    CALLF     L:?mov_l2_l0
     49          	Bufptr++;
   \   00005F B6 ..        LD        A, S:?b12
   \   000061 AB 01        ADD       A, #0x1
   \   000063 B7 ..        LD        S:?b12, A
     50          
     51          	Res = InNum / (u32)1000000;
   \   000065 8D ......    CALLF     L:?mov_l0_l2
   \   000069 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   00006D 000F4240     DC32      0xf4240
   \   000071 45 .. ..     MOV       S:?b13, S:?b3
     52          	B2ASCBuf[Bufptr] = Res | 0x30;
   \   000074 5F           CLRW      X
   \   000075 41           EXG       A, XL
   \   000076 B6 ..        LD        A, S:?b12
   \   000078 41           EXG       A, XL
   \   000079 B6 ..        LD        A, S:?b13
   \   00007B AA 30        OR        A, #0x30
   \   00007D D7 ....      LD        (L:B2ASCBuf,X), A
     53          	InNum = InNum - (Res * (u32)1000000);
   \   000080 5F           CLRW      X
   \   000081 41           EXG       A, XL
   \   000082 B6 ..        LD        A, S:?b13
   \   000084 41           EXG       A, XL
   \   000085 BF ..        LDW       S:?w1, X
   \   000087 5F           CLRW      X
   \   000088 BF ..        LDW       S:?w0, X
   \   00008A AE 4240      LDW       X, #0x4240
   \   00008D BF ..        LDW       S:?w3, X
   \   00008F AE 000F      LDW       X, #0xf
   \   000092 BF ..        LDW       S:?w2, X
   \   000094 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   000098 8D ......    CALLF     L:?mov_l1_l0
   \   00009C 8D ......    CALLF     L:?mov_l0_l2
   \   0000A0 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   0000A4 8D ......    CALLF     L:?mov_l2_l0
     54          	Bufptr++;
   \   0000A8 B6 ..        LD        A, S:?b12
   \   0000AA AB 01        ADD       A, #0x1
   \   0000AC B7 ..        LD        S:?b12, A
     55          
     56          	Res = InNum / (u32)100000;
   \   0000AE 8D ......    CALLF     L:?mov_l0_l2
   \   0000B2 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   0000B6 000186A0     DC32      0x186a0
   \   0000BA 45 .. ..     MOV       S:?b13, S:?b3
     57          	B2ASCBuf[Bufptr] = Res | 0x30;
   \   0000BD 5F           CLRW      X
   \   0000BE 41           EXG       A, XL
   \   0000BF B6 ..        LD        A, S:?b12
   \   0000C1 41           EXG       A, XL
   \   0000C2 B6 ..        LD        A, S:?b13
   \   0000C4 AA 30        OR        A, #0x30
   \   0000C6 D7 ....      LD        (L:B2ASCBuf,X), A
     58          	InNum = InNum - (Res * (u32)100000);
   \   0000C9 5F           CLRW      X
   \   0000CA 41           EXG       A, XL
   \   0000CB B6 ..        LD        A, S:?b13
   \   0000CD 41           EXG       A, XL
   \   0000CE BF ..        LDW       S:?w1, X
   \   0000D0 5F           CLRW      X
   \   0000D1 BF ..        LDW       S:?w0, X
   \   0000D3 AE 86A0      LDW       X, #0x86a0
   \   0000D6 BF ..        LDW       S:?w3, X
   \   0000D8 5F           CLRW      X
   \   0000D9 5C           INCW      X
   \   0000DA BF ..        LDW       S:?w2, X
   \   0000DC 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   0000E0 8D ......    CALLF     L:?mov_l1_l0
   \   0000E4 8D ......    CALLF     L:?mov_l0_l2
   \   0000E8 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   0000EC 8D ......    CALLF     L:?mov_l2_l0
     59          	Bufptr++;
   \   0000F0 B6 ..        LD        A, S:?b12
   \   0000F2 AB 01        ADD       A, #0x1
   \   0000F4 B7 ..        LD        S:?b12, A
     60          
     61          	Res = InNum / (u32)10000;
   \   0000F6 8D ......    CALLF     L:?mov_l0_l2
   \   0000FA 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   0000FE 00002710     DC32      0x2710
   \   000102 45 .. ..     MOV       S:?b13, S:?b3
     62          	B2ASCBuf[Bufptr] = Res | 0x30;
   \   000105 5F           CLRW      X
   \   000106 41           EXG       A, XL
   \   000107 B6 ..        LD        A, S:?b12
   \   000109 41           EXG       A, XL
   \   00010A B6 ..        LD        A, S:?b13
   \   00010C AA 30        OR        A, #0x30
   \   00010E D7 ....      LD        (L:B2ASCBuf,X), A
     63          	InNum = InNum - (Res * (u32)10000);
   \   000111 5F           CLRW      X
   \   000112 41           EXG       A, XL
   \   000113 B6 ..        LD        A, S:?b13
   \   000115 41           EXG       A, XL
   \   000116 BF ..        LDW       S:?w1, X
   \   000118 5F           CLRW      X
   \   000119 BF ..        LDW       S:?w0, X
   \   00011B AE 2710      LDW       X, #0x2710
   \   00011E BF ..        LDW       S:?w3, X
   \   000120 5F           CLRW      X
   \   000121 BF ..        LDW       S:?w2, X
   \   000123 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   000127 8D ......    CALLF     L:?mov_l1_l0
   \   00012B 8D ......    CALLF     L:?mov_l0_l2
   \   00012F 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   000133 8D ......    CALLF     L:?mov_l2_l0
     64          	Bufptr++;
   \   000137 B6 ..        LD        A, S:?b12
   \   000139 AB 01        ADD       A, #0x1
   \   00013B B7 ..        LD        S:?b12, A
     65          
     66          	Res = InNum / (u32)1000;
   \   00013D 8D ......    CALLF     L:?mov_l0_l2
   \   000141 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   000145 000003E8     DC32      0x3e8
   \   000149 45 .. ..     MOV       S:?b13, S:?b3
     67          	B2ASCBuf[Bufptr] = Res | 0x30;
   \   00014C 5F           CLRW      X
   \   00014D 41           EXG       A, XL
   \   00014E B6 ..        LD        A, S:?b12
   \   000150 41           EXG       A, XL
   \   000151 B6 ..        LD        A, S:?b13
   \   000153 AA 30        OR        A, #0x30
   \   000155 D7 ....      LD        (L:B2ASCBuf,X), A
     68          	InNum = InNum - (Res * (u32)1000);
   \   000158 5F           CLRW      X
   \   000159 41           EXG       A, XL
   \   00015A B6 ..        LD        A, S:?b13
   \   00015C 41           EXG       A, XL
   \   00015D BF ..        LDW       S:?w1, X
   \   00015F 5F           CLRW      X
   \   000160 BF ..        LDW       S:?w0, X
   \   000162 AE 03E8      LDW       X, #0x3e8
   \   000165 BF ..        LDW       S:?w3, X
   \   000167 5F           CLRW      X
   \   000168 BF ..        LDW       S:?w2, X
   \   00016A 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   00016E 8D ......    CALLF     L:?mov_l1_l0
   \   000172 8D ......    CALLF     L:?mov_l0_l2
   \   000176 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   00017A 8D ......    CALLF     L:?mov_l2_l0
     69          	Bufptr++;
   \   00017E B6 ..        LD        A, S:?b12
   \   000180 AB 01        ADD       A, #0x1
   \   000182 B7 ..        LD        S:?b12, A
     70          
     71          	Res = InNum / (u32)100;
   \   000184 8D ......    CALLF     L:?mov_l0_l2
   \   000188 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   00018C 00000064     DC32      0x64
   \   000190 45 .. ..     MOV       S:?b13, S:?b3
     72          	B2ASCBuf[Bufptr] = Res | 0x30;
   \   000193 5F           CLRW      X
   \   000194 41           EXG       A, XL
   \   000195 B6 ..        LD        A, S:?b12
   \   000197 41           EXG       A, XL
   \   000198 B6 ..        LD        A, S:?b13
   \   00019A AA 30        OR        A, #0x30
   \   00019C D7 ....      LD        (L:B2ASCBuf,X), A
     73          	InNum = InNum - (Res * (u32)100);
   \   00019F 5F           CLRW      X
   \   0001A0 41           EXG       A, XL
   \   0001A1 B6 ..        LD        A, S:?b13
   \   0001A3 41           EXG       A, XL
   \   0001A4 BF ..        LDW       S:?w1, X
   \   0001A6 5F           CLRW      X
   \   0001A7 BF ..        LDW       S:?w0, X
   \   0001A9 AE 0064      LDW       X, #0x64
   \   0001AC BF ..        LDW       S:?w3, X
   \   0001AE 5F           CLRW      X
   \   0001AF BF ..        LDW       S:?w2, X
   \   0001B1 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   0001B5 8D ......    CALLF     L:?mov_l1_l0
   \   0001B9 8D ......    CALLF     L:?mov_l0_l2
   \   0001BD 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   0001C1 8D ......    CALLF     L:?mov_l2_l0
     74          	Bufptr++;
   \   0001C5 B6 ..        LD        A, S:?b12
   \   0001C7 AB 01        ADD       A, #0x1
   \   0001C9 B7 ..        LD        S:?b12, A
     75          
     76          	Res = InNum / (u32)10;
   \   0001CB 8D ......    CALLF     L:?mov_l0_l2
   \   0001CF 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   0001D3 0000000A     DC32      0xa
   \   0001D7 45 .. ..     MOV       S:?b13, S:?b3
     77          	B2ASCBuf[Bufptr] = Res | 0x30;
   \   0001DA 5F           CLRW      X
   \   0001DB 41           EXG       A, XL
   \   0001DC B6 ..        LD        A, S:?b12
   \   0001DE 41           EXG       A, XL
   \   0001DF B6 ..        LD        A, S:?b13
   \   0001E1 AA 30        OR        A, #0x30
   \   0001E3 D7 ....      LD        (L:B2ASCBuf,X), A
     78          	InNum = InNum - (Res * (u32)10);
   \   0001E6 5F           CLRW      X
   \   0001E7 41           EXG       A, XL
   \   0001E8 B6 ..        LD        A, S:?b13
   \   0001EA 41           EXG       A, XL
   \   0001EB BF ..        LDW       S:?w1, X
   \   0001ED 5F           CLRW      X
   \   0001EE BF ..        LDW       S:?w0, X
   \   0001F0 AE 000A      LDW       X, #0xa
   \   0001F3 BF ..        LDW       S:?w3, X
   \   0001F5 5F           CLRW      X
   \   0001F6 BF ..        LDW       S:?w2, X
   \   0001F8 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   0001FC 8D ......    CALLF     L:?mov_l1_l0
   \   000200 8D ......    CALLF     L:?mov_l0_l2
   \   000204 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   000208 8D ......    CALLF     L:?mov_l2_l0
     79          	Bufptr++;
   \   00020C B6 ..        LD        A, S:?b12
   \   00020E AB 01        ADD       A, #0x1
   \   000210 B7 ..        LD        S:?b12, A
     80          
     81          	B2ASCBuf[Bufptr] = InNum | 0x30;
   \   000212 B6 ..        LD        A, S:?b11
   \   000214 AA 30        OR        A, #0x30
   \   000216 5F           CLRW      X
   \   000217 41           EXG       A, XL
   \   000218 B6 ..        LD        A, S:?b12
   \   00021A 41           EXG       A, XL
   \   00021B D7 ....      LD        (L:B2ASCBuf,X), A
     82          }
   \   00021E AC ......    JPF       L:?epilogue_l2_w6
     83          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
     546  BIN2ASC
       1  Indx
      98  Int2ASCII
       4  LocalSum
      20  StoreB2AscBuf
       1  Temp
       1  Temp1
       1  Temp2
      32  UartSendBlock
       5  temphldf
      30  testbuffer

 
 664 bytes in section .far_func.text
  75 bytes in section .near.bss
 
 664 bytes of CODE memory
  75 bytes of DATA memory

Errors: none
Warnings: none
