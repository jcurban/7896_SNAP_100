###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             10/Jun/2013  08:40:37 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\SNAP\7896_SNAP\stm8s_uart3.c                          #
#    Command line =  C:\SNAP\7896_SNAP\stm8s_uart3.c -e --enable_multibytes   #
#                    -Oh --debug --code_model medium --data_model medium -o   #
#                    C:\SNAP\7896_SNAP\Debug\Obj\ --dlib_config "C:\Program   #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8S007 -lC                #
#                    C:\SNAP\7896_SNAP\Debug\List\ -I .\                      #
#                    --require_prototypes --vregs 16                          #
#    List file    =  C:\SNAP\7896_SNAP\Debug\List\stm8s_uart3.lst             #
#    Object file  =  C:\SNAP\7896_SNAP\Debug\Obj\stm8s_uart3.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\SNAP\7896_SNAP\stm8s_uart3.c
      1          /**
      2            ********************************************************************************
      3            * @file    stm8s_uart3.c
      4            * @author  MCD Application Team
      5            * @version V2.1.0
      6            * @date    18-November-2011
      7            * @brief   This file contains all the functions for the uart3 peripheral.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm8s_uart3.h"
     24          void Device_Received_Data_Handler(void);
     25          void Start_Device_Send(void);
     26          void Sending_Device_Data_Handler(void);
     27          
     28          /** @addtogroup STM8S_StdPeriph_Driver
     29            * @{
     30            */
     31          /* Private typedef -----------------------------------------------------------*/
     32          /* Private define ------------------------------------------------------------*/
     33          /* Private macro -------------------------------------------------------------*/
     34          /* Private variables ---------------------------------------------------------*/
     35          /* Private function prototypes -----------------------------------------------*/
     36          
     37          /* Private functions ---------------------------------------------------------*/
     38          /* Public functions ----------------------------------------------------------*/
     39          
     40          /** @}
     41            * @addtogroup UART3_Public_Functions
     42            * @{
     43            */
     44          
     45          /**
     46            * @brief  Deinitializes the UART peripheral.
     47            * @param  None
     48            * @retval None
     49            */
     50          

   \                                 In section .far_func.text, align 1
     51          void UART3_DeInit(void)
     52          {
     53              /* Clear the Idle Line Detected bit in the status rerister by a read
     54                 to the UART3_SR register followed by a Read to the UART3_DR register */
     55              (void) UART3->SR;
   \                     UART3_DeInit:
   \   000000 C6 5240      LD        A, L:0x5240
     56              (void) UART3->DR;
   \   000003 C6 5241      LD        A, L:0x5241
     57          
     58              UART3->BRR2 = UART3_BRR2_RESET_VALUE; /*Set UART3_BRR2 to reset value 0x00 */
   \   000006 725F 5243    CLR       L:0x5243
     59              UART3->BRR1 = UART3_BRR1_RESET_VALUE; /*Set UART3_BRR1 to reset value 0x00 */
   \   00000A 725F 5242    CLR       L:0x5242
     60          
     61              UART3->CR1 = UART3_CR1_RESET_VALUE;  /*Set UART3_CR1 to reset value 0x00  */
   \   00000E 725F 5244    CLR       L:0x5244
     62              UART3->CR2 = UART3_CR2_RESET_VALUE;  /*Set UART3_CR2 to reset value 0x00  */
   \   000012 725F 5245    CLR       L:0x5245
     63              UART3->CR3 = UART3_CR3_RESET_VALUE;  /*Set UART3_CR3 to reset value 0x00  */
   \   000016 725F 5246    CLR       L:0x5246
     64              UART3->CR4 = UART3_CR4_RESET_VALUE;  /*Set UART3_CR4 to reset value 0x00  */
   \   00001A 725F 5247    CLR       L:0x5247
     65              UART3->CR6 = UART3_CR6_RESET_VALUE;  /*Set UART3_CR6 to reset value 0x00  */
   \   00001E 725F 5249    CLR       L:0x5249
     66          
     67          }
   \   000022 87           RETF
     68          
     69          /**
     70            * @brief  Initializes the UART3 according to the specified parameters.
     71            * @param  BaudRate: The baudrate.
     72            * @param  WordLength : This parameter can be any of 
     73            *         the @ref UART3_WordLength_TypeDef enumeration.
     74            * @param  StopBits: This parameter can be any of the 
     75            *         @ref UART3_StopBits_TypeDef enumeration.
     76            * @param  Parity: This parameter can be any of the 
     77            *         @ref UART3_Parity_TypeDef enumeration.
     78            * @param  Mode: This parameter can be any of the @ref UART3_Mode_TypeDef values
     79            * @retval None
     80            */

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine2:
   \   000000 CA 5244      OR        A, L:0x5244
   \   000003 C7 5244      LD        L:0x5244, A
   \   000006 87           RETF

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine0:
   \   000000 BF ..        LDW       S:?w1, X
   \   000002 5F           CLRW      X
   \   000003 BF ..        LDW       S:?w0, X
   \   000005 AE ....      LDW       X, #`?<Constant "C:\\\\SNAP\\\\7896_SNAP\\\\stm...">`
   \   000008 AC ......    JPF       assert_failed

   \                                 In section .far_func.text, align 1
     81          void UART3_Init(uint32_t BaudRate, UART3_WordLength_TypeDef WordLength, 
     82                          UART3_StopBits_TypeDef StopBits, UART3_Parity_TypeDef Parity, 
     83                          UART3_Mode_TypeDef Mode)
     84          {
   \                     UART3_Init:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 3B ....      PUSH      S:?b6
   \   00000B 8D ......    CALLF     L:?mov_l2_l0
   \   00000F B7 ..        LD        S:?b14, A
   \   000011 45 .. ..     MOV       S:?b13, S:?b4
   \   000014 45 .. ..     MOV       S:?b12, S:?b5
     85              uint8_t BRR2_1 = 0, BRR2_2 = 0;
     86              uint32_t BaudRate_Mantissa = 0, BaudRate_Mantissa100 = 0;
     87          
     88                  /* Check the parameters */
     89              assert_param(IS_UART3_WORDLENGTH_OK(WordLength));
   \   000017 27 0B        JREQ      L:??CrossCallReturnLabel_4
   \   000019 A1 10        CP        A, #0x10
   \   00001B 27 07        JREQ      L:??CrossCallReturnLabel_4
   \   00001D AE 0059      LDW       X, #0x59
   \   000020 8D ......    CALLF     ?Subroutine0
     90              assert_param(IS_UART3_STOPBITS_OK(StopBits));
   \                     ??CrossCallReturnLabel_4:
   \   000024 3D ..        TNZ       S:?b13
   \   000026 27 0D        JREQ      L:??CrossCallReturnLabel_3
   \   000028 B6 ..        LD        A, S:?b13
   \   00002A A1 20        CP        A, #0x20
   \   00002C 27 07        JREQ      L:??CrossCallReturnLabel_3
   \   00002E AE 005A      LDW       X, #0x5a
   \   000031 8D ......    CALLF     ?Subroutine0
     91              assert_param(IS_UART3_PARITY_OK(Parity));
   \                     ??CrossCallReturnLabel_3:
   \   000035 3D ..        TNZ       S:?b12
   \   000037 27 11        JREQ      L:??CrossCallReturnLabel_2
   \   000039 B6 ..        LD        A, S:?b12
   \   00003B A1 04        CP        A, #0x4
   \   00003D 27 0B        JREQ      L:??CrossCallReturnLabel_2
   \   00003F A1 06        CP        A, #0x6
   \   000041 27 07        JREQ      L:??CrossCallReturnLabel_2
   \   000043 AE 005B      LDW       X, #0x5b
   \   000046 8D ......    CALLF     ?Subroutine0
     92              assert_param(IS_UART3_BAUDRATE_OK(BaudRate));
   \                     ??CrossCallReturnLabel_2:
   \   00004A BE ..        LDW       X, S:?w4
   \   00004C A3 0009      CPW       X, #0x9
   \   00004F 26 05        JRNE      L:??UART3_Init_0
   \   000051 BE ..        LDW       X, S:?w5
   \   000053 A3 8969      CPW       X, #0x8969
   \                     ??UART3_Init_0:
   \   000056 25 07        JRC       L:??CrossCallReturnLabel_1
   \   000058 AE 005C      LDW       X, #0x5c
   \   00005B 8D ......    CALLF     ?Subroutine0
     93              assert_param(IS_UART3_MODE_OK((uint8_t)Mode));
   \                     ??CrossCallReturnLabel_1:
   \   00005F 7B 01        LD        A, (0x1,SP)
   \   000061 A1 08        CP        A, #0x8
   \   000063 27 23        JREQ      L:??CrossCallReturnLabel_0
   \   000065 A1 40        CP        A, #0x40
   \   000067 27 1F        JREQ      L:??CrossCallReturnLabel_0
   \   000069 A1 04        CP        A, #0x4
   \   00006B 27 1B        JREQ      L:??CrossCallReturnLabel_0
   \   00006D A1 80        CP        A, #0x80
   \   00006F 27 17        JREQ      L:??CrossCallReturnLabel_0
   \   000071 A1 0C        CP        A, #0xc
   \   000073 27 13        JREQ      L:??CrossCallReturnLabel_0
   \   000075 A1 44        CP        A, #0x44
   \   000077 27 0F        JREQ      L:??CrossCallReturnLabel_0
   \   000079 A1 C0        CP        A, #0xc0
   \   00007B 27 0B        JREQ      L:??CrossCallReturnLabel_0
   \   00007D A1 88        CP        A, #0x88
   \   00007F 27 07        JREQ      L:??CrossCallReturnLabel_0
   \   000081 AE 005D      LDW       X, #0x5d
   \   000084 8D ......    CALLF     ?Subroutine0
     94          
     95              /* Clear the word length bit */
     96              UART3->CR1 &= (uint8_t)(~UART3_CR1_M);     
   \                     ??CrossCallReturnLabel_0:
   \   000088 7219 5244    BRES      L:0x5244, #0x4
     97              /* Set the word length bit according to UART3_WordLength value */
     98              UART3->CR1 |= (uint8_t)WordLength; 
   \   00008C B6 ..        LD        A, S:?b14
   \   00008E 8D ......    CALLF     ?Subroutine2
     99          
    100              /* Clear the STOP bits */
    101              UART3->CR3 &= (uint8_t)(~UART3_CR3_STOP);  
   \                     ??CrossCallReturnLabel_23:
   \   000092 C6 5246      LD        A, L:0x5246
   \   000095 A4 CF        AND       A, #0xcf
   \   000097 C7 5246      LD        L:0x5246, A
    102              /* Set the STOP bits number according to UART3_StopBits value  */
    103              UART3->CR3 |= (uint8_t)StopBits;  
   \   00009A B6 ..        LD        A, S:?b13
   \   00009C CA 5246      OR        A, L:0x5246
   \   00009F C7 5246      LD        L:0x5246, A
    104          
    105              /* Clear the Parity Control bit */
    106              UART3->CR1 &= (uint8_t)(~(UART3_CR1_PCEN | UART3_CR1_PS));  
   \   0000A2 C6 5244      LD        A, L:0x5244
   \   0000A5 A4 F9        AND       A, #0xf9
   \   0000A7 C7 5244      LD        L:0x5244, A
    107              /* Set the Parity Control bit to UART3_Parity value */
    108              UART3->CR1 |= (uint8_t)Parity;     
   \   0000AA B6 ..        LD        A, S:?b12
   \   0000AC 8D ......    CALLF     ?Subroutine2
    109          
    110              /* Clear the LSB mantissa of UART3DIV  */
    111              UART3->BRR1 &= (uint8_t)(~UART3_BRR1_DIVM);  
   \                     ??CrossCallReturnLabel_24:
   \   0000B0 C6 5242      LD        A, L:0x5242
   \   0000B3 725F 5242    CLR       L:0x5242
    112              /* Clear the MSB mantissa of UART3DIV  */
    113              UART3->BRR2 &= (uint8_t)(~UART3_BRR2_DIVM);  
   \   0000B7 C6 5243      LD        A, L:0x5243
   \   0000BA A4 0F        AND       A, #0xf
   \   0000BC C7 5243      LD        L:0x5243, A
    114              /* Clear the Fraction bits of UART3DIV */
    115              UART3->BRR2 &= (uint8_t)(~UART3_BRR2_DIVF);  
   \   0000BF C6 5243      LD        A, L:0x5243
   \   0000C2 A4 F0        AND       A, #0xf0
   \   0000C4 C7 5243      LD        L:0x5243, A
    116          
    117              /* Set the UART3 BaudRates in BRR1 and BRR2 registers according to UART3_BaudRate value */
    118              BaudRate_Mantissa    = ((uint32_t)CLK_GetClockFreq() / (BaudRate << 4));
   \   0000C7 8D ......    CALLF     L:?mov_l0_l2
   \   0000CB A6 04        LD        A, #0x4
   \   0000CD 8D ......    CALLF     L:?sll32_l0_l0_a
   \   0000D1 8D ......    CALLF     L:?mov_l2_l0
   \   0000D5 8D ......    CALLF     CLK_GetClockFreq
   \   0000D9 8D ......    CALLF     L:?mov_l1_l2
   \   0000DD 8D ......    CALLF     L:?udiv32_l0_l0_l1
   \   0000E1 8D ......    CALLF     L:?mov_l3_l0
    119              BaudRate_Mantissa100 = (((uint32_t)CLK_GetClockFreq() * 100) / (BaudRate << 4));
    120              /* The fraction and MSB mantissa should be loaded in one step in the BRR2 register */
    121              /* Set the fraction of UART3DIV  */
    122              BRR2_1 = (uint8_t)((uint8_t)(((BaudRate_Mantissa100 - (BaudRate_Mantissa * 100))
    123                                  << 4) / 100) & (uint8_t)0x0F); 
    124              BRR2_2 = (uint8_t)((BaudRate_Mantissa >> 4) & (uint8_t)0xF0);
    125          
    126              UART3->BRR2 = (uint8_t)(BRR2_1 | BRR2_2);
   \   0000E5 8D ......    CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_25:
   \   0000E9 8D ......    CALLF     L:?push_l0
   \   0000ED 8D ......    CALLF     CLK_GetClockFreq
   \   0000F1 8D ......    CALLF     ?Subroutine3
   \                     ??CrossCallReturnLabel_26:
   \   0000F5 8D ......    CALLF     L:?mov_l1_l2
   \   0000F9 8D ......    CALLF     L:?udiv32_l0_l0_l1
   \   0000FD 8D ......    CALLF     L:?pop_l1
   \   000101 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   000105 A6 04        LD        A, #0x4
   \   000107 8D ......    CALLF     L:?sll32_l0_l0_a
   \   00010B 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   00010F 00000064     DC32      0x64
   \   000113 B6 ..        LD        A, S:?b3
   \   000115 A4 0F        AND       A, #0xf
   \   000117 B7 ..        LD        S:?b0, A
   \   000119 BE ..        LDW       X, S:?w7
   \   00011B 54           SRLW      X
   \   00011C 54           SRLW      X
   \   00011D 54           SRLW      X
   \   00011E 54           SRLW      X
   \   00011F 9F           LD        A, XL
   \   000120 A4 F0        AND       A, #0xf0
   \   000122 BA ..        OR        A, S:?b0
   \   000124 C7 5243      LD        L:0x5243, A
    127              /* Set the LSB mantissa of UART3DIV  */
    128              UART3->BRR1 = (uint8_t)BaudRate_Mantissa;           
   \   000127 B6 ..        LD        A, S:?b15
   \   000129 C7 5242      LD        L:0x5242, A
    129          
    130              if ((uint8_t)(Mode & UART3_MODE_TX_ENABLE))
   \   00012C 7B 01        LD        A, (0x1,SP)
   \   00012E A5 04        BCP       A, #0x4
   \   000130 27 06        JREQ      L:??UART3_Init_1
    131              {
    132                  /* Set the Transmitter Enable bit */
    133                  UART3->CR2 |= UART3_CR2_TEN;  
   \   000132 7216 5245    BSET      L:0x5245, #0x3
   \   000136 20 04        JRA       L:??UART3_Init_2
    134              }
    135              else
    136              {
    137                  /* Clear the Transmitter Disable bit */
    138                  UART3->CR2 &= (uint8_t)(~UART3_CR2_TEN);  
   \                     ??UART3_Init_1:
   \   000138 7217 5245    BRES      L:0x5245, #0x3
    139              }
    140              if ((uint8_t)(Mode & UART3_MODE_RX_ENABLE))
   \                     ??UART3_Init_2:
   \   00013C 7B 01        LD        A, (0x1,SP)
   \   00013E A5 08        BCP       A, #0x8
   \   000140 27 06        JREQ      L:??UART3_Init_3
    141              {
    142                  /* Set the Receiver Enable bit */
    143                  UART3->CR2 |= UART3_CR2_REN;  
   \   000142 7214 5245    BSET      L:0x5245, #0x2
   \   000146 20 04        JRA       L:??UART3_Init_4
    144              }
    145              else
    146              {
    147                  /* Clear the Receiver Disable bit */
    148                  UART3->CR2 &= (uint8_t)(~UART3_CR2_REN);  
   \                     ??UART3_Init_3:
   \   000148 7215 5245    BRES      L:0x5245, #0x2
    149              }
    150          }
   \                     ??UART3_Init_4:
   \   00014C 5B 01        ADD       SP, #0x1
   \   00014E AC ......    JPF       L:?epilogue_l2_l3

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine3:
   \   000000 AE 0064      LDW       X, #0x64
   \   000003 BF ..        LDW       S:?w3, X
   \   000005 5F           CLRW      X
   \   000006 BF ..        LDW       S:?w2, X
   \   000008 AC ......    JPF       L:?mul32_l0_l0_l1
    151          
    152          /**
    153            * @brief  Enable the UART1 peripheral.
    154            * @param  NewState : The new state of the UART Communication.
    155            *         This parameter can be any of the @ref FunctionalState enumeration.
    156            * @retval None
    157            */

   \                                 In section .far_func.text, align 1
    158          void UART3_Cmd(FunctionalState NewState)
    159          {
    160          
    161              if (NewState != DISABLE)
   \                     UART3_Cmd:
   \   000000 4D           TNZ       A
   \   000001 27 05        JREQ      L:??UART3_Cmd_0
    162              {
    163                  /* UART3 Enable */
    164                  UART3->CR1 &= (uint8_t)(~UART3_CR1_UARTD); 
   \   000003 721B 5244    BRES      L:0x5244, #0x5
   \   000007 87           RETF
    165              }
    166              else
    167              {
    168                  /* UART3 Disable */
    169                  UART3->CR1 |= UART3_CR1_UARTD;  
   \                     ??UART3_Cmd_0:
   \   000008 721A 5244    BSET      L:0x5244, #0x5
    170              }
    171          }
   \   00000C 87           RETF
    172          
    173          /**
    174            * @brief  Enables or disables the specified UART3 interrupts.
    175            * @param  UART3_IT specifies the UART3 interrupt sources to be enabled or disabled.
    176            *         This parameter can be one of the following values:
    177            *         - UART3_IT_LBDF:  LIN Break detection interrupt
    178            *         - UART3_IT_LHDF:  LIN Break detection interrupt
    179            *         - UART3_IT_TXE:  Tansmit Data Register empty interrupt
    180            *         - UART3_IT_TC:   Transmission complete interrupt
    181            *         - UART3_IT_RXNE_OR: Receive Data register not empty/Over run error interrupt
    182            *         - UART3_IT_IDLE: Idle line detection interrupt
    183            *         - UART3_IT_PE:   Parity Error interrupt
    184            * @param  NewState new state of the specified UART3 interrupts.
    185            *         This parameter can be: ENABLE or DISABLE.
    186            * @retval None
    187            */

   \                                 In section .far_func.text, align 1
    188          void UART3_ITConfig(UART3_IT_TypeDef UART3_IT, FunctionalState NewState)
    189          {
   \                     UART3_ITConfig:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
   \   000007 BF ..        LDW       S:?w4, X
   \   000009 B7 ..        LD        S:?b10, A
    190              uint8_t uartreg = 0, itpos = 0x00;
    191              
    192              /* Check the parameters */
    193              assert_param(IS_UART3_CONFIG_IT_OK(UART3_IT));
   \   00000B A3 0100      CPW       X, #0x100
   \   00000E 27 25        JREQ      L:??CrossCallReturnLabel_6
   \   000010 A3 0277      CPW       X, #0x277
   \   000013 27 20        JREQ      L:??CrossCallReturnLabel_6
   \   000015 A3 0266      CPW       X, #0x266
   \   000018 27 1B        JREQ      L:??CrossCallReturnLabel_6
   \   00001A A3 0205      CPW       X, #0x205
   \   00001D 27 16        JREQ      L:??CrossCallReturnLabel_6
   \   00001F A3 0244      CPW       X, #0x244
   \   000022 27 11        JREQ      L:??CrossCallReturnLabel_6
   \   000024 A3 0412      CPW       X, #0x412
   \   000027 27 0C        JREQ      L:??CrossCallReturnLabel_6
   \   000029 A3 0346      CPW       X, #0x346
   \   00002C 27 07        JREQ      L:??CrossCallReturnLabel_6
   \   00002E AE 00C1      LDW       X, #0xc1
   \   000031 8D ......    CALLF     ?Subroutine0
    194              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
   \                     ??CrossCallReturnLabel_6:
   \   000035 3D ..        TNZ       S:?b10
   \   000037 27 0D        JREQ      L:??CrossCallReturnLabel_5
   \   000039 B6 ..        LD        A, S:?b10
   \   00003B A1 01        CP        A, #0x1
   \   00003D 27 07        JREQ      L:??CrossCallReturnLabel_5
   \   00003F AE 00C2      LDW       X, #0xc2
   \   000042 8D ......    CALLF     ?Subroutine0
    195          
    196              /* Get the UART3 register index */
    197              uartreg = (uint8_t)((uint16_t)UART3_IT >> 0x08);
   \                     ??CrossCallReturnLabel_5:
   \   000046 BE ..        LDW       X, S:?w4
   \   000048 4F           CLR       A
   \   000049 01           RRWA      X, A
   \   00004A 41           EXG       A, XL
   \   00004B B7 ..        LD        S:?b1, A
   \   00004D 41           EXG       A, XL
    198          
    199              /* Get the UART3 IT index */
    200              itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART3_IT & (uint8_t)0x0F));
   \   00004E 8D ......    CALLF     ?Subroutine1
    201          
    202              if (NewState != DISABLE)
   \                     ??CrossCallReturnLabel_20:
   \   000052 3D ..        TNZ       S:?b10
   \   000054 27 2A        JREQ      L:??UART3_ITConfig_0
    203              {
    204                  /* Enable the Interrupt bits according to UART3_IT mask */
    205                  if (uartreg == 0x01)
   \   000056 B6 ..        LD        A, S:?b1
   \   000058 A1 01        CP        A, #0x1
   \   00005A 26 07        JRNE      L:??UART3_ITConfig_1
    206                  {
    207                      UART3->CR1 |= itpos;
   \   00005C B6 ..        LD        A, S:?b0
   \   00005E CA 5244      OR        A, L:0x5244
   \   000061 20 2A        JRA       ??UART3_ITConfig_2
    208                  }
    209                  else if (uartreg == 0x02)
   \                     ??UART3_ITConfig_1:
   \   000063 A1 02        CP        A, #0x2
   \   000065 26 07        JRNE      L:??UART3_ITConfig_3
    210                  {
    211                      UART3->CR2 |= itpos;
   \   000067 B6 ..        LD        A, S:?b0
   \   000069 CA 5245      OR        A, L:0x5245
   \   00006C 20 2D        JRA       ??UART3_ITConfig_4
    212                  }
    213                  else if (uartreg == 0x03)
   \                     ??UART3_ITConfig_3:
   \   00006E A1 03        CP        A, #0x3
   \   000070 26 07        JRNE      L:??UART3_ITConfig_5
    214                  {
    215                      UART3->CR4 |= itpos;
   \   000072 B6 ..        LD        A, S:?b0
   \   000074 CA 5247      OR        A, L:0x5247
   \   000077 20 30        JRA       ??UART3_ITConfig_6
    216                  }
    217                  else
    218                  {
    219                      UART3->CR6 |= itpos;
   \                     ??UART3_ITConfig_5:
   \   000079 B6 ..        LD        A, S:?b0
   \   00007B CA 5249      OR        A, L:0x5249
   \   00007E 20 33        JRA       ??UART3_ITConfig_7
    220                  }
    221              }
    222              else
    223              {
    224                  /* Disable the interrupt bits according to UART3_IT mask */
    225                  if (uartreg == 0x01)
   \                     ??UART3_ITConfig_0:
   \   000080 33 ..        CPL       S:?b0
   \   000082 B6 ..        LD        A, S:?b1
   \   000084 A1 01        CP        A, #0x1
   \   000086 26 0A        JRNE      L:??UART3_ITConfig_8
    226                  {
    227                      UART3->CR1 &= (uint8_t)(~itpos);
   \   000088 B6 ..        LD        A, S:?b0
   \   00008A C4 5244      AND       A, L:0x5244
   \                     ??UART3_ITConfig_2:
   \   00008D C7 5244      LD        L:0x5244, A
   \   000090 20 24        JRA       L:??UART3_ITConfig_9
    228                  }
    229                  else if (uartreg == 0x02)
   \                     ??UART3_ITConfig_8:
   \   000092 A1 02        CP        A, #0x2
   \   000094 26 0A        JRNE      L:??UART3_ITConfig_10
    230                  {
    231                      UART3->CR2 &= (uint8_t)(~itpos);
   \   000096 B6 ..        LD        A, S:?b0
   \   000098 C4 5245      AND       A, L:0x5245
   \                     ??UART3_ITConfig_4:
   \   00009B C7 5245      LD        L:0x5245, A
   \   00009E 20 16        JRA       L:??UART3_ITConfig_9
    232                  }
    233                  else if (uartreg == 0x03)
   \                     ??UART3_ITConfig_10:
   \   0000A0 A1 03        CP        A, #0x3
   \   0000A2 26 0A        JRNE      L:??UART3_ITConfig_11
    234                  {
    235                      UART3->CR4 &= (uint8_t)(~itpos);
   \   0000A4 B6 ..        LD        A, S:?b0
   \   0000A6 C4 5247      AND       A, L:0x5247
   \                     ??UART3_ITConfig_6:
   \   0000A9 C7 5247      LD        L:0x5247, A
   \   0000AC 20 08        JRA       L:??UART3_ITConfig_9
    236                  }
    237                  else
    238                  {
    239                      UART3->CR6 &= (uint8_t)(~itpos);
   \                     ??UART3_ITConfig_11:
   \   0000AE B6 ..        LD        A, S:?b0
   \   0000B0 C4 5249      AND       A, L:0x5249
   \                     ??UART3_ITConfig_7:
   \   0000B3 C7 5249      LD        L:0x5249, A
    240                  }
    241              }
    242          }
   \                     ??UART3_ITConfig_9:
   \   0000B6 32 ....      POP       S:?b10
   \   0000B9 AC ......    JPF       L:?epilogue_w4

   \                                 In section .far_func.text, align 1
   \                     ?Subroutine1:
   \   000000 A4 0F        AND       A, #0xf
   \   000002 5F           CLRW      X
   \   000003 5C           INCW      X
   \   000004 8D ......    CALLF     L:?sll16_x_x_a
   \   000008 41           EXG       A, XL
   \   000009 B7 ..        LD        S:?b0, A
   \   00000B 87           RETF
    243          
    244          /**
    245            * @brief  Sets the UART3 LIN Break detection length.
    246            * @param  UART3_LINBreakDetectionLength specifies the LIN break detection length.
    247            *         This parameter can be any of the 
    248            *         @ref UART3_LINBreakDetectionLength_TypeDef values.
    249            * @retval None
    250            */

   \                                 In section .far_func.text, align 1
    251          void UART3_LINBreakDetectionConfig(UART3_LINBreakDetectionLength_TypeDef UART3_LINBreakDetectionLength)
    252          {
    253              /* Check the parameters */
    254              assert_param(IS_UART3_LINBREAKDETECTIONLENGTH_OK(UART3_LINBreakDetectionLength));
   \                     UART3_LINBreakDetectionConfig:
   \   000000 4D           TNZ       A
   \   000001 27 10        JREQ      L:??UART3_LINBreakDetectionConfig_0
   \   000003 A1 01        CP        A, #0x1
   \   000005 27 07        JREQ      L:??CrossCallReturnLabel_7
   \   000007 AE 00FE      LDW       X, #0xfe
   \   00000A 8D ......    CALLF     ?Subroutine0
    255          
    256              if (UART3_LINBreakDetectionLength != UART3_LINBREAKDETECTIONLENGTH_10BITS)
    257              {
    258                  UART3->CR4 |= UART3_CR4_LBDL;
   \                     ??CrossCallReturnLabel_7:
   \   00000E 721A 5247    BSET      L:0x5247, #0x5
   \   000012 87           RETF
    259              }
    260              else
    261              {
    262                  UART3->CR4 &= ((uint8_t)~UART3_CR4_LBDL);
   \                     ??UART3_LINBreakDetectionConfig_0:
   \   000013 721B 5247    BRES      L:0x5247, #0x5
    263              }
    264          }
   \   000017 87           RETF
    265          
    266          /**
    267            * @brief  Configure the UART3 peripheral.
    268            * @param  UART3_Mode specifies the LIN mode.
    269            *         This parameter can be any of the @ref UART3_LinMode_TypeDef values.
    270            * @param  UART3_Autosync specifies the LIN automatic resynchronization mode.
    271            *         This parameter can be any of the @ref UART3_LinAutosync_TypeDef values.
    272            * @param  UART3_DivUp specifies the LIN divider update method.
    273            *         This parameter can be any of the @ref UART3_LinDivUp_TypeDef values.
    274            * @retval None
    275            */

   \                                 In section .far_func.text, align 1
    276          void UART3_LINConfig(UART3_LinMode_TypeDef UART3_Mode,
    277                               UART3_LinAutosync_TypeDef UART3_Autosync, 
    278                               UART3_LinDivUp_TypeDef UART3_DivUp)
    279          {
   \                     UART3_LINConfig:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
   \   000007 B7 ..        LD        S:?b8, A
   \   000009 45 .. ..     MOV       S:?b9, S:?b0
   \   00000C 45 .. ..     MOV       S:?b10, S:?b1
    280              /* Check the parameters */
    281              assert_param(IS_UART3_SLAVE_OK(UART3_Mode));
   \   00000F 27 0B        JREQ      L:??CrossCallReturnLabel_10
   \   000011 A1 01        CP        A, #0x1
   \   000013 27 07        JREQ      L:??CrossCallReturnLabel_10
   \   000015 AE 0119      LDW       X, #0x119
   \   000018 8D ......    CALLF     ?Subroutine0
    282              assert_param(IS_UART3_AUTOSYNC_OK(UART3_Autosync));
   \                     ??CrossCallReturnLabel_10:
   \   00001C B6 ..        LD        A, S:?b9
   \   00001E A1 01        CP        A, #0x1
   \   000020 27 0B        JREQ      L:??CrossCallReturnLabel_9
   \   000022 3D ..        TNZ       S:?b9
   \   000024 27 07        JREQ      L:??CrossCallReturnLabel_9
   \   000026 AE 011A      LDW       X, #0x11a
   \   000029 8D ......    CALLF     ?Subroutine0
    283              assert_param(IS_UART3_DIVUP_OK(UART3_DivUp));
   \                     ??CrossCallReturnLabel_9:
   \   00002D 3D ..        TNZ       S:?b10
   \   00002F 27 0D        JREQ      L:??CrossCallReturnLabel_8
   \   000031 B6 ..        LD        A, S:?b10
   \   000033 A1 01        CP        A, #0x1
   \   000035 27 07        JREQ      L:??CrossCallReturnLabel_8
   \   000037 AE 011B      LDW       X, #0x11b
   \   00003A 8D ......    CALLF     ?Subroutine0
    284          
    285              if (UART3_Mode != UART3_LIN_MODE_MASTER)
   \                     ??CrossCallReturnLabel_8:
   \   00003E 3D ..        TNZ       S:?b8
   \   000040 27 06        JREQ      L:??UART3_LINConfig_0
    286              {
    287                  UART3->CR6 |=  UART3_CR6_LSLV;
   \   000042 721A 5249    BSET      L:0x5249, #0x5
   \   000046 20 04        JRA       L:??UART3_LINConfig_1
    288              }
    289              else
    290              {
    291                  UART3->CR6 &= ((uint8_t)~UART3_CR6_LSLV);
   \                     ??UART3_LINConfig_0:
   \   000048 721B 5249    BRES      L:0x5249, #0x5
    292              }
    293          
    294              if (UART3_Autosync != UART3_LIN_AUTOSYNC_DISABLE)
   \                     ??UART3_LINConfig_1:
   \   00004C 3D ..        TNZ       S:?b9
   \   00004E 27 06        JREQ      L:??UART3_LINConfig_2
    295              {
    296                  UART3->CR6 |=  UART3_CR6_LASE ;
   \   000050 7218 5249    BSET      L:0x5249, #0x4
   \   000054 20 04        JRA       L:??UART3_LINConfig_3
    297              }
    298              else
    299              {
    300                  UART3->CR6 &= ((uint8_t)~ UART3_CR6_LASE );
   \                     ??UART3_LINConfig_2:
   \   000056 7219 5249    BRES      L:0x5249, #0x4
    301              }
    302          
    303              if (UART3_DivUp != UART3_LIN_DIVUP_LBRR1)
   \                     ??UART3_LINConfig_3:
   \   00005A 3D ..        TNZ       S:?b10
   \   00005C 27 06        JREQ      L:??UART3_LINConfig_4
    304              {
    305                  UART3->CR6 |=  UART3_CR6_LDUM;
   \   00005E 721E 5249    BSET      L:0x5249, #0x7
   \   000062 20 04        JRA       L:??UART3_LINConfig_5
    306              }
    307              else
    308              {
    309                  UART3->CR6 &= ((uint8_t)~ UART3_CR6_LDUM);
   \                     ??UART3_LINConfig_4:
   \   000064 721F 5249    BRES      L:0x5249, #0x7
    310              }
    311          }
   \                     ??UART3_LINConfig_5:
   \   000068 32 ....      POP       S:?b10
   \   00006B AC ......    JPF       L:?epilogue_w4
    312          
    313          /**
    314            * @brief  Enables or disables the UART3 LIN mode.
    315            * @param  NewState is new state of the UART3 LIN mode.
    316            *         This parameter can be ENABLE or DISABLE
    317            * @retval None
    318            */

   \                                 In section .far_func.text, align 1
    319          void UART3_LINCmd(FunctionalState NewState)
    320          {
    321              /* Check the parameters */
    322              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
   \                     UART3_LINCmd:
   \   000000 4D           TNZ       A
   \   000001 27 10        JREQ      L:??UART3_LINCmd_0
   \   000003 A1 01        CP        A, #0x1
   \   000005 27 07        JREQ      L:??CrossCallReturnLabel_11
   \   000007 AE 0142      LDW       X, #0x142
   \   00000A 8D ......    CALLF     ?Subroutine0
    323          
    324              if (NewState != DISABLE)
    325              {
    326                  /* Enable the LIN mode by setting the LINE bit in the CR2 register */
    327                  UART3->CR3 |= UART3_CR3_LINEN;
   \                     ??CrossCallReturnLabel_11:
   \   00000E 721C 5246    BSET      L:0x5246, #0x6
   \   000012 87           RETF
    328              }
    329              else
    330              {
    331                  /* Disable the LIN mode by clearing the LINE bit in the CR2 register */
    332                  UART3->CR3 &= ((uint8_t)~UART3_CR3_LINEN);
   \                     ??UART3_LINCmd_0:
   \   000013 721D 5246    BRES      L:0x5246, #0x6
    333              }
    334          }
   \   000017 87           RETF
    335          
    336          /**
    337            * @brief  Selects the UART3 WakeUp method.
    338            * @param  UART3_WakeUp: specifies the UART3 wakeup method.
    339            *         This parameter can be any of the @ref UART3_WakeUp_TypeDef values.
    340            * @retval None
    341            */

   \                                 In section .far_func.text, align 1
    342          void UART3_WakeUpConfig(UART3_WakeUp_TypeDef UART3_WakeUp)
    343          {
   \                     UART3_WakeUpConfig:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    344              /* Check the parameters */
    345              assert_param(IS_UART3_WAKEUP_OK(UART3_WakeUp));
   \   000005 27 0B        JREQ      L:??CrossCallReturnLabel_12
   \   000007 A1 08        CP        A, #0x8
   \   000009 27 07        JREQ      L:??CrossCallReturnLabel_12
   \   00000B AE 0159      LDW       X, #0x159
   \   00000E 8D ......    CALLF     ?Subroutine0
    346          
    347              UART3->CR1 &= ((uint8_t)~UART3_CR1_WAKE);
   \                     ??CrossCallReturnLabel_12:
   \   000012 7217 5244    BRES      L:0x5244, #0x3
    348              UART3->CR1 |= (uint8_t)UART3_WakeUp;
   \   000016 B6 ..        LD        A, S:?b8
   \   000018 8D ......    CALLF     ?Subroutine2
    349          }
   \                     ??CrossCallReturnLabel_22:
   \   00001C 32 ....      POP       S:?b8
   \   00001F 87           RETF
    350          
    351          /**
    352            * @brief  Determines if the UART3 is in mute mode or not.
    353            * @param  NewState: new state of the UART3 mode.
    354            *         This parameter can be ENABLE or DISABLE
    355            * @retval None
    356            */

   \                                 In section .far_func.text, align 1
    357          void UART3_ReceiverWakeUpCmd(FunctionalState NewState)
    358          {
    359              /* Check the parameters */
    360              assert_param(IS_FUNCTIONALSTATE_OK(NewState));
   \                     UART3_ReceiverWakeUpCmd:
   \   000000 4D           TNZ       A
   \   000001 27 10        JREQ      L:??UART3_ReceiverWakeUpCmd_0
   \   000003 A1 01        CP        A, #0x1
   \   000005 27 07        JREQ      L:??CrossCallReturnLabel_13
   \   000007 AE 0168      LDW       X, #0x168
   \   00000A 8D ......    CALLF     ?Subroutine0
    361          
    362              if (NewState != DISABLE)
    363              {
    364                  /* Enable the mute mode UART3 by setting the RWU bit in the CR2 register */
    365                  UART3->CR2 |= UART3_CR2_RWU;
   \                     ??CrossCallReturnLabel_13:
   \   00000E 7212 5245    BSET      L:0x5245, #0x1
   \   000012 87           RETF
    366              }
    367              else
    368              {
    369                  /* Disable the mute mode UART3 by clearing the RWU bit in the CR1 register */
    370                  UART3->CR2 &= ((uint8_t)~UART3_CR2_RWU);
   \                     ??UART3_ReceiverWakeUpCmd_0:
   \   000013 7213 5245    BRES      L:0x5245, #0x1
    371              }
    372          }
   \   000017 87           RETF
    373          
    374          /**
    375            * @brief  Returns the most recent received data by the UART3 peripheral.
    376            * @param  None
    377            * @retval Received Data
    378            */

   \                                 In section .far_func.text, align 1
    379          u8 UART3_ReceiveData8(void)
    380          {
    381              return ((u8)UART3->DR);
   \                     UART3_ReceiveData8:
   \   000000 C6 5241      LD        A, L:0x5241
   \   000003 87           RETF
    382          }
    383          
    384          /**
    385            * @brief  Returns the most recent received data by the UART3 peripheral.
    386            * @param  None
    387            * @retval Received Data
    388            */

   \                                 In section .far_func.text, align 1
    389          uint16_t UART3_ReceiveData9(void)
    390          {
    391            uint16_t temp = 0;
    392          
    393           temp = (uint16_t)(((uint16_t)((uint16_t)UART3->CR1 & (uint16_t)UART3_CR1_R8)) << 1);
   \                     UART3_ReceiveData9:
   \   000000 C6 5244      LD        A, L:0x5244
    394            return (uint16_t)((((uint16_t)UART3->DR) | temp) & ((uint16_t)0x01FF));
   \   000003 5F           CLRW      X
   \   000004 97           LD        XL, A
   \   000005 01           RRWA      X, A
   \   000006 A4 80        AND       A, #0x80
   \   000008 02           RLWA      X, A
   \   000009 58           SLLW      X
   \   00000A C6 5241      LD        A, L:0x5241
   \   00000D 905F         CLRW      Y
   \   00000F 9097         LD        YL, A
   \   000011 BF ..        LDW       S:?w0, X
   \   000013 93           LDW       X, Y
   \   000014 02           RLWA      X, A
   \   000015 BA ..        OR        A, S:?b0
   \   000017 01           RRWA      X, A
   \   000018 87           RETF
    395          }
    396          
    397          /**
    398            * @brief  Transmits 8 bit data through the UART3 peripheral.
    399            * @param  Data the data to transmit.
    400            * @retval None
    401            */

   \                                 In section .far_func.text, align 1
    402          void UART3_SendData8(u8 Data)
    403          {
    404              /* Transmit Data */
    405              UART3->DR = Data;
   \                     UART3_SendData8:
   \   000000 C7 5241      LD        L:0x5241, A
    406          }
   \   000003 87           RETF
    407          
    408          /**
    409            * @brief  Transmits 9 bit data through the UART3 peripheral.
    410            * @param   Data: the data to transmit.
    411            * @retval None
    412            */

   \                                 In section .far_func.text, align 1
    413          void UART3_SendData9(uint16_t Data)
    414          {
   \                     UART3_SendData9:
   \   000000 9093         LDW       Y, X
    415              /* Clear the transmit data bit 8 */
    416              UART3->CR1 &= ((uint8_t)~UART3_CR1_T8);                  
   \   000002 721D 5244    BRES      L:0x5244, #0x6
    417              
    418              /* Write the transmit data bit [8] */
    419              UART3->CR1 |= (uint8_t)(((uint8_t)(Data >> 2)) & UART3_CR1_T8); 
   \   000006 54           SRLW      X
   \   000007 54           SRLW      X
   \   000008 9F           LD        A, XL
   \   000009 A4 40        AND       A, #0x40
   \   00000B 8D ......    CALLF     ?Subroutine2
    420              
    421              /* Write the transmit data bit [0:7] */
    422              UART3->DR   = (uint8_t)(Data);                    
   \                     ??CrossCallReturnLabel_21:
   \   00000F 909F         LD        A, YL
   \   000011 C7 5241      LD        L:0x5241, A
    423          }
   \   000014 87           RETF
    424          
    425          /**
    426            * @brief  Transmits break characters.
    427            * @param  None
    428            * @retval None
    429            */

   \                                 In section .far_func.text, align 1
    430          void UART3_SendBreak(void)
    431          {
    432              UART3->CR2 |= UART3_CR2_SBK;
   \                     UART3_SendBreak:
   \   000000 7210 5245    BSET      L:0x5245, #0x0
    433          }
   \   000004 87           RETF
    434          
    435          /**
    436            * @brief  Sets the address of the UART3 node.
    437            * @param  UART3_Address: Indicates the address of the UART3 node.
    438            * @retval None
    439            */

   \                                 In section .far_func.text, align 1
    440          void UART3_SetAddress(uint8_t UART3_Address)
    441          {
   \                     UART3_SetAddress:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    442              /* Check the parameters */
    443              assert_param(IS_UART3_ADDRESS_OK(UART3_Address));
   \   000005 A1 10        CP        A, #0x10
   \   000007 25 07        JRC       L:??CrossCallReturnLabel_14
   \   000009 AE 01BB      LDW       X, #0x1bb
   \   00000C 8D ......    CALLF     ?Subroutine0
    444          
    445              /* Clear the UART3 address */
    446              UART3->CR4 &= ((uint8_t)~UART3_CR4_ADD);
   \                     ??CrossCallReturnLabel_14:
   \   000010 C6 5247      LD        A, L:0x5247
   \   000013 A4 F0        AND       A, #0xf0
   \   000015 C7 5247      LD        L:0x5247, A
    447              /* Set the UART3 address node */
    448              UART3->CR4 |= UART3_Address;
   \   000018 B6 ..        LD        A, S:?b8
   \   00001A CA 5247      OR        A, L:0x5247
   \   00001D C7 5247      LD        L:0x5247, A
    449          }
   \   000020 32 ....      POP       S:?b8
   \   000023 87           RETF
    450          
    451          /**
    452            * @brief  Checks whether the specified UART3 flag is set or not.
    453            * @param  UART3_FLAG specifies the flag to check.
    454            *         This parameter can be any of the @ref UART3_Flag_TypeDef enumeration.
    455            * @retval FlagStatus (SET or RESET)
    456            */

   \                                 In section .far_func.text, align 1
    457          FlagStatus UART3_GetFlagStatus(UART3_Flag_TypeDef UART3_FLAG)
    458          {
   \                     UART3_GetFlagStatus:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
   \   000007 BF ..        LDW       S:?w4, X
    459              FlagStatus status = RESET;
   \   000009 3F ..        CLR       S:?b10
    460          
    461              /* Check parameters */
    462              assert_param(IS_UART3_FLAG_OK(UART3_FLAG));
   \   00000B A3 0080      CPW       X, #0x80
   \   00000E 27 3E        JREQ      L:??CrossCallReturnLabel_15
   \   000010 A3 0040      CPW       X, #0x40
   \   000013 27 39        JREQ      L:??CrossCallReturnLabel_15
   \   000015 A3 0020      CPW       X, #0x20
   \   000018 27 34        JREQ      L:??CrossCallReturnLabel_15
   \   00001A A3 0010      CPW       X, #0x10
   \   00001D 27 2F        JREQ      L:??CrossCallReturnLabel_15
   \   00001F A3 0008      CPW       X, #0x8
   \   000022 27 2A        JREQ      L:??CrossCallReturnLabel_15
   \   000024 A3 0004      CPW       X, #0x4
   \   000027 27 25        JREQ      L:??CrossCallReturnLabel_15
   \   000029 A3 0002      CPW       X, #0x2
   \   00002C 27 20        JREQ      L:??CrossCallReturnLabel_15
   \   00002E A3 0001      CPW       X, #0x1
   \   000031 27 1B        JREQ      L:??CrossCallReturnLabel_15
   \   000033 A3 0101      CPW       X, #0x101
   \   000036 27 31        JREQ      L:??UART3_GetFlagStatus_0
   \   000038 A3 0301      CPW       X, #0x301
   \   00003B 27 33        JREQ      L:??UART3_GetFlagStatus_1
   \   00003D A3 0302      CPW       X, #0x302
   \   000040 27 2E        JREQ      L:??UART3_GetFlagStatus_1
   \   000042 A3 0210      CPW       X, #0x210
   \   000045 27 1B        JREQ      L:??UART3_GetFlagStatus_2
   \   000047 AE 01CE      LDW       X, #0x1ce
   \   00004A 8D ......    CALLF     ?Subroutine0
    463          
    464              /* Check the status of the specified UART3 flag*/
    465              if (UART3_FLAG == UART3_FLAG_LBDF)
    466              {
    467                  if ((UART3->CR4 & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
    468                  {
    469                      /* UART3_FLAG is set*/
    470                      status = SET;
    471                  }
    472                  else
    473                  {
    474                      /* UART3_FLAG is reset*/
    475                      status = RESET;
    476                  }
    477              }
    478              else if (UART3_FLAG == UART3_FLAG_SBK)
    479              {
    480                  if ((UART3->CR2 & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
    481                  {
    482                      /* UART3_FLAG is set*/
    483                      status = SET;
    484                  }
    485                  else
    486                  {
    487                      /* UART3_FLAG is reset*/
    488                      status = RESET;
    489                  }
    490              }
    491              else if ((UART3_FLAG == UART3_FLAG_LHDF) || (UART3_FLAG == UART3_FLAG_LSF))
    492              {
    493                  if ((UART3->CR6 & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
    494                  {
    495                      /* UART3_FLAG is set*/
    496                      status = SET;
    497                  }
    498                  else
    499                  {
    500                      /* UART3_FLAG is reset*/
    501                      status = RESET;
    502                  }
    503              }
    504              else
    505              {
    506                  if ((UART3->SR & (uint8_t)UART3_FLAG) != (uint8_t)0x00)
   \                     ??CrossCallReturnLabel_15:
   \   00004E B6 ..        LD        A, S:?b9
   \   000050 C5 5240      BCP       A, L:0x5240
   \   000053 27 04        JREQ      L:??UART3_GetFlagStatus_3
    507                  {
    508                      /* UART3_FLAG is set*/
    509                      status = SET;
   \                     ??UART3_GetFlagStatus_4:
   \   000055 35 01 ....   MOV       S:?b10, #0x1
    510                  }
    511                  else
    512                  {
    513                      /* UART3_FLAG is reset*/
    514                      status = RESET;
    515                  }
    516              }
    517          
    518              /* Return the UART3_FLAG status*/
    519              return  status;
   \                     ??UART3_GetFlagStatus_3:
   \   000059 B6 ..        LD        A, S:?b10
   \   00005B 32 ....      POP       S:?b10
   \   00005E AC ......    JPF       L:?epilogue_w4
   \                     ??UART3_GetFlagStatus_2:
   \   000062 7208 5247 EE BTJT      L:0x5247, #0x4, L:??UART3_GetFlagStatus_4
   \   000067 20 F0        JRA       L:??UART3_GetFlagStatus_3
   \                     ??UART3_GetFlagStatus_0:
   \   000069 7200 5245 E7 BTJT      L:0x5245, #0x0, L:??UART3_GetFlagStatus_4
   \   00006E 20 E9        JRA       L:??UART3_GetFlagStatus_3
   \                     ??UART3_GetFlagStatus_1:
   \   000070 B6 ..        LD        A, S:?b9
   \   000072 C5 5249      BCP       A, L:0x5249
   \   000075 26 DE        JRNE      L:??UART3_GetFlagStatus_4
   \   000077 20 E0        JRA       L:??UART3_GetFlagStatus_3
    520          }
    521          /**
    522            * @brief  Clears the UART3 flags.
    523            * @param  UART3_FLAG specifies the flag to clear
    524            *         This parameter can be any combination of the following values:
    525            *         - UART3_FLAG_LBDF: LIN Break detection flag.
    526            *         - UART3_FLAG_LHDF: LIN Header detection flag.
    527            *         - UART3_FLAG_LSF: LIN synchrone field flag.
    528            *         - UART3_FLAG_RXNE: Receive data register not empty flag.
    529            * @note
    530            *         - PE (Parity error), FE (Framing error), NF (Noise error), 
    531            *           OR (OverRun error) and IDLE (Idle line detected) flags are cleared
    532            *           by software sequence: a read operation to UART3_SR register 
    533            *           (UART3_GetFlagStatus())followed by a read operation to UART3_DR 
    534            *           register(UART3_ReceiveData8() or UART3_ReceiveData9()).
    535            *             
    536            *         - RXNE flag can be also cleared by a read to the UART3_DR register
    537            *           (UART3_ReceiveData8()or UART3_ReceiveData9()).
    538            *             
    539            *         - TC flag can be also cleared by software sequence: a read operation
    540            *           to UART3_SR register (UART3_GetFlagStatus()) followed by a write 
    541            *           operation to UART3_DR register (UART3_SendData8() or UART3_SendData9()).
    542            *             
    543            *         - TXE flag is cleared only by a write to the UART3_DR register 
    544            *           (UART3_SendData8() or UART3_SendData9()).
    545            *             
    546            *         - SBK flag is cleared during the stop bit of break.
    547            * @retval None
    548            */

   \                                 In section .far_func.text, align 1
    549          void UART3_ClearFlag(UART3_Flag_TypeDef UART3_FLAG)
    550          {
    551              /* Check the parameters */
    552              assert_param(IS_UART3_CLEAR_FLAG_OK(UART3_FLAG));
   \                     UART3_ClearFlag:
   \   000000 A3 0020      CPW       X, #0x20
   \   000003 27 1B        JREQ      L:??UART3_ClearFlag_0
   \   000005 A3 0302      CPW       X, #0x302
   \   000008 27 20        JREQ      L:??UART3_ClearFlag_1
   \   00000A A3 0301      CPW       X, #0x301
   \   00000D 27 0C        JREQ      L:??CrossCallReturnLabel_16
   \   00000F A3 0210      CPW       X, #0x210
   \   000012 27 11        JREQ      L:??UART3_ClearFlag_2
   \   000014 AE 0228      LDW       X, #0x228
   \   000017 8D ......    CALLF     ?Subroutine0
    553          
    554              /*Clear the Receive Register Not Empty flag */
    555              if (UART3_FLAG == UART3_FLAG_RXNE)
    556              {
    557                  UART3->SR = (uint8_t)~(UART3_SR_RXNE);
    558              }
    559              /*Clear the LIN Break Detection flag */
    560              else if (UART3_FLAG == UART3_FLAG_LBDF)
    561              {
    562                  UART3->CR4 &= (uint8_t)(~UART3_CR4_LBDF);
    563              }
    564              /*Clear the LIN Header Detection Flag */
    565              else if (UART3_FLAG == UART3_FLAG_LHDF)
    566              {
    567                  UART3->CR6 &= (uint8_t)(~UART3_CR6_LHDF);
    568              }
    569              /*Clear the LIN Synch Field flag */
    570              else
    571              {
    572                  UART3->CR6 &= (uint8_t)(~UART3_CR6_LSF);
   \                     ??CrossCallReturnLabel_16:
   \   00001B 7211 5249    BRES      L:0x5249, #0x0
    573              }
    574          }
   \   00001F 87           RETF
   \                     ??UART3_ClearFlag_0:
   \   000020 35 DF 5240   MOV       L:0x5240, #0xdf
   \   000024 87           RETF
   \                     ??UART3_ClearFlag_2:
   \   000025 7219 5247    BRES      L:0x5247, #0x4
   \   000029 87           RETF
   \                     ??UART3_ClearFlag_1:
   \   00002A 7213 5249    BRES      L:0x5249, #0x1
   \   00002E 87           RETF
    575          
    576          /**
    577            * @brief  Checks whether the specified UART3 interrupt has occurred or not.
    578            * @param  UART3_IT: Specifies the UART3 interrupt pending bit to check.
    579            *         This parameter can be one of the following values:
    580            *         - UART3_IT_LBDF:  LIN Break detection interrupt
    581            *         - UART3_IT_TXE:  Tansmit Data Register empty interrupt
    582            *         - UART3_IT_TC:   Transmission complete interrupt
    583            *         - UART3_IT_RXNE: Receive Data register not empty interrupt
    584            *         - UART3_IT_IDLE: Idle line detection interrupt
    585            *         - UART3_IT_OR:  OverRun Error interrupt
    586            *         - UART3_IT_PE:   Parity Error interrupt
    587            * @retval The state of UART3_IT (SET or RESET).
    588            */

   \                                 In section .far_func.text, align 1
    589          ITStatus UART3_GetITStatus(UART3_IT_TypeDef UART3_IT)
    590          {
   \                     UART3_GetITStatus:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 3B ....      PUSH      S:?b10
   \   000007 BF ..        LDW       S:?w4, X
    591              ITStatus pendingbitstatus = RESET;
   \   000009 3F ..        CLR       S:?b10
    592              uint8_t itpos = 0;
    593              uint8_t itmask1 = 0;
    594              uint8_t itmask2 = 0;
    595              uint8_t enablestatus = 0;
    596          
    597              /* Check parameters */
    598              assert_param(IS_UART3_GET_IT_OK(UART3_IT));
   \   00000B A3 0277      CPW       X, #0x277
   \   00000E 27 2A        JREQ      L:??CrossCallReturnLabel_17
   \   000010 A3 0266      CPW       X, #0x266
   \   000013 27 25        JREQ      L:??CrossCallReturnLabel_17
   \   000015 A3 0255      CPW       X, #0x255
   \   000018 27 20        JREQ      L:??CrossCallReturnLabel_17
   \   00001A A3 0244      CPW       X, #0x244
   \   00001D 27 1B        JREQ      L:??CrossCallReturnLabel_17
   \   00001F A3 0235      CPW       X, #0x235
   \   000022 27 16        JREQ      L:??CrossCallReturnLabel_17
   \   000024 A3 0346      CPW       X, #0x346
   \   000027 27 11        JREQ      L:??CrossCallReturnLabel_17
   \   000029 A3 0412      CPW       X, #0x412
   \   00002C 27 0C        JREQ      L:??CrossCallReturnLabel_17
   \   00002E A3 0100      CPW       X, #0x100
   \   000031 27 07        JREQ      L:??CrossCallReturnLabel_17
   \   000033 AE 0256      LDW       X, #0x256
   \   000036 8D ......    CALLF     ?Subroutine0
    599          
    600              /* Get the UART3 IT index*/
    601              itpos = (uint8_t)((uint8_t)1 << (uint8_t)((uint8_t)UART3_IT & (uint8_t)0x0F));
   \                     ??CrossCallReturnLabel_17:
   \   00003A B6 ..        LD        A, S:?b9
   \   00003C 8D ......    CALLF     ?Subroutine1
    602              /* Get the UART3 IT index*/
    603              itmask1 = (uint8_t)((uint8_t)UART3_IT >> (uint8_t)4);
    604              /* Set the IT mask*/
    605              itmask2 = (uint8_t)((uint8_t)1 << itmask1);
   \                     ??CrossCallReturnLabel_19:
   \   000040 B6 ..        LD        A, S:?b9
   \   000042 4E           SWAP      A
   \   000043 A4 0F        AND       A, #0xf
   \   000045 5F           CLRW      X
   \   000046 5C           INCW      X
   \   000047 8D ......    CALLF     L:?sll16_x_x_a
   \   00004B 9F           LD        A, XL
    606          
    607              /* Check the status of the specified UART3 pending bit*/
    608              if (UART3_IT == UART3_IT_PE)
   \   00004C BE ..        LDW       X, S:?w4
   \   00004E A3 0100      CPW       X, #0x100
   \   000051 26 0C        JRNE      L:??UART3_GetITStatus_0
    609              {
    610                  /* Get the UART3_ITPENDINGBIT enable bit status*/
    611                  enablestatus = (uint8_t)((uint8_t)UART3->CR1 & itmask2);
   \   000053 C4 5244      AND       A, L:0x5244
   \   000056 B7 ..        LD        S:?b1, A
    612                  /* Check the status of the specified UART3 interrupt*/
    613          
    614                  if (((UART3->SR & itpos) != (uint8_t)0x00) && enablestatus)
   \   000058 B6 ..        LD        A, S:?b0
   \   00005A C4 5240      AND       A, L:0x5240
   \   00005D 20 20        JRA       ??UART3_GetITStatus_1
    615                  {
    616                      /* Interrupt occurred*/
    617                      pendingbitstatus = SET;
    618                  }
    619                  else
    620                  {
    621                      /* Interrupt not occurred*/
    622                      pendingbitstatus = RESET;
    623                  }
    624              }
    625              else if (UART3_IT == UART3_IT_LBDF)
   \                     ??UART3_GetITStatus_0:
   \   00005F A3 0346      CPW       X, #0x346
   \   000062 26 0C        JRNE      L:??UART3_GetITStatus_2
    626              {
    627                  /* Get the UART3_IT enable bit status*/
    628                  enablestatus = (uint8_t)((uint8_t)UART3->CR4 & itmask2);
   \   000064 C4 5247      AND       A, L:0x5247
   \   000067 B7 ..        LD        S:?b1, A
    629                  /* Check the status of the specified UART3 interrupt*/
    630                  if (((UART3->CR4 & itpos) != (uint8_t)0x00) && enablestatus)
   \   000069 B6 ..        LD        A, S:?b0
   \   00006B C4 5247      AND       A, L:0x5247
   \   00006E 20 0F        JRA       ??UART3_GetITStatus_1
    631                  {
    632                      /* Interrupt occurred*/
    633                      pendingbitstatus = SET;
    634                  }
    635                  else
    636                  {
    637                      /* Interrupt not occurred*/
    638                      pendingbitstatus = RESET;
    639                  }
    640              }
    641              else if (UART3_IT == UART3_IT_LHDF)
   \                     ??UART3_GetITStatus_2:
   \   000070 A3 0412      CPW       X, #0x412
   \   000073 26 10        JRNE      L:??UART3_GetITStatus_3
    642              {
    643                  /* Get the UART3_IT enable bit status*/
    644                  enablestatus = (uint8_t)((uint8_t)UART3->CR6 & itmask2);
   \   000075 C4 5249      AND       A, L:0x5249
   \   000078 B7 ..        LD        S:?b1, A
    645                  /* Check the status of the specified UART3 interrupt*/
    646                  if (((UART3->CR6 & itpos) != (uint8_t)0x00) && enablestatus)
   \   00007A B6 ..        LD        A, S:?b0
   \   00007C C4 5249      AND       A, L:0x5249
   \                     ??UART3_GetITStatus_1:
   \   00007F A1 00        CP        A, #0x0
   \   000081 26 0E        JRNE      L:??UART3_GetITStatus_4
   \   000083 20 14        JRA       L:??UART3_GetITStatus_5
    647                  {
    648                      /* Interrupt occurred*/
    649                      pendingbitstatus = SET;
    650                  }
    651                  else
    652                  {
    653                      /* Interrupt not occurred*/
    654                      pendingbitstatus = RESET;
    655                  }
    656              }
    657              else
    658              {
    659                  /* Get the UART3_IT enable bit status*/
    660                  enablestatus = (uint8_t)((uint8_t)UART3->CR2 & itmask2);
   \                     ??UART3_GetITStatus_3:
   \   000085 C4 5245      AND       A, L:0x5245
   \   000088 B7 ..        LD        S:?b1, A
    661                  /* Check the status of the specified UART3 interrupt*/
    662                  if (((UART3->SR & itpos) != (uint8_t)0x00) && enablestatus)
   \   00008A B6 ..        LD        A, S:?b0
   \   00008C C5 5240      BCP       A, L:0x5240
   \   00008F 27 08        JREQ      L:??UART3_GetITStatus_5
   \                     ??UART3_GetITStatus_4:
   \   000091 3D ..        TNZ       S:?b1
   \   000093 27 04        JREQ      L:??UART3_GetITStatus_5
    663                  {
    664                      /* Interrupt occurred*/
    665                      pendingbitstatus = SET;
   \   000095 35 01 ....   MOV       S:?b10, #0x1
    666                  }
    667                  else
    668                  {
    669                      /* Interrupt not occurred*/
    670                      pendingbitstatus = RESET;
    671                  }
    672              }
    673              /* Return the UART3_IT status*/
    674              return  pendingbitstatus;
   \                     ??UART3_GetITStatus_5:
   \   000099 B6 ..        LD        A, S:?b10
   \   00009B 32 ....      POP       S:?b10
   \   00009E AC ......    JPF       L:?epilogue_w4
    675          }
    676          
    677          /**
    678            * @brief  Clears the UART3 pending flags.
    679            * @param  UART3_IT specifies the pending bit to clear
    680            *         This parameter can be one of the following values:
    681            *         - UART3_IT_LBDF:  LIN Break detection interrupt
    682            *         - UART3_IT_LHDF:  LIN Header detection interrupt
    683            *         - UART3_IT_RXNE: Receive Data register not empty interrupt.
    684            *
    685            * @note
    686            *         - PE (Parity error), FE (Framing error), NF (Noise error), 
    687            *           OR (OverRun error) and IDLE (Idle line detected) pending bits are 
    688            *           cleared by software sequence: a read operation to UART3_SR register
    689            *           (UART3_GetITStatus()) followed by a read operation to UART3_DR register 
    690            *           (UART3_ReceiveData8() or UART3_ReceiveData9()).
    691            *             
    692            *         - RXNE pending bit can be also cleared by a read to the UART3_DR register
    693            *           (UART3_ReceiveData8() or UART3_ReceiveData9() ).
    694            *             
    695            *         - TC (Transmit complete) pending bit can be cleared by software 
    696            *           sequence: a read operation to UART3_SR register (UART3_GetITStatus())
    697            *           followed by a write operation to UART3_DR register 
    698            *           (UART3_SendData8()or UART3_SendData9()).
    699            *             
    700            *         - TXE pending bit is cleared only by a write to the UART3_DR register
    701            *           (UART3_SendData8() or UART3_SendData9()).
    702            * @retval None
    703            */

   \                                 In section .far_func.text, align 1
    704          void UART3_ClearITPendingBit(UART3_IT_TypeDef UART3_IT)
    705          {
    706              /* Check the parameters */
    707              assert_param(IS_UART3_CLEAR_IT_OK(UART3_IT));
   \                     UART3_ClearITPendingBit:
   \   000000 A3 0255      CPW       X, #0x255
   \   000003 27 16        JREQ      L:??UART3_ClearITPendingBit_0
   \   000005 A3 0412      CPW       X, #0x412
   \   000008 27 0C        JREQ      L:??CrossCallReturnLabel_18
   \   00000A A3 0346      CPW       X, #0x346
   \   00000D 27 11        JREQ      L:??UART3_ClearITPendingBit_1
   \   00000F AE 02C3      LDW       X, #0x2c3
   \   000012 8D ......    CALLF     ?Subroutine0
    708          
    709              /*Clear the Receive Register Not Empty pending bit */
    710              if (UART3_IT == UART3_IT_RXNE)
    711              {
    712                  UART3->SR = (uint8_t)~(UART3_SR_RXNE);
    713              }
    714              /*Clear the LIN Break Detection pending bit */
    715              else if (UART3_IT == UART3_IT_LBDF)
    716              {
    717                  UART3->CR4 &= (uint8_t)~(UART3_CR4_LBDF);
    718              }
    719              /*Clear the LIN Header Detection pending bit */
    720              else
    721              {
    722                  UART3->CR6 &= (uint8_t)(~UART3_CR6_LHDF);
   \                     ??CrossCallReturnLabel_18:
   \   000016 7213 5249    BRES      L:0x5249, #0x1
    723              }
    724          }
   \   00001A 87           RETF
   \                     ??UART3_ClearITPendingBit_0:
   \   00001B 35 DF 5240   MOV       L:0x5240, #0xdf
   \   00001F 87           RETF
   \                     ??UART3_ClearITPendingBit_1:
   \   000020 7219 5247    BRES      L:0x5247, #0x4
   \   000024 87           RETF

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "C:\\\\SNAP\\\\7896_SNAP\\\\stm...">`:
   \   000000 43 3A 5C 53  DC8 "C:\\SNAP\\7896_SNAP\\stm8s_uart3.c"
   \          4E 41 50 5C 
    725          /**
    726            * @}
    727            */
    728            
    729          /**
    730            * @}
    731            */
    732            
    733          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant "C:\\SNAP\\7896_SNAP\\stm...">
      12  ?Subroutine0
      12  ?Subroutine1
       7  ?Subroutine2
      12  ?Subroutine3
      47  UART3_ClearFlag
      37  UART3_ClearITPendingBit
      13  UART3_Cmd
      35  UART3_DeInit
     121  UART3_GetFlagStatus
     162  UART3_GetITStatus
     189  UART3_ITConfig
     338  UART3_Init
      24  UART3_LINBreakDetectionConfig
      24  UART3_LINCmd
     111  UART3_LINConfig
       4  UART3_ReceiveData8
      25  UART3_ReceiveData9
      24  UART3_ReceiverWakeUpCmd
       5  UART3_SendBreak
       4  UART3_SendData8
      21  UART3_SendData9
      36  UART3_SetAddress
      32  UART3_WakeUpConfig

 
 1 295 bytes in section .far_func.text
    32 bytes in section .near.rodata
 
 1 295 bytes of CODE  memory
    32 bytes of CONST memory

Errors: none
Warnings: none
