###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             08/Jul/2013  08:35:26 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Device_Se #
#                    rial_Handlers.c                                          #
#    Command line =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Device_Se #
#                    rial_Handlers.c -e --enable_multibytes -On --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o C:\Users\jurban\Documents\GitHub\ #
#                    7896_SNAP_100\Debug\Obj\ --dlib_config "C:\Program       #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8S007 -lC                #
#                    C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\ -I .\ --no_system_include --require_prototypes        #
#                    --vregs 16                                               #
#    List file    =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\Device_Serial_Handlers.lst                             #
#    Object file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Obj #
#                    \Device_Serial_Handlers.o                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Device_Serial_Handlers.c
      1          /**
      2            ******************************************************************************
      3           *******************************************************************************
      4            * @file    Device_Serial_handlers.c
      5            * @author  MCD Application Team
      6            * @version V2.1.0
      7            * @date    11-June-2013
      8            * @brief   This file contains all the functions for the uart3 peripheral.
      9            ******************************************************************************
     10            ******************************************************************************
     11            */
     12          
     13          /* Includes ------------------------------------------------------------------*/
     14          
     15          #include "stm8s_uart3.h"
     16          #include "stm8s_it.h"
     17          #include "SNAP_Defines.h"
     18          /* EXTERNAL ROUTINES */
     19          extern void CopyBuffer (char *dest, char *srce);
     20          extern void CopyBufferDevice(char srce[]);
     21          extern void CopyBufferCounted (char *dest, char *srce, int cntr);
     22          extern void FillBuffer (char bufr[],char filchr, int cntr);
     23          extern void UART3_SendData8(u8);
     24          extern void InitializeDeviceBuffer (void);
     25          extern int Add_Char_to_Buffer (char *bufr, int ptr, char chr);
     26          extern int Add_Integer_to_Buffer (char *bufr,int ptr, int vint);
     27          extern int Add_String_to_Buffer (char *bufr, int ptr, char *srce);
     28          void Add_Char_to_GS1011_Buffer (char chr);
     29          extern void Initialize_GS011_Xmit_buffer(void);
     30          extern void CopyBufferGS1011 (char dest[], char srce[]);
     31          
     32          extern void Make_Website_Update_from_Processing_Buffer(void);
     33          void Add_String_to_GS1011_Buffer ( char *srce);
     34          void CopySerialNumber(void);
     35          void Send_ACK_Message(void);
     36          char Check_Checksum_Device_Buffer(void);
     37          /* EXTERNAL DATA */
     38          extern char Device_Rcvr_EOM_Timer;
     39          extern char Device_Rcvr_Timeout;
     40          extern char Device_Serial_number[];
     41          extern char SNAP_State;
     42          extern char checksum_Okay;
     43          extern char CID_Value;
     44          extern char Device_State;
     45          extern char checksum_this;
     46          extern char Processing_Byte_Count;
     47          extern char Device_Processing_Buffer[];
     48          extern char Website_Parameter_ASCII_Buffer[];
     49          extern char Device_Xmit_Buffer[];
     50          extern int cntr,gtchr;
     51          extern u8 Device_RX_InPtr;
     52          extern u8 Device_RX_OutPtr;
     53          extern int Device_Rcvr_Char_Count;
     54          extern u8 Device_Rcvr_Complete_flag;
     55          extern char Device_Update_Ready_for_Website_flag;
     56          extern u8 Device_Rcvr_char;
     57          extern int Device_Processing_Pointer;
     58          extern int Device_Rcvr_Pointer;
     59          extern char  *Device_Rcvr_Dest_Pointer;
     60          extern char Device_Receiver_Buffer[];
     61          extern char GS1011_Xmit_Buffer[];
     62          extern char ACKMessage[];
     63          extern char ResendMessage[];
     64          extern char Packet_Data_Buffer;
     65          extern u8 Device_Xmit_Complete_Flag;
     66          extern u8 Device_Xmit_Char;
     67          extern char Device_Xmit_Pointer;
     68          extern u8 Device_Xmit_Char_Count;
     69          extern u8 GS1011_Xmit_Char_Count;
     70          extern char GS1011_Xmit_Buffer[];
     71          /* EXTERNAL DATA STOCK MESSAGES */
     72          extern char   DEVICE_SOH; /*START OF TEXT 0X02*/
     73          extern int DEVICE_MSGLENGTH; /*LENGTH OF MESSAGE*/
     74          extern char DEVICE_COMMAND; /* COMMAND TYPE*/
     75          extern char DEVICE_PACKETDATA; 
     76          extern char DEVICE_CHECKSUM;
     77          extern char DEVICE_EOT; /*end of text*/
     78          extern char SNAPREADYHDR;
     79          extern char SNAPREADY;
     80          extern char SNAPREADYEND;
     81          extern char Powered[];
     82          extern char ConfiguringAdaptor[];
     83          extern char AdaptorReady[];
     84          extern char SendtoWebsiteHeader[];
     85          extern char SendtoWebsiteHeader1[];
     86          
     87          extern char RequestMessage[];
     88          extern char Request1Message[];
     89          
     90          extern char NC_RequestMessage[];
     91          extern char NC_Request1Message[];
     92          
     93          extern char ASCII_RequestMessage[];
     94          extern char ASCII_Request1Message[];
     95          
     96          /* LOCAL DEFINITIONS */
     97          void InitDeviceUART(void);
     98          void Get_Device_Char(void);
     99          void Send_Next_Char_to_Device(void);
    100          /*void Make_Send_SNAP_Ready_Message(void);*/
    101          void Initialize_Device_receiver_buffer(void);
    102          void Handle_Device_State(void);
    103          void Assemble_and_Checksum_device_message(void);
    104          char Checksum_Device_Buffer(char bufr[]);
    105          char Parse_Device_Rcvrd_Buffer(void);
    106          void Start_Device_Xmit (void);
    107          void Save_PValues(void);
    108          void Send_powered_Message(void);
    109          
    110          void Process_Receiver_Device_Message(void);
    111          void Process_Xmit_Device_Message(char bufr[], char bufr2[]);
    112          
    113          void Send_Powered(void);
    114          void Wait_For_Update(void);
    115          void Process_Received_Update(void);
    116          void Send_Update(void);
    117          void Send_Finished(void);
    118          void Convert_Update_Parameters(void);
    119          void Send_Powered_Wait_For_Update(void);
    120          void Check_Device_Input (void);
    121          void Clear_Device_Rcvr_Settings(void);
    122          void Send_Request_Message(void);
    123          void Send_Request1_Message(void);
    124          
    125          
    126          void Send_AdaptorReady_Message(void);
    127          void Send_ConfiguringAdaptor_Message(void);
    128          void Send_Resend_Message(void);
    129          /*****************************************************************************/
    130          /*****************************************************************************/
    131          /*****       device State machine                                        *****/
    132          /*****************************************************************************/
    133          /*****************************************************************************/
    134          
    135          /*****************************************************************************/
    136          /* State 0 - Send_Powered                                                    */
    137          /*      Lets the Device know we're ready for the update                      */
    138          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    139          void Send_Powered(void){
    140            FillBuffer (Device_Receiver_Buffer,0x00, BFRSIZE);
   \                     Send_Powered:
   \   000000 90AE 00FF    LDW       Y, #0xff
   \   000004 4F           CLR       A
   \   000005 AE ....      LDW       X, #Device_Receiver_Buffer
   \   000008 8D ......    CALLF     FillBuffer
    141            Send_powered_Message();
   \   00000C 8D ......    CALLF     Send_powered_Message
    142            Device_Update_Ready_for_Website_flag =0;
   \   000010 35 00 ....   MOV       L:Device_Update_Ready_for_Website_flag, #0x0
    143            SNAP_State = 1;
   \   000014 35 01 ....   MOV       L:SNAP_State, #0x1
    144          }
   \   000018 87           RETF
    145          /*****************************************************************************/
    146          /* State 1 - Wait_For_Update                                                 */
    147          /*      can't do much without the update data                                */
    148          /*****************************************************************************/
    149          #define COMMAND_BYTE 0x03
    150          #define STATUS_COMMAND_BYTE 0x04

   \                                 In section .far_func.text, align 1
    151          void Wait_For_Update(void){
    152            if (Device_Rcvr_Complete_flag != 0){
   \                     Wait_For_Update:
   \   000000 C6 ....      LD        A, L:Device_Rcvr_Complete_flag
   \   000003 A1 00        CP        A, #0x0
   \   000005 27 06        JREQ      L:??Wait_For_Update_0
    153                Check_Device_Input();
   \   000007 8D ......    CALLF     Check_Device_Input
   \   00000B 20 0B        JRA       L:??Wait_For_Update_1
    154            }
    155            else {
    156              if (Device_Rcvr_Timeout == 1)
   \                     ??Wait_For_Update_0:
   \   00000D C6 ....      LD        A, L:Device_Rcvr_Timeout
   \   000010 A1 01        CP        A, #0x1
   \   000012 26 04        JRNE      L:??Wait_For_Update_1
    157                Initialize_Device_receiver_buffer();
   \   000014 8D ......    CALLF     Initialize_Device_receiver_buffer
    158             }     
    159          }
   \                     ??Wait_For_Update_1:
   \   000018 87           RETF
    160          

   \                                 In section .far_func.text, align 1
    161          void Check_Device_Input (void){
    162                if (Device_Receiver_Buffer[COMMAND_BYTE] == 'U')
   \                     Check_Device_Input:
   \   000000 C6 ....      LD        A, L:Device_Receiver_Buffer + 3
   \   000003 A1 55        CP        A, #0x55
   \   000005 26 18        JRNE      L:??Check_Device_Input_0
    163                  if (SNAP_State == WAIT_FOR_UPDATE_STATE){ /* only process update if waiting for update*/
   \   000007 C6 ....      LD        A, L:SNAP_State
   \   00000A A1 01        CP        A, #0x1
   \   00000C 26 06        JRNE      L:??Check_Device_Input_1
    164                      SNAP_State = PREOCESS_DEVICE_UPDATE_STATE;
   \   00000E 35 02 ....   MOV       L:SNAP_State, #0x2
   \   000012 20 0B        JRA       L:??Check_Device_Input_0
    165                  }
    166                else if (Device_Receiver_Buffer[COMMAND_BYTE] == 'S')
   \                     ??Check_Device_Input_1:
   \   000014 C6 ....      LD        A, L:Device_Receiver_Buffer + 3
   \   000017 A1 53        CP        A, #0x53
   \   000019 26 04        JRNE      L:??Check_Device_Input_0
    167                  /*if (Device_Receiver_Buffer[STATUS_COMMAND_BYTE] == 'S')    */
    168                  InitializeDeviceBuffer();
   \   00001B 8D ......    CALLF     InitializeDeviceBuffer
    169          }
   \                     ??Check_Device_Input_0:
   \   00001F 87           RETF
    170          /*****************************************************************************/
    171          /* State 2 - Process_Update                                                  */
    172          /*      convert the update data to ASCII for the website                     */
    173          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    174          void Process_Received_Update(void){
    175            Process_Receiver_Device_Message();
   \                     Process_Received_Update:
   \   000000 8D ......    CALLF     Process_Receiver_Device_Message
    176            checksum_Okay = Check_Checksum_Device_Buffer();
   \   000004 8D ......    CALLF     Check_Checksum_Device_Buffer
   \   000008 C7 ....      LD        L:checksum_Okay, A
    177            if (checksum_Okay == 0x55){
   \   00000B C6 ....      LD        A, L:checksum_Okay
   \   00000E A1 55        CP        A, #0x55
   \   000010 26 12        JRNE      L:??Process_Received_Update_0
    178              CopySerialNumber();
   \   000012 8D ......    CALLF     CopySerialNumber
    179              Make_Website_Update_from_Processing_Buffer();
   \   000016 8D ......    CALLF     Make_Website_Update_from_Processing_Buffer
    180              InitializeDeviceBuffer();
   \   00001A 8D ......    CALLF     InitializeDeviceBuffer
    181              SNAP_State = GET_GS1011_NETWORK_STATE;
   \   00001E 35 03 ....   MOV       L:SNAP_State, #0x3
   \   000022 20 0C        JRA       L:??Process_Received_Update_1
    182            }
    183            else{                                 /*if checksum wrong ask for it again*/
    184             InitializeDeviceBuffer();
   \                     ??Process_Received_Update_0:
   \   000024 8D ......    CALLF     InitializeDeviceBuffer
    185             Send_Resend_Message();
   \   000028 8D ......    CALLF     Send_Resend_Message
    186              SNAP_State = 1;
   \   00002C 35 01 ....   MOV       L:SNAP_State, #0x1
    187            }
    188          }
   \                     ??Process_Received_Update_1:
   \   000030 87           RETF
    189          /*****************************************************************************/
    190          /**************************e wai***************************************************/
    191          /****         Send messagt response routines                          ***/
    192          /*****************************************************************************/
    193          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    194          void Convert_Update_Parameters(void){
    195           CID_Value = 0x30;
   \                     Convert_Update_Parameters:
   \   000000 35 30 ....   MOV       L:CID_Value, #0x30
    196           Initialize_GS011_Xmit_buffer();
   \   000004 8D ......    CALLF     Initialize_GS011_Xmit_buffer
    197           CopyBufferGS1011(GS1011_Xmit_Buffer, SendtoWebsiteHeader);
   \   000008 90AE ....    LDW       Y, #SendtoWebsiteHeader
   \   00000C AE ....      LDW       X, #GS1011_Xmit_Buffer
   \   00000F 8D ......    CALLF     CopyBufferGS1011
    198           Add_Char_to_GS1011_Buffer (CID_Value);
   \   000013 C6 ....      LD        A, L:CID_Value
   \   000016 8D ......    CALLF     Add_Char_to_GS1011_Buffer
    199           Add_String_to_GS1011_Buffer (SendtoWebsiteHeader1);
   \   00001A AE ....      LDW       X, #SendtoWebsiteHeader1
   \   00001D 8D ......    CALLF     Add_String_to_GS1011_Buffer
    200           }
   \   000021 87           RETF
    201          /*****************************************************************************/
    202          /*****        Send_powered_Message                                ****/
    203          /*****        1st byte in Device processed buffer is the character count  ****/
    204          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    205          void Send_powered_Message(void){
    206            Initialize_Device_receiver_buffer();
   \                     Send_powered_Message:
   \   000000 8D ......    CALLF     Initialize_Device_receiver_buffer
    207            CopyBufferDevice(Powered);
   \   000004 AE ....      LDW       X, #Powered
   \   000007 8D ......    CALLF     CopyBufferDevice
    208            Device_Xmit_Char_Count = Device_Xmit_Char_Count;
   \   00000B C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00000E C7 ....      LD        L:Device_Xmit_Char_Count, A
    209            Start_Device_Xmit ();
   \   000011 8D ......    CALLF     Start_Device_Xmit
    210          }
   \   000015 87           RETF
    211          /*****************************************************************************/
    212          /*****        Send_ConfiguringAdaptor_Message                                ****/
    213          /*****        1st byte in Device processed buffer is the character count  ****/
    214          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    215          void Send_AdaptorReady_Message(void){
    216            Initialize_Device_receiver_buffer();
   \                     Send_AdaptorReady_Message:
   \   000000 8D ......    CALLF     Initialize_Device_receiver_buffer
    217            CopyBufferDevice(AdaptorReady);
   \   000004 AE ....      LDW       X, #AdaptorReady
   \   000007 8D ......    CALLF     CopyBufferDevice
    218            Device_Xmit_Char_Count = Device_Xmit_Char_Count;
   \   00000B C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00000E C7 ....      LD        L:Device_Xmit_Char_Count, A
    219            Start_Device_Xmit ();
   \   000011 8D ......    CALLF     Start_Device_Xmit
    220          }
   \   000015 87           RETF
    221          /*****************************************************************************/
    222          /*****        Send_ConfiguringAdaptor_Message                                ****/
    223          /*****        1st byte in Device processed buffer is the character count  ****/
    224          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    225          void Send_ConfiguringAdaptor_Message(void){
    226            Initialize_Device_receiver_buffer();
   \                     Send_ConfiguringAdaptor_Message:
   \   000000 8D ......    CALLF     Initialize_Device_receiver_buffer
    227            CopyBufferDevice(ConfiguringAdaptor);
   \   000004 AE ....      LDW       X, #ConfiguringAdaptor
   \   000007 8D ......    CALLF     CopyBufferDevice
    228            Device_Xmit_Char_Count = Device_Xmit_Char_Count;
   \   00000B C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00000E C7 ....      LD        L:Device_Xmit_Char_Count, A
    229            Start_Device_Xmit ();
   \   000011 8D ......    CALLF     Start_Device_Xmit
    230          }
   \   000015 87           RETF
    231          /*****************************************************************************/
    232          /*****        Send_powered_Message                                ****/
    233          /*****        1st byte in Device processed buffer is the character count  ****/
    234          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    235          void Send_ACK_Message(void){
    236            Initialize_Device_receiver_buffer();
   \                     Send_ACK_Message:
   \   000000 8D ......    CALLF     Initialize_Device_receiver_buffer
    237            CopyBufferDevice(ACKMessage);
   \   000004 AE ....      LDW       X, #ACKMessage
   \   000007 8D ......    CALLF     CopyBufferDevice
    238            Device_Xmit_Char_Count = Device_Xmit_Char_Count;
   \   00000B C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00000E C7 ....      LD        L:Device_Xmit_Char_Count, A
    239            Start_Device_Xmit ();
   \   000011 8D ......    CALLF     Start_Device_Xmit
    240          }
   \   000015 87           RETF
    241          /*****************************************************************************/
    242          /*****        Send_Resend_Message                                ****/
    243          /*****        1st byte in Device processed buffer is the character count  ****/
    244          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    245          void Send_Resend_Message(void){
    246            Initialize_Device_receiver_buffer();
   \                     Send_Resend_Message:
   \   000000 8D ......    CALLF     Initialize_Device_receiver_buffer
    247            CopyBufferDevice(ResendMessage);
   \   000004 AE ....      LDW       X, #ResendMessage
   \   000007 8D ......    CALLF     CopyBufferDevice
    248            Device_Xmit_Char_Count = Device_Xmit_Char_Count;
   \   00000B C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00000E C7 ....      LD        L:Device_Xmit_Char_Count, A
    249            Start_Device_Xmit ();
   \   000011 8D ......    CALLF     Start_Device_Xmit
    250          }
   \   000015 87           RETF
    251          /*****************************************************************************/
    252          /*****        Send_RequestMessage                                ****/
    253          /*****        1st byte in Device processed buffer is the character count  ****/
    254          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    255          void Send_Request_Message(void){
    256            Initialize_Device_receiver_buffer();
   \                     Send_Request_Message:
   \   000000 8D ......    CALLF     Initialize_Device_receiver_buffer
    257            CopyBufferDevice(RequestMessage);
   \   000004 AE ....      LDW       X, #RequestMessage
   \   000007 8D ......    CALLF     CopyBufferDevice
    258            /*CopyBufferDevice(NC_RequestMessage);*/
    259            /*CopyBufferDevice(ASCII_RequestMessage);*/
    260            
    261            Device_Xmit_Char_Count = Device_Xmit_Char_Count;
   \   00000B C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00000E C7 ....      LD        L:Device_Xmit_Char_Count, A
    262            Start_Device_Xmit ();
   \   000011 8D ......    CALLF     Start_Device_Xmit
    263          }
   \   000015 87           RETF
    264          /*****************************************************************************/
    265          /*****        Send_RequestMessage                                ****/
    266          /*****        1st byte in Device processed buffer is the character count  ****/
    267          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    268          void Send_Request1_Message(void){
    269            Initialize_Device_receiver_buffer();
   \                     Send_Request1_Message:
   \   000000 8D ......    CALLF     Initialize_Device_receiver_buffer
    270            CopyBufferDevice(Request1Message);
   \   000004 AE ....      LDW       X, #Request1Message
   \   000007 8D ......    CALLF     CopyBufferDevice
    271            /*CopyBufferDevice(NC_Request1Message);*/
    272            /*CopyBufferDevice(ASCII_Request1Message);*/
    273            Device_Xmit_Char_Count = Device_Xmit_Char_Count;
   \   00000B C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00000E C7 ....      LD        L:Device_Xmit_Char_Count, A
    274            Start_Device_Xmit ();
   \   000011 8D ......    CALLF     Start_Device_Xmit
    275          }
   \   000015 87           RETF
    276          /*****************************************************************************/
    277          /*****        Make_Send_SNAP_Ready_Message                                ****/
    278          /*****        1st byte in Device processed buffer is the character count  ****/
    279          /*****************************************************************************
    280          void Make_Send_SNAP_Ready_Message(void){
    281            FillBuffer (&Device_Xmit_Buffer,0x00, BFRSIZE);
    282            Device_Processing_Pointer = 0;
    283            Device_Processing_Pointer = Add_String_to_Buffer (&Device_Xmit_Buffer, Device_Processing_Pointer, &SNAPREADYHDR);
    284            Device_Processing_Pointer = Add_String_to_Buffer (&Device_Xmit_Buffer, Device_Processing_Pointer, &SNAPREADY);
    285            Device_Processing_Pointer = Add_String_to_Buffer (&Device_Xmit_Buffer, Device_Processing_Pointer, &SNAPREADYEND);
    286            Device_Xmit_Char_Count = CountChars(&Device_Xmit_Buffer);
    287            Start_Device_Xmit ();
    288          } */
    289          /*****************************************************************************/
    290          /*****        Assemble_and_Checksum_device_message                        ****/
    291          /*****        1st byte in Device processed buffer is the character count  ****/
    292          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    293          void Assemble_and_Checksum_device_message(void){
    294            /*Device_Processing_Pointer = InitializeDeviceBuffer (Device_Processing_Buffer, 0x00, BFRSIZE/2);
    295            Device_Processing_Pointer = Add_Char_to_Buffer (Device_Processing_Buffer, Device_Processing_Pointer, DEVICE_SOH);
    296            Device_Processing_Pointer = Add_Integer_to_Buffer (Device_Processing_Buffer, Device_Processing_Pointer, DEVICE_MSGLENGTH);
    297            Device_Processing_Pointer = Add_Char_to_Buffer (Device_Processing_Buffer, Device_Processing_Pointer, DEVICE_COMMAND);
    298            Device_Processing_Pointer = Add_String_to_Buffer (Device_Processing_Buffer, Device_Processing_Pointer, &DEVICE_PACKETDATA);
    299            Checksum_Device_Buffer(Device_Processing_Buffer);
    300            Device_Processing_Pointer = Add_Char_to_Buffer (Device_Processing_Buffer, Device_Processing_Pointer, DEVICE_CHECKSUM);
    301            Device_Processing_Pointer = Add_Char_to_Buffer (Device_Processing_Buffer, Device_Processing_Pointer, DEVICE_EOT);*/
    302            /*Process_Device_Message(&Device_Xmit_Buffer, &Device_Processing_Buffer);
    303            Start_Device_Xmit ();          save the start of the buffer*/
    304          }
   \                     Assemble_and_Checksum_device_message:
   \   000000 87           RETF
    305          /*****************************************************************************/
    306          /*****             Checksum_Device_Buffer                                 ****/
    307          /*****        1st byte in Device processed buffer is the character count  ****/
    308          /*****                                                                    ****/
    309          /*****  bytes from 1st after count to checksum byte are checksumed        ****/
    310          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    311          char Checksum_Device_Buffer(char bufr[]){
   \                     Checksum_Device_Buffer:
   \   000000 8D ......    CALLF     L:?push_w4
   \   000004 BF ..        LDW       S:?w3, X
    312            int cntr,gtchr;
    313            int checksum;
    314            checksum =0;
   \   000006 5F           CLRW      X
   \   000007 BF ..        LDW       S:?w4, X
    315            cntr = bufr[1];
   \   000009 BE ..        LDW       X, S:?w3
   \   00000B 5C           INCW      X
   \   00000C F6           LD        A, (X)
   \   00000D 5F           CLRW      X
   \   00000E 97           LD        XL, A
   \   00000F BF ..        LDW       S:?w2, X
    316            cntr = (cntr + bufr[2] * 256)+ 1;
   \   000011 BE ..        LDW       X, S:?w3
   \   000013 1C 0002      ADDW      X, #0x2
   \   000016 F6           LD        A, (X)
   \   000017 5F           CLRW      X
   \   000018 97           LD        XL, A
   \   000019 BF ..        LDW       S:?w1, X
   \   00001B AE 0100      LDW       X, #0x100
   \   00001E BF ..        LDW       S:?w0, X
   \   000020 BE ..        LDW       X, S:?w1
   \   000022 8D ......    CALLF     L:?mul16_x_x_w0
   \   000026 5C           INCW      X
   \   000027 72BB ....    ADDW      X, S:?w2
   \   00002B BF ..        LDW       S:?w2, X
    317            if (cntr < BFRSIZE){
   \   00002D BE ..        LDW       X, S:?w2
   \   00002F A3 00FF      CPW       X, #0xff
   \   000032 2E 26        JRSGE     L:??Checksum_Device_Buffer_0
    318            for (gtchr = 1; gtchr < cntr; gtchr++){
   \   000034 5F           CLRW      X
   \   000035 5C           INCW      X
   \   000036 9093         LDW       Y, X
   \                     ??Checksum_Device_Buffer_1:
   \   000038 90B3 ..      CPW       Y, S:?w2
   \   00003B 2E 14        JRSGE     L:??Checksum_Device_Buffer_2
    319                checksum += bufr[gtchr];  /*ADDIN THE BYTES OF THE PAYLOAD TO THE CHECKSUM*/
   \   00003D 93           LDW       X, Y
   \   00003E 72BB ....    ADDW      X, S:?w3
   \   000042 F6           LD        A, (X)
   \   000043 5F           CLRW      X
   \   000044 97           LD        XL, A
   \   000045 72BB ....    ADDW      X, S:?w4
   \   000049 BF ..        LDW       S:?w4, X
    320              }
   \   00004B 93           LDW       X, Y
   \   00004C 5C           INCW      X
   \   00004D 9093         LDW       Y, X
   \   00004F 20 E7        JRA       L:??Checksum_Device_Buffer_1
    321              checksum = (0xFF55 - checksum);  /*Cksum to send*/
   \                     ??Checksum_Device_Buffer_2:
   \   000051 AE FF55      LDW       X, #0xff55
   \   000054 72B0 ....    SUBW      X, S:?w4
   \   000058 BF ..        LDW       S:?w4, X
    322            }
    323            else {
    324               /* error code here*/
    325            }
    326          return checksum;
   \                     ??Checksum_Device_Buffer_0:
   \   00005A B6 ..        LD        A, S:?b9
   \   00005C AC ......    JPF       L:?epilogue_w4
    327          }       
    328          /*****************************************************************************/
    329          /*** returns the checksum to the calling routine */
    330          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    331          char Check_Checksum_Device_Buffer(){
    332            char checksum;
    333            char gtchr;
    334            
    335            int cntr;
    336            checksum = 0;
   \                     Check_Checksum_Device_Buffer:
   \   000000 4F           CLR       A
   \   000001 B7 ..        LD        S:?b5, A
    337            cntr = Device_Processing_Buffer[0];
   \   000003 C6 ....      LD        A, L:Device_Processing_Buffer
   \   000006 5F           CLRW      X
   \   000007 97           LD        XL, A
   \   000008 BF ..        LDW       S:?w1, X
    338            cntr = (cntr + Device_Processing_Buffer[1] * 256);  /* number of bytes to checksum */
   \   00000A C6 ....      LD        A, L:Device_Processing_Buffer + 1
   \   00000D 5F           CLRW      X
   \   00000E 97           LD        XL, A
   \   00000F 9093         LDW       Y, X
   \   000011 AE 0100      LDW       X, #0x100
   \   000014 BF ..        LDW       S:?w0, X
   \   000016 93           LDW       X, Y
   \   000017 8D ......    CALLF     L:?mul16_x_x_w0
   \   00001B 72BB ....    ADDW      X, S:?w1
   \   00001F BF ..        LDW       S:?w1, X
    339                                                /* after stx and to etx */
    340           if (cntr < BFRSIZE){
   \   000021 BE ..        LDW       X, S:?w1
   \   000023 A3 00FF      CPW       X, #0xff
   \   000026 2E 30        JRSGE     L:??Check_Checksum_Device_Buffer_0
    341            for (gtchr = 0; gtchr <= cntr; gtchr++){
   \   000028 4F           CLR       A
   \   000029 B7 ..        LD        S:?b4, A
   \                     ??Check_Checksum_Device_Buffer_1:
   \   00002B 5F           CLRW      X
   \   00002C 41           EXG       A, XL
   \   00002D B6 ..        LD        A, S:?b4
   \   00002F 41           EXG       A, XL
   \   000030 BF ..        LDW       S:?w0, X
   \   000032 BE ..        LDW       X, S:?w1
   \   000034 B3 ..        CPW       X, S:?w0
   \   000036 2F 14        JRSLT     L:??Check_Checksum_Device_Buffer_2
    342                checksum += Device_Processing_Buffer[gtchr];  /*ADDIN THE BYTES OF THE PAYLOAD TO THE CHECKSUM*/
   \   000038 5F           CLRW      X
   \   000039 41           EXG       A, XL
   \   00003A B6 ..        LD        A, S:?b4
   \   00003C 41           EXG       A, XL
   \   00003D D6 ....      LD        A, (L:Device_Processing_Buffer,X)
   \   000040 BB ..        ADD       A, S:?b5
   \   000042 B7 ..        LD        S:?b5, A
    343            }
   \   000044 B6 ..        LD        A, S:?b4
   \   000046 AB 01        ADD       A, #0x1
   \   000048 B7 ..        LD        S:?b4, A
   \   00004A 20 DF        JRA       L:??Check_Checksum_Device_Buffer_1
    344            //gtchr++;
    345            checksum += Device_Processing_Buffer[gtchr];
   \                     ??Check_Checksum_Device_Buffer_2:
   \   00004C 5F           CLRW      X
   \   00004D 41           EXG       A, XL
   \   00004E B6 ..        LD        A, S:?b4
   \   000050 41           EXG       A, XL
   \   000051 D6 ....      LD        A, (L:Device_Processing_Buffer,X)
   \   000054 BB ..        ADD       A, S:?b5
   \   000056 B7 ..        LD        S:?b5, A
    346           }
    347           Device_Processing_Buffer[gtchr] = 00; /*clear out checksum*/ 
   \                     ??Check_Checksum_Device_Buffer_0:
   \   000058 5F           CLRW      X
   \   000059 41           EXG       A, XL
   \   00005A B6 ..        LD        A, S:?b4
   \   00005C 41           EXG       A, XL
   \   00005D 4F           CLR       A
   \   00005E D7 ....      LD        (L:Device_Processing_Buffer,X), A
    348           gtchr++;
   \   000061 B6 ..        LD        A, S:?b4
   \   000063 AB 01        ADD       A, #0x1
   \   000065 B7 ..        LD        S:?b4, A
    349           Device_Processing_Buffer[gtchr] = 00; /*clear out etx*/ 
   \   000067 5F           CLRW      X
   \   000068 41           EXG       A, XL
   \   000069 B6 ..        LD        A, S:?b4
   \   00006B 41           EXG       A, XL
   \   00006C 4F           CLR       A
   \   00006D D7 ....      LD        (L:Device_Processing_Buffer,X), A
    350           return checksum;
   \   000070 B6 ..        LD        A, S:?b5
   \   000072 87           RETF
    351          }
    352          
    353          /*****************************************************************************/
    354          /*****             Process_Device_Message                                 ****/
    355          /*****        takes the buffer it's passed and inserts DLEs where necess. ****/
    356          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    357          void Process_Xmit_Device_Message(char bufr[], char bufr2[]){
   \                     Process_Xmit_Device_Message:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 BF ..        LDW       S:?w3, X
   \   000006 90BF ..      LDW       S:?w4, Y
    358          int bfrptr;
    359           u16 xmtptr;
    360           u8 i;
    361           for (bfrptr = 0; bfrptr <3; bfrptr++){      /* PUT SOH, PACKET COUNT INTO*/
   \   000009 5F           CLRW      X
   \   00000A 9093         LDW       Y, X
   \                     ??Process_Xmit_Device_Message_0:
   \   00000C 90A3 0003    CPW       Y, #0x3
   \   000010 2E 12        JRSGE     L:??Process_Xmit_Device_Message_1
    362            bufr2[bfrptr] = bufr[bfrptr];               /*XMIT BUFFER*/  
   \   000012 93           LDW       X, Y
   \   000013 72BB ....    ADDW      X, S:?w3
   \   000017 F6           LD        A, (X)
   \   000018 93           LDW       X, Y
   \   000019 72BB ....    ADDW      X, S:?w4
   \   00001D F7           LD        (X), A
    363           }
   \   00001E 93           LDW       X, Y
   \   00001F 5C           INCW      X
   \   000020 9093         LDW       Y, X
   \   000022 20 E8        JRA       L:??Process_Xmit_Device_Message_0
    364          xmtptr = bfrptr;
   \                     ??Process_Xmit_Device_Message_1:
   \   000024 90BF ..      LDW       S:?w1, Y
    365          cntr = bufr[1];
   \   000027 BE ..        LDW       X, S:?w3
   \   000029 5C           INCW      X
   \   00002A F6           LD        A, (X)
   \   00002B 5F           CLRW      X
   \   00002C 97           LD        XL, A
   \   00002D CF ....      LDW       L:cntr, X
    366          cntr = cntr + ((bufr[2] * 256)+3);
   \   000030 BE ..        LDW       X, S:?w3
   \   000032 1C 0002      ADDW      X, #0x2
   \   000035 F6           LD        A, (X)
   \   000036 5F           CLRW      X
   \   000037 97           LD        XL, A
   \   000038 BF ..        LDW       S:?w5, X
   \   00003A AE 0100      LDW       X, #0x100
   \   00003D BF ..        LDW       S:?w0, X
   \   00003F BE ..        LDW       X, S:?w5
   \   000041 8D ......    CALLF     L:?mul16_x_x_w0
   \   000045 1C 0003      ADDW      X, #0x3
   \   000048 72BB ....    ADDW      X, L:cntr
   \   00004C CF ....      LDW       L:cntr, X
    367          
    368          for (bfrptr = bfrptr; bfrptr <cntr; bfrptr++){
   \                     ??Process_Xmit_Device_Message_2:
   \   00004F 90C3 ....    CPW       Y, L:cntr
   \   000053 2E 5D        JRSGE     L:??Process_Xmit_Device_Message_3
    369            i = bufr[bfrptr];
   \   000055 93           LDW       X, Y
   \   000056 72BB ....    ADDW      X, S:?w3
   \   00005A F6           LD        A, (X)
   \   00005B B7 ..        LD        S:?b4, A
    370            if (bufr[bfrptr]== STX || bufr[bfrptr] == ETX || bufr[bfrptr] == DLE|| bufr[bfrptr] == ','){
   \   00005D 93           LDW       X, Y
   \   00005E 72BB ....    ADDW      X, S:?w3
   \   000062 F6           LD        A, (X)
   \   000063 A1 02        CP        A, #0x2
   \   000065 27 1E        JREQ      L:??Process_Xmit_Device_Message_4
   \   000067 93           LDW       X, Y
   \   000068 72BB ....    ADDW      X, S:?w3
   \   00006C F6           LD        A, (X)
   \   00006D A1 03        CP        A, #0x3
   \   00006F 27 14        JREQ      L:??Process_Xmit_Device_Message_4
   \   000071 93           LDW       X, Y
   \   000072 72BB ....    ADDW      X, S:?w3
   \   000076 F6           LD        A, (X)
   \   000077 A1 10        CP        A, #0x10
   \   000079 27 0A        JREQ      L:??Process_Xmit_Device_Message_4
   \   00007B 93           LDW       X, Y
   \   00007C 72BB ....    ADDW      X, S:?w3
   \   000080 F6           LD        A, (X)
   \   000081 A1 2C        CP        A, #0x2c
   \   000083 26 14        JRNE      L:??Process_Xmit_Device_Message_5
    371               i ^= 0xFF;
   \                     ??Process_Xmit_Device_Message_4:
   \   000085 B6 ..        LD        A, S:?b4
   \   000087 A8 FF        XOR       A, #0xff
   \   000089 B7 ..        LD        S:?b4, A
    372              bufr2[xmtptr] =  DLE;
   \   00008B BE ..        LDW       X, S:?w1
   \   00008D 72BB ....    ADDW      X, S:?w4
   \   000091 A6 10        LD        A, #0x10
   \   000093 F7           LD        (X), A
    373              xmtptr++;
   \   000094 BE ..        LDW       X, S:?w1
   \   000096 5C           INCW      X
   \   000097 BF ..        LDW       S:?w1, X
    374            }
    375            bufr2[xmtptr] =  i;
   \                     ??Process_Xmit_Device_Message_5:
   \   000099 BE ..        LDW       X, S:?w1
   \   00009B 72BB ....    ADDW      X, S:?w4
   \   00009F B6 ..        LD        A, S:?b4
   \   0000A1 F7           LD        (X), A
    376            Processing_Byte_Count = xmtptr;
   \   0000A2 B6 ..        LD        A, S:?b3
   \   0000A4 C7 ....      LD        L:Processing_Byte_Count, A
    377            xmtptr++;
   \   0000A7 BE ..        LDW       X, S:?w1
   \   0000A9 5C           INCW      X
   \   0000AA BF ..        LDW       S:?w1, X
    378           }
   \   0000AC 93           LDW       X, Y
   \   0000AD 5C           INCW      X
   \   0000AE 9093         LDW       Y, X
   \   0000B0 20 9D        JRA       L:??Process_Xmit_Device_Message_2
    379          bufr2[xmtptr] =  ETX;
   \                     ??Process_Xmit_Device_Message_3:
   \   0000B2 BE ..        LDW       X, S:?w1
   \   0000B4 72BB ....    ADDW      X, S:?w4
   \   0000B8 A6 03        LD        A, #0x3
   \   0000BA F7           LD        (X), A
    380          }
   \   0000BB AC ......    JPF       L:?epilogue_l2
    381          /*****************************************************************************/
    382          /*****************************************************************************/
    383          /*****  INITIALIZE RECEIVER BUFFER                                       *****/
    384          /*****************************************************************************/
    385          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    386          void Initialize_Device_receiver_buffer(void){
    387            FillBuffer (Device_Receiver_Buffer,0x00, BFRSIZE);
   \                     Initialize_Device_receiver_buffer:
   \   000000 90AE 00FF    LDW       Y, #0xff
   \   000004 4F           CLR       A
   \   000005 AE ....      LDW       X, #Device_Receiver_Buffer
   \   000008 8D ......    CALLF     FillBuffer
    388            Device_RX_InPtr=0;
   \   00000C 35 00 ....   MOV       L:Device_RX_InPtr, #0x0
    389            Device_RX_OutPtr=0;
   \   000010 35 00 ....   MOV       L:Device_RX_OutPtr, #0x0
    390          }
   \   000014 87           RETF
    391          /*****************************************************************************/
    392          /*****************************************************************************/
    393          /****                        ISR routines                                  ***/
    394          /*****************************************************************************/
    395          /*****************************************************************************/
    396          
    397          /*****************************************************************************/
    398          /*****        Get_Device_Char  - UART3 RCV INTERRUPT                      ****/
    399          /*****        1st byte in Device processed buffer is the character count  ****/
    400          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    401          void Get_Device_Char(void){
    402            (void)UART3->SR;
   \                     Get_Device_Char:
   \   000000 C6 5240      LD        A, L:0x5240
   \   000003 B7 ..        LD        S:?b0, A
    403            Device_Rcvr_char = ((u8)UART3->DR);
   \   000005 C6 5241      LD        A, L:0x5241
   \   000008 C7 ....      LD        L:Device_Rcvr_char, A
    404          
    405            Device_Receiver_Buffer[Device_RX_InPtr] = Device_Rcvr_char;
   \   00000B C6 ....      LD        A, L:Device_RX_InPtr
   \   00000E 5F           CLRW      X
   \   00000F 97           LD        XL, A
   \   000010 C6 ....      LD        A, L:Device_Rcvr_char
   \   000013 D7 ....      LD        (L:Device_Receiver_Buffer,X), A
    406            if (Device_Rcvr_char == 0x03){
   \   000016 C6 ....      LD        A, L:Device_Rcvr_char
   \   000019 A1 03        CP        A, #0x3
   \   00001B 26 0A        JRNE      L:??Get_Device_Char_0
    407               Device_Rcvr_EOM_Timer = 0;
   \   00001D 35 00 ....   MOV       L:Device_Rcvr_EOM_Timer, #0x0
    408               Device_Rcvr_Complete_flag = 1;
   \   000021 35 01 ....   MOV       L:Device_Rcvr_Complete_flag, #0x1
   \   000025 20 0C        JRA       L:??Get_Device_Char_1
    409            }
    410            else {
    411            Device_Rcvr_EOM_Timer = 150;
   \                     ??Get_Device_Char_0:
   \   000027 35 96 ....   MOV       L:Device_Rcvr_EOM_Timer, #0x96
    412            Device_RX_InPtr++;
   \   00002B C6 ....      LD        A, L:Device_RX_InPtr
   \   00002E AB 01        ADD       A, #0x1
   \   000030 C7 ....      LD        L:Device_RX_InPtr, A
    413          }
    414          }
   \                     ??Get_Device_Char_1:
   \   000033 87           RETF
    415          
    416          /*****************************************************************************/
    417          /*****************************************************************************/
    418          /*****        Device Receive message handlers                            *****/
    419          /*****************************************************************************/
    420          /*****************************************************************************/
    421          
    422          /*****************************************************************************/
    423          /*****             Process_Receiver_Device_Message                        ****/
    424          /*****   takes the buffer it's passed and unescapes where necess.         ****/
    425          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    426          void Process_Receiver_Device_Message(void){
    427           u16 rcvrbfrptr;
    428           u16 prcsbufrptr;
    429           u8 i;
    430          prcsbufrptr =0;
   \                     Process_Receiver_Device_Message:
   \   000000 5F           CLRW      X
   \   000001 BF ..        LDW       S:?w0, X
    431          for (rcvrbfrptr = 1; rcvrbfrptr <BFRSIZE; rcvrbfrptr++){
   \   000003 5F           CLRW      X
   \   000004 5C           INCW      X
   \   000005 9093         LDW       Y, X
   \                     ??Process_Receiver_Device_Message_0:
   \   000007 90A3 00FF    CPW       Y, #0xff
   \   00000B 24 44        JRNC      L:??Process_Receiver_Device_Message_1
    432            i = Device_Receiver_Buffer[rcvrbfrptr];
   \   00000D 93           LDW       X, Y
   \   00000E D6 ....      LD        A, (L:Device_Receiver_Buffer,X)
   \   000011 B7 ..        LD        S:?b2, A
    433            if (i == 0x03) {
   \   000013 B6 ..        LD        A, S:?b2
   \   000015 A1 03        CP        A, #0x3
   \   000017 26 09        JRNE      L:??Process_Receiver_Device_Message_2
    434              Device_Processing_Buffer[prcsbufrptr] =  i;
   \   000019 B6 ..        LD        A, S:?b2
   \   00001B BE ..        LDW       X, S:?w0
   \   00001D D7 ....      LD        (L:Device_Processing_Buffer,X), A
    435              break;
   \   000020 20 2F        JRA       L:??Process_Receiver_Device_Message_1
    436              }
    437            if (Device_Receiver_Buffer[rcvrbfrptr] == 0x10){
   \                     ??Process_Receiver_Device_Message_2:
   \   000022 A6 10        LD        A, #0x10
   \   000024 93           LDW       X, Y
   \   000025 D1 ....      CP        A, (L:Device_Receiver_Buffer,X)
   \   000028 26 10        JRNE      L:??Process_Receiver_Device_Message_3
    438              rcvrbfrptr++;
   \   00002A 93           LDW       X, Y
   \   00002B 5C           INCW      X
   \   00002C 9093         LDW       Y, X
    439              i = Device_Receiver_Buffer[rcvrbfrptr];
   \   00002E 93           LDW       X, Y
   \   00002F D6 ....      LD        A, (L:Device_Receiver_Buffer,X)
   \   000032 B7 ..        LD        S:?b2, A
    440               i ^= 0xFF;
   \   000034 B6 ..        LD        A, S:?b2
   \   000036 A8 FF        XOR       A, #0xff
   \   000038 B7 ..        LD        S:?b2, A
    441            }
    442            Device_Processing_Buffer[prcsbufrptr] =  i;
   \                     ??Process_Receiver_Device_Message_3:
   \   00003A B6 ..        LD        A, S:?b2
   \   00003C BE ..        LDW       X, S:?w0
   \   00003E D7 ....      LD        (L:Device_Processing_Buffer,X), A
    443            Processing_Byte_Count = prcsbufrptr;
   \   000041 B6 ..        LD        A, S:?b1
   \   000043 C7 ....      LD        L:Processing_Byte_Count, A
    444            prcsbufrptr++;
   \   000046 BE ..        LDW       X, S:?w0
   \   000048 5C           INCW      X
   \   000049 BF ..        LDW       S:?w0, X
    445           }
   \   00004B 93           LDW       X, Y
   \   00004C 5C           INCW      X
   \   00004D 9093         LDW       Y, X
   \   00004F 20 B6        JRA       L:??Process_Receiver_Device_Message_0
    446          }
   \                     ??Process_Receiver_Device_Message_1:
   \   000051 87           RETF
    447          /*****************************************************************************/
    448          /*****************************************************************************/
    449          /*****        Device xmit message handlers                               *****/
    450          /*****************************************************************************/
    451          /*****************************************************************************/
    452          
    453          /*****************************************************************************/
    454          /*****        start Device xmit                                           ****/
    455          /*****        calling routine MUST:                                       ****/
    456          /*****           Device_Xmit_Pointer = Address of buffer to be sent       ****/
    457          /*****           Device_Xmit_Char_Count = number of characters to send    ****/
    458          /*****                                                                    ****/
    459          /*****      puts 1st character in the data reg. and enables xmit and int  ****/
    460          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    461          void Start_Device_Xmit (void){
    462            Device_Xmit_Pointer = 0;
   \                     Start_Device_Xmit:
   \   000000 35 00 ....   MOV       L:Device_Xmit_Pointer, #0x0
    463            Device_Xmit_Char = Device_Xmit_Buffer[Device_Xmit_Pointer];
   \   000004 C6 ....      LD        A, L:Device_Xmit_Pointer
   \   000007 5F           CLRW      X
   \   000008 97           LD        XL, A
   \   000009 D6 ....      LD        A, (L:Device_Xmit_Buffer,X)
   \   00000C C7 ....      LD        L:Device_Xmit_Char, A
    464            Device_Xmit_Pointer++;
   \   00000F C6 ....      LD        A, L:Device_Xmit_Pointer
   \   000012 AB 01        ADD       A, #0x1
   \   000014 C7 ....      LD        L:Device_Xmit_Pointer, A
    465            Device_Xmit_Char_Count--;
   \   000017 C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   00001A AB FF        ADD       A, #0xff
   \   00001C C7 ....      LD        L:Device_Xmit_Char_Count, A
    466            Device_Xmit_Complete_Flag =1;
   \   00001F 35 01 ....   MOV       L:Device_Xmit_Complete_Flag, #0x1
    467            UART3->DR = Device_Xmit_Char;
   \   000023 C6 ....      LD        A, L:Device_Xmit_Char
   \   000026 C7 5241      LD        L:0x5241, A
    468            UART3->CR2 |= (uint8_t)UART3_CR2_TCIEN | UART3_CR2_TIEN;
   \   000029 C6 5245      LD        A, L:0x5245
   \   00002C AA C0        OR        A, #0xc0
   \   00002E C7 5245      LD        L:0x5245, A
    469            while (Device_Xmit_Complete_Flag == 1)
   \                     ??Start_Device_Xmit_0:
   \   000031 C6 ....      LD        A, L:Device_Xmit_Complete_Flag
   \   000034 A1 01        CP        A, #0x1
   \   000036 27 F9        JREQ      L:??Start_Device_Xmit_0
    470            {};
    471          }
   \   000038 87           RETF
    472          /*****************************************************************************/
    473          /*****        Device xmit - UART3 XMIT INTERRUPT HANDLER                  *****/
    474          /*****        sends characters till the count expires, on the next int.   ****/
    475          /*****             turnf off the txmit enable, once TXE is low            ****/
    476          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    477          void Send_Next_Char_to_Device(void){
    478            if (UART3->SR & UART3_FLAG_TXE){
   \                     Send_Next_Char_to_Device:
   \   000000 720F 5240 49 BTJF      L:0x5240, #0x7, L:??Send_Next_Char_to_Device_0
    479              if (Device_Xmit_Char_Count != 0){
   \   000005 C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   000008 A1 00        CP        A, #0x0
   \   00000A 27 36        JREQ      L:??Send_Next_Char_to_Device_1
    480                Device_Xmit_Char = Device_Xmit_Buffer[Device_Xmit_Pointer];
   \   00000C C6 ....      LD        A, L:Device_Xmit_Pointer
   \   00000F 5F           CLRW      X
   \   000010 97           LD        XL, A
   \   000011 D6 ....      LD        A, (L:Device_Xmit_Buffer,X)
   \   000014 C7 ....      LD        L:Device_Xmit_Char, A
    481                if (Device_Xmit_Char == 0x03){
   \   000017 C6 ....      LD        A, L:Device_Xmit_Char
   \   00001A A1 03        CP        A, #0x3
   \   00001C 26 0C        JRNE      L:??Send_Next_Char_to_Device_2
    482                  Device_Xmit_Char_Count = 0;
   \   00001E 35 00 ....   MOV       L:Device_Xmit_Char_Count, #0x0
    483                  UART3->DR = Device_Xmit_Char;
   \   000022 C6 ....      LD        A, L:Device_Xmit_Char
   \   000025 C7 5241      LD        L:0x5241, A
   \   000028 20 24        JRA       L:??Send_Next_Char_to_Device_0
    484                  }
    485                  else{
    486                    Device_Xmit_Pointer++;
   \                     ??Send_Next_Char_to_Device_2:
   \   00002A C6 ....      LD        A, L:Device_Xmit_Pointer
   \   00002D AB 01        ADD       A, #0x1
   \   00002F C7 ....      LD        L:Device_Xmit_Pointer, A
    487                    Device_Xmit_Char_Count--;
   \   000032 C6 ....      LD        A, L:Device_Xmit_Char_Count
   \   000035 AB FF        ADD       A, #0xff
   \   000037 C7 ....      LD        L:Device_Xmit_Char_Count, A
    488                    UART3->DR = Device_Xmit_Char;
   \   00003A C6 ....      LD        A, L:Device_Xmit_Char
   \   00003D C7 5241      LD        L:0x5241, A
   \   000040 20 0C        JRA       L:??Send_Next_Char_to_Device_0
    489                    }
    490              }
    491              else {
    492                UART3->CR2 &= (uint8_t)(~(UART3_CR2_TIEN | UART3_CR2_TCIEN ));  
   \                     ??Send_Next_Char_to_Device_1:
   \   000042 C6 5245      LD        A, L:0x5245
   \   000045 A4 3F        AND       A, #0x3f
   \   000047 C7 5245      LD        L:0x5245, A
    493                Device_Xmit_Complete_Flag = 0;
   \   00004A 35 00 ....   MOV       L:Device_Xmit_Complete_Flag, #0x0
    494              }
    495            }
    496          }
   \                     ??Send_Next_Char_to_Device_0:
   \   00004E 87           RETF
    497          /*****************************************************************************/
    498          /*****        Device Initialize/DeInit                                   *****/
    499          /*****************************************************************************/
    500          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    501          void InitDeviceUART(void)
    502          {
    503            UART3_Init(9600, UART3_WORDLENGTH_8D, 
    504                           UART3_STOPBITS_1,  UART3_PARITY_NO, 
    505                           UART3_MODE_TXRX_ENABLE);
   \                     InitDeviceUART:
   \   000000 35 0C ....   MOV       S:?b6, #0xc
   \   000004 3F ..        CLR       S:?b5
   \   000006 3F ..        CLR       S:?b4
   \   000008 4F           CLR       A
   \   000009 AE 2580      LDW       X, #0x2580
   \   00000C BF ..        LDW       S:?w1, X
   \   00000E 5F           CLRW      X
   \   00000F BF ..        LDW       S:?w0, X
   \   000011 8D ......    CALLF     UART3_Init
    506            UART3->CR2 |= 0x20;  /*UART3 RX INTERRUPT ENABLE*/
   \   000015 721A 5245    BSET      L:0x5245, #0x5
    507            Device_Rcvr_Complete_flag = 0;
   \   000019 35 00 ....   MOV       L:Device_Rcvr_Complete_flag, #0x0
    508          }
   \   00001D 87           RETF
    509          
    510          /*****************************************************************************/
    511          /*****                          UART3_DeInit                              ****/
    512          /***** Clear the Idle Line Detected bit in the status rerister by a read  ****/
    513          /***** to the UART3_SR register followed by a Read to the UART3_DR register **/
    514          /*****************************************************************************/

   \                                 In section .far_func.text, align 1
    515          void UART3_DeInit(void)
    516          {
    517              /* Clear the Idle Line Detected bit in the status rerister by a read
    518                 to the UART3_SR register followed by a Read to the UART3_DR register */
    519              (void) UART3->SR;
   \                     UART3_DeInit:
   \   000000 C6 5240      LD        A, L:0x5240
   \   000003 B7 ..        LD        S:?b0, A
    520              (void) UART3->DR;
   \   000005 C6 5241      LD        A, L:0x5241
    521          
    522              UART3->BRR2 = UART3_BRR2_RESET_VALUE; /*Set UART3_BRR2 to reset value 0x00 */
   \   000008 35 00 5243   MOV       L:0x5243, #0x0
    523              UART3->BRR1 = UART3_BRR1_RESET_VALUE; /*Set UART3_BRR1 to reset value 0x00 */
   \   00000C 35 00 5242   MOV       L:0x5242, #0x0
    524          
    525              UART3->CR1 = UART3_CR1_RESET_VALUE;  /*Set UART3_CR1 to reset value 0x00  */
   \   000010 35 00 5244   MOV       L:0x5244, #0x0
    526              UART3->CR2 = UART3_CR2_RESET_VALUE;  /*Set UART3_CR2 to reset value 0x00  */
   \   000014 35 00 5245   MOV       L:0x5245, #0x0
    527              UART3->CR3 = UART3_CR3_RESET_VALUE;  /*Set UART3_CR3 to reset value 0x00  */
   \   000018 35 00 5246   MOV       L:0x5246, #0x0
    528              UART3->CR4 = UART3_CR4_RESET_VALUE;  /*Set UART3_CR4 to reset value 0x00  */
   \   00001C 35 00 5247   MOV       L:0x5247, #0x0
    529              UART3->CR6 = UART3_CR6_RESET_VALUE;  /*Set UART3_CR6 to reset value 0x00  */
   \   000020 35 00 5249   MOV       L:0x5249, #0x0
    530          
    531          }
   \   000024 87           RETF
    532          
    533          /*****************************************************************************/
    534          /*****                          UART3_Init                                ****/
    535          /*****************************************************************************/
    536          /**
    537            * @brief  Initializes the UART3 according to the specified parameters.
    538            * @param  BaudRate: The baudrate.
    539            * @param  WordLength : This parameter can be any of 
    540            *         the @ref UART3_WordLength_TypeDef enumeration.
    541            * @param  StopBits: This parameter can be any of the 
    542            *         @ref UART3_StopBits_TypeDef enumeration.
    543            * @param  Parity: This parameter can be any of the 
    544            *         @ref UART3_Parity_TypeDef enumeration.
    545            * @param  Mode: This parameter can be any of the @ref UART3_Mode_TypeDef values
    546            * @retval None
    547            */

   \                                 In section .far_func.text, align 1
    548          void UART3_Init(uint32_t BaudRate, UART3_WordLength_TypeDef WordLength, 
    549                          UART3_StopBits_TypeDef StopBits, UART3_Parity_TypeDef Parity, 
    550                          UART3_Mode_TypeDef Mode)
    551          {
   \                     UART3_Init:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_l3
   \   000008 88           PUSH      A
   \   000009 3B ....      PUSH      S:?b4
   \   00000C 3B ....      PUSH      S:?b5
   \   00000F 3B ....      PUSH      S:?b6
   \   000012 52 07        SUB       SP, #0x7
   \   000014 8D ......    CALLF     L:?mov_l2_l0
    552              uint8_t BRR2_1 = 0, BRR2_2 = 0;
   \   000018 4F           CLR       A
   \   000019 6B 02        LD        (0x2,SP), A
   \   00001B 4F           CLR       A
   \   00001C 6B 01        LD        (0x1,SP), A
    553              uint32_t BaudRate_Mantissa = 0, BaudRate_Mantissa100 = 0;
   \   00001E 5F           CLRW      X
   \   00001F BF ..        LDW       S:?w7, X
   \   000021 BF ..        LDW       S:?w6, X
   \   000023 AE 0000      LDW       X, #0x0
   \   000026 1F 04        LDW       (0x4,SP), X
   \   000028 AE 0000      LDW       X, #0x0
   \   00002B 1F 06        LDW       (0x6,SP), X
    554          
    555                  /* Check the parameters */
    556              assert_param(IS_UART3_WORDLENGTH_OK(WordLength));
   \   00002D 0D 0B        TNZ       (0xb,SP)
   \   00002F 27 15        JREQ      L:??UART3_Init_0
   \   000031 7B 0B        LD        A, (0xb,SP)
   \   000033 A1 10        CP        A, #0x10
   \   000035 27 0F        JREQ      L:??UART3_Init_0
   \   000037 AE 022C      LDW       X, #0x22c
   \   00003A BF ..        LDW       S:?w1, X
   \   00003C 5F           CLRW      X
   \   00003D BF ..        LDW       S:?w0, X
   \   00003F AE ....      LDW       X, #`?<Constant "C:\\\\Users\\\\jurban\\\\Docum...">`
   \   000042 8D ......    CALLF     assert_failed
    557              assert_param(IS_UART3_STOPBITS_OK(StopBits));
   \                     ??UART3_Init_0:
   \   000046 0D 0A        TNZ       (0xa,SP)
   \   000048 27 15        JREQ      L:??UART3_Init_1
   \   00004A 7B 0A        LD        A, (0xa,SP)
   \   00004C A1 20        CP        A, #0x20
   \   00004E 27 0F        JREQ      L:??UART3_Init_1
   \   000050 AE 022D      LDW       X, #0x22d
   \   000053 BF ..        LDW       S:?w1, X
   \   000055 5F           CLRW      X
   \   000056 BF ..        LDW       S:?w0, X
   \   000058 AE ....      LDW       X, #`?<Constant "C:\\\\Users\\\\jurban\\\\Docum...">`
   \   00005B 8D ......    CALLF     assert_failed
    558              assert_param(IS_UART3_PARITY_OK(Parity));
   \                     ??UART3_Init_1:
   \   00005F 0D 09        TNZ       (0x9,SP)
   \   000061 27 1B        JREQ      L:??UART3_Init_2
   \   000063 7B 09        LD        A, (0x9,SP)
   \   000065 A1 04        CP        A, #0x4
   \   000067 27 15        JREQ      L:??UART3_Init_2
   \   000069 7B 09        LD        A, (0x9,SP)
   \   00006B A1 06        CP        A, #0x6
   \   00006D 27 0F        JREQ      L:??UART3_Init_2
   \   00006F AE 022E      LDW       X, #0x22e
   \   000072 BF ..        LDW       S:?w1, X
   \   000074 5F           CLRW      X
   \   000075 BF ..        LDW       S:?w0, X
   \   000077 AE ....      LDW       X, #`?<Constant "C:\\\\Users\\\\jurban\\\\Docum...">`
   \   00007A 8D ......    CALLF     assert_failed
    559              assert_param(IS_UART3_BAUDRATE_OK(BaudRate));
   \                     ??UART3_Init_2:
   \   00007E BE ..        LDW       X, S:?w4
   \   000080 A3 0009      CPW       X, #0x9
   \   000083 26 05        JRNE      L:??UART3_Init_3
   \   000085 BE ..        LDW       X, S:?w5
   \   000087 A3 8969      CPW       X, #0x8969
   \                     ??UART3_Init_3:
   \   00008A 25 0F        JRC       L:??UART3_Init_4
   \   00008C AE 022F      LDW       X, #0x22f
   \   00008F BF ..        LDW       S:?w1, X
   \   000091 5F           CLRW      X
   \   000092 BF ..        LDW       S:?w0, X
   \   000094 AE ....      LDW       X, #`?<Constant "C:\\\\Users\\\\jurban\\\\Docum...">`
   \   000097 8D ......    CALLF     assert_failed
    560              assert_param(IS_UART3_MODE_OK((uint8_t)Mode));
   \                     ??UART3_Init_4:
   \   00009B 7B 08        LD        A, (0x8,SP)
   \   00009D A1 08        CP        A, #0x8
   \   00009F 27 3F        JREQ      L:??UART3_Init_5
   \   0000A1 7B 08        LD        A, (0x8,SP)
   \   0000A3 A1 40        CP        A, #0x40
   \   0000A5 27 39        JREQ      L:??UART3_Init_5
   \   0000A7 7B 08        LD        A, (0x8,SP)
   \   0000A9 A1 04        CP        A, #0x4
   \   0000AB 27 33        JREQ      L:??UART3_Init_5
   \   0000AD 7B 08        LD        A, (0x8,SP)
   \   0000AF A1 80        CP        A, #0x80
   \   0000B1 27 2D        JREQ      L:??UART3_Init_5
   \   0000B3 7B 08        LD        A, (0x8,SP)
   \   0000B5 A1 0C        CP        A, #0xc
   \   0000B7 27 27        JREQ      L:??UART3_Init_5
   \   0000B9 7B 08        LD        A, (0x8,SP)
   \   0000BB A1 0C        CP        A, #0xc
   \   0000BD 27 21        JREQ      L:??UART3_Init_5
   \   0000BF 7B 08        LD        A, (0x8,SP)
   \   0000C1 A1 44        CP        A, #0x44
   \   0000C3 27 1B        JREQ      L:??UART3_Init_5
   \   0000C5 7B 08        LD        A, (0x8,SP)
   \   0000C7 A1 C0        CP        A, #0xc0
   \   0000C9 27 15        JREQ      L:??UART3_Init_5
   \   0000CB 7B 08        LD        A, (0x8,SP)
   \   0000CD A1 88        CP        A, #0x88
   \   0000CF 27 0F        JREQ      L:??UART3_Init_5
   \   0000D1 AE 0230      LDW       X, #0x230
   \   0000D4 BF ..        LDW       S:?w1, X
   \   0000D6 5F           CLRW      X
   \   0000D7 BF ..        LDW       S:?w0, X
   \   0000D9 AE ....      LDW       X, #`?<Constant "C:\\\\Users\\\\jurban\\\\Docum...">`
   \   0000DC 8D ......    CALLF     assert_failed
    561          
    562              /* Clear the word length bit */
    563              UART3->CR1 &= (uint8_t)(~UART3_CR1_M);     
   \                     ??UART3_Init_5:
   \   0000E0 7219 5244    BRES      L:0x5244, #0x4
    564              /* Set the word length bit according to UART3_WordLength value */
    565              UART3->CR1 |= (uint8_t)WordLength; 
   \   0000E4 7B 0B        LD        A, (0xb,SP)
   \   0000E6 CA 5244      OR        A, L:0x5244
   \   0000E9 C7 5244      LD        L:0x5244, A
    566          
    567              /* Clear the STOP bits */
    568              UART3->CR3 &= (uint8_t)(~UART3_CR3_STOP);  
   \   0000EC C6 5246      LD        A, L:0x5246
   \   0000EF A4 CF        AND       A, #0xcf
   \   0000F1 C7 5246      LD        L:0x5246, A
    569              /* Set the STOP bits number according to UART3_StopBits value  */
    570              UART3->CR3 |= (uint8_t)StopBits;  
   \   0000F4 7B 0A        LD        A, (0xa,SP)
   \   0000F6 CA 5246      OR        A, L:0x5246
   \   0000F9 C7 5246      LD        L:0x5246, A
    571          
    572              /* Clear the Parity Control bit */
    573              UART3->CR1 &= (uint8_t)(~(UART3_CR1_PCEN | UART3_CR1_PS));  
   \   0000FC C6 5244      LD        A, L:0x5244
   \   0000FF A4 F9        AND       A, #0xf9
   \   000101 C7 5244      LD        L:0x5244, A
    574              /* Set the Parity Control bit to UART3_Parity value */
    575              UART3->CR1 |= (uint8_t)Parity;     
   \   000104 7B 09        LD        A, (0x9,SP)
   \   000106 CA 5244      OR        A, L:0x5244
   \   000109 C7 5244      LD        L:0x5244, A
    576          
    577              /* Clear the LSB mantissa of UART3DIV  */
    578              UART3->BRR1 &= (uint8_t)(~UART3_BRR1_DIVM);  
   \   00010C C6 5242      LD        A, L:0x5242
   \   00010F 6B 03        LD        (0x3,SP), A
   \   000111 35 00 5242   MOV       L:0x5242, #0x0
    579              /* Clear the MSB mantissa of UART3DIV  */
    580              UART3->BRR2 &= (uint8_t)(~UART3_BRR2_DIVM);  
   \   000115 C6 5243      LD        A, L:0x5243
   \   000118 A4 0F        AND       A, #0xf
   \   00011A C7 5243      LD        L:0x5243, A
    581              /* Clear the Fraction bits of UART3DIV */
    582              UART3->BRR2 &= (uint8_t)(~UART3_BRR2_DIVF);  
   \   00011D C6 5243      LD        A, L:0x5243
   \   000120 A4 F0        AND       A, #0xf0
   \   000122 C7 5243      LD        L:0x5243, A
    583          
    584              /* Set the UART3 BaudRates in BRR1 and BRR2 registers according to UART3_BaudRate value */
    585              BaudRate_Mantissa    = ((uint32_t)CLK_GetClockFreq() / (BaudRate << 4));
   \   000125 8D ......    CALLF     L:?mov_l0_l2
   \   000129 A6 04        LD        A, #0x4
   \   00012B 8D ......    CALLF     L:?sll32_l0_l0_a
   \   00012F 8D ......    CALLF     L:?push_l0
   \   000133 8D ......    CALLF     CLK_GetClockFreq
   \   000137 8D ......    CALLF     L:?pop_l1
   \   00013B 8D ......    CALLF     L:?udiv32_l0_l0_l1
   \   00013F 8D ......    CALLF     L:?mov_l3_l0
    586              BaudRate_Mantissa100 = (((uint32_t)CLK_GetClockFreq() * 100) / (BaudRate << 4));
   \   000143 8D ......    CALLF     L:?mov_l0_l2
   \   000147 A6 04        LD        A, #0x4
   \   000149 8D ......    CALLF     L:?sll32_l0_l0_a
   \   00014D 8D ......    CALLF     L:?push_l0
   \   000151 8D ......    CALLF     CLK_GetClockFreq
   \   000155 8D ......    CALLF     L:?mov_l1_l0
   \   000159 AE 0064      LDW       X, #0x64
   \   00015C BF ..        LDW       S:?w1, X
   \   00015E 5F           CLRW      X
   \   00015F BF ..        LDW       S:?w0, X
   \   000161 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   000165 8D ......    CALLF     L:?pop_l1
   \   000169 8D ......    CALLF     L:?udiv32_l0_l0_l1
   \   00016D AE 0004      LDW       X, #0x4
   \   000170 8D ......    CALLF     L:?load32_xsp_l0
    587              /* The fraction and MSB mantissa should be loaded in one step in the BRR2 register */
    588              /* Set the fraction of UART3DIV  */
    589              BRR2_1 = (uint8_t)((uint8_t)(((BaudRate_Mantissa100 - (BaudRate_Mantissa * 100))
    590                                  << 4) / 100) & (uint8_t)0x0F); 
   \   000174 AE 0064      LDW       X, #0x64
   \   000177 BF ..        LDW       S:?w3, X
   \   000179 5F           CLRW      X
   \   00017A BF ..        LDW       S:?w2, X
   \   00017C 8D ......    CALLF     L:?mov_l0_l3
   \   000180 8D ......    CALLF     L:?mul32_l0_l0_l1
   \   000184 8D ......    CALLF     L:?mov_l1_l0
   \   000188 8D ......    CALLF     L:?load32_l0_dbsp
   \   00018C 04           DC8       0x4
   \   00018D 8D ......    CALLF     L:?sub32_l0_l0_l1
   \   000191 A6 04        LD        A, #0x4
   \   000193 8D ......    CALLF     L:?sll32_l0_l0_a
   \   000197 8D ......    CALLF     L:?udiv32_l0_l0_dl
   \   00019B 00000064     DC32      0x64
   \   00019F B6 ..        LD        A, S:?b3
   \   0001A1 A4 0F        AND       A, #0xf
   \   0001A3 6B 02        LD        (0x2,SP), A
    591              BRR2_2 = (uint8_t)((BaudRate_Mantissa >> 4) & (uint8_t)0xF0);
   \   0001A5 BE ..        LDW       X, S:?w7
   \   0001A7 54           SRLW      X
   \   0001A8 54           SRLW      X
   \   0001A9 54           SRLW      X
   \   0001AA 54           SRLW      X
   \   0001AB 9F           LD        A, XL
   \   0001AC A4 F0        AND       A, #0xf0
   \   0001AE 6B 01        LD        (0x1,SP), A
    592          
    593              UART3->BRR2 = (uint8_t)(BRR2_1 | BRR2_2);
   \   0001B0 7B 01        LD        A, (0x1,SP)
   \   0001B2 1A 02        OR        A, (0x2,SP)
   \   0001B4 C7 5243      LD        L:0x5243, A
    594              /* Set the LSB mantissa of UART3DIV  */
    595              UART3->BRR1 = (uint8_t)BaudRate_Mantissa;           
   \   0001B7 B6 ..        LD        A, S:?b15
   \   0001B9 C7 5242      LD        L:0x5242, A
    596          
    597              if ((uint8_t)(Mode & UART3_MODE_TX_ENABLE))
   \   0001BC 7B 08        LD        A, (0x8,SP)
   \   0001BE A4 04        AND       A, #0x4
   \   0001C0 A1 00        CP        A, #0x0
   \   0001C2 27 06        JREQ      L:??UART3_Init_6
    598              {
    599                  /* Set the Transmitter Enable bit */
    600                  UART3->CR2 |= UART3_CR2_TEN;  
   \   0001C4 7216 5245    BSET      L:0x5245, #0x3
   \   0001C8 20 04        JRA       L:??UART3_Init_7
    601              }
    602              else
    603              {
    604                  /* Clear the Transmitter Disable bit */
    605                  UART3->CR2 &= (uint8_t)(~UART3_CR2_TEN);  
   \                     ??UART3_Init_6:
   \   0001CA 7217 5245    BRES      L:0x5245, #0x3
    606              }
    607              if ((uint8_t)(Mode & UART3_MODE_RX_ENABLE))
   \                     ??UART3_Init_7:
   \   0001CE 7B 08        LD        A, (0x8,SP)
   \   0001D0 A4 08        AND       A, #0x8
   \   0001D2 A1 00        CP        A, #0x0
   \   0001D4 27 06        JREQ      L:??UART3_Init_8
    608              {
    609                  /* Set the Receiver Enable bit */
    610                  UART3->CR2 |= UART3_CR2_REN;  
   \   0001D6 7214 5245    BSET      L:0x5245, #0x2
   \   0001DA 20 04        JRA       L:??UART3_Init_9
    611              }
    612              else
    613              {
    614                  /* Clear the Receiver Disable bit */
    615                  UART3->CR2 &= (uint8_t)(~UART3_CR2_REN);  
   \                     ??UART3_Init_8:
   \   0001DC 7215 5245    BRES      L:0x5245, #0x2
    616              }
    617          }
   \                     ??UART3_Init_9:
   \   0001E0 5B 0B        ADD       SP, #0xb
   \   0001E2 AC ......    JPF       L:?epilogue_l2_l3

   \                                 In section .near.rodata, align 1
   \                     `?<Constant "C:\\\\Users\\\\jurban\\\\Docum...">`:
   \   000000 43 3A 5C 55  DC8 43H, 3AH, 5CH, 55H, 73H, 65H, 72H, 73H
   \          73 65 72 73 
   \   000008 5C 6A 75 72  DC8 5CH, 6AH, 75H, 72H, 62H, 61H, 6EH, 5CH
   \          62 61 6E 5C 
   \   000010 44 6F 63 75  DC8 44H, 6FH, 63H, 75H, 6DH, 65H, 6EH, 74H
   \          6D 65 6E 74 
   \   000018 73 5C 47 69  DC8 73H, 5CH, 47H, 69H, 74H, 48H, 75H, 62H
   \          74 48 75 62 
   \   000020 5C 37 38 39  DC8 5CH, 37H, 38H, 39H, 36H, 5FH, 53H, 4EH
   \          36 5F 53 4E 
   \   000028 41 50 5F 31  DC8 41H, 50H, 5FH, 31H, 30H, 30H, 5CH, 44H
   \          30 30 5C 44 
   \   000030 65 76 69 63  DC8 65H, 76H, 69H, 63H, 65H, 5FH, 53H, 65H
   \          65 5F 53 65 
   \   000038 72 69 61 6C  DC8 72H, 69H, 61H, 6CH, 5FH, 48H, 61H, 6EH
   \          5F 48 61 6E 
   \   000040 64 6C 65 72  DC8 64H, 6CH, 65H, 72H, 73H, 2EH, 63H, 0
   \          73 2E 63 00 
    618          /******************* (C) COPYRIGHT 2013 MARS INTERNATIONAL *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      72  ?<Constant "C:\\Users\\jurban\\Docum...">
       1  Assemble_and_Checksum_device_message
     115  Check_Checksum_Device_Buffer
      32  Check_Device_Input
      96  Checksum_Device_Buffer
      34  Convert_Update_Parameters
      52  Get_Device_Char
      30  InitDeviceUART
      21  Initialize_Device_receiver_buffer
      49  Process_Received_Update
      82  Process_Receiver_Device_Message
     191  Process_Xmit_Device_Message
      22  Send_ACK_Message
      22  Send_AdaptorReady_Message
      22  Send_ConfiguringAdaptor_Message
      79  Send_Next_Char_to_Device
      25  Send_Powered
      22  Send_Request1_Message
      22  Send_Request_Message
      22  Send_Resend_Message
      22  Send_powered_Message
      57  Start_Device_Xmit
      37  UART3_DeInit
     486  UART3_Init
      25  Wait_For_Update

 
 1 566 bytes in section .far_func.text
    72 bytes in section .near.rodata
 
 1 566 bytes of CODE  memory
    72 bytes of CONST memory

Errors: none
Warnings: none
