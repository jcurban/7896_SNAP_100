###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             02/Jul/2013  07:39:06 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Parameter #
#                    BlockHandlers.c                                          #
#    Command line =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Parameter #
#                    BlockHandlers.c -e --enable_multibytes -On --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o C:\Users\jurban\Documents\GitHub\ #
#                    7896_SNAP_100\Debug\Obj\ --dlib_config "C:\Program       #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8S007 -lC                #
#                    C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\ -I .\ --no_system_include --require_prototypes        #
#                    --vregs 16                                               #
#    List file    =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\ParameterBlockHandlers.lst                             #
#    Object file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Obj #
#                    \ParameterBlockHandlers.o                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\jurban\Documents\GitHub\7896_SNAP_100\ParameterBlockHandlers.c
      1          /**
      2            ******************************************************************************
      3           ********************************************************************************
      4            * @file    Parameter Block Handlers.c
      5            * @author  JUrban
      6            * @version V1.0
      7            * @date    12-June-2013
      8            * @brief   This file contains all the functions for handling 
      9                          the parameter blocks.
     10            ******************************************************************************
     11            ******************************************************************************
     12            */
     13          /* local Routine prototypes */
     14          void Save_PValues(void);
     15          void get_Serial_Number(void);
     16          void get_Device_type(void);
     17          void SaveParameterInBlock(char PNumb, char *PBfr);
     18          /* external routine prototypes */
     19          extern void CopyBufferCounted (char *dest, char *srce, int cntr);
     20          void CopyBufferCounted (char *dest, char *srce, int cntr);
     21          extern void FillBuffer (char *bufr,char filchr, int cntr);
     22          /* external data */
     23          extern int PPointer;
     24          extern char PNumber;
     25          extern int PCount;
     26          extern char PBuffer;
     27          extern char Device_Serial_number;
     28          extern char Device_Type_Number;
     29          extern char Packet_Data_Buffer;
     30          extern char Device_Receiver_Buffer;
     31          extern int Device_Rcvr_Char_Count;
     32          /*
     33          ******************************************************************************
     34          ****
     35          ****    Save_PValues
     36          ****
     37          **** finds the serial number, uses it to determine class, save the parameters
     38          ****            into the proper block, in the correct format.
     39          ****
     40          ******************************************************************************
     41          */

   \                                 In section .far_func.text, align 1
     42          void Save_PValues(void){
   \                     Save_PValues:
   \   000000 8D ......    CALLF     L:?push_l2
   \   000004 8D ......    CALLF     L:?push_w6
     43          char *PSrceIndx;
     44          char *PDestIndx;
     45          int PCount;
     46              CopyBufferCounted (&Packet_Data_Buffer, &Device_Receiver_Buffer + 4, Device_Rcvr_Char_Count - 6);
   \   000008 CE ....      LDW       X, L:Device_Rcvr_Char_Count
   \   00000B 1C FFFA      ADDW      X, #0xfffffffffffffffa
   \   00000E BF ..        LDW       S:?w0, X
   \   000010 90AE ....    LDW       Y, #Device_Receiver_Buffer + 4
   \   000014 AE ....      LDW       X, #Packet_Data_Buffer
   \   000017 8D ......    CALLF     CopyBufferCounted
     47              PNumber = 0;
   \   00001B 35 00 ....   MOV       L:PNumber, #0x0
     48              PSrceIndx = 0;
   \   00001F 5F           CLRW      X
   \   000020 BF ..        LDW       S:?w5, X
     49              PCount = Device_Rcvr_Char_Count - 6;
   \   000022 CE ....      LDW       X, L:Device_Rcvr_Char_Count
   \   000025 1C FFFA      ADDW      X, #0xfffffffffffffffa
   \   000028 BF ..        LDW       S:?w6, X
     50              get_Serial_Number();
   \   00002A 8D ......    CALLF     get_Serial_Number
     51              get_Device_type();
   \   00002E 8D ......    CALLF     get_Device_type
     52              while ((int)PSrceIndx <= PCount){  /* do this till pointer at end of buf*/
   \                     ??Save_PValues_0:
   \   000032 BE ..        LDW       X, S:?w6
   \   000034 B3 ..        CPW       X, S:?w5
   \   000036 2F 4D        JRSLT     L:??Save_PValues_1
     53                FillBuffer (&PBuffer, 0x00, 16);
   \   000038 90AE 0010    LDW       Y, #0x10
   \   00003C 4F           CLR       A
   \   00003D AE ....      LDW       X, #PBuffer
   \   000040 8D ......    CALLF     FillBuffer
     54                PDestIndx = 0;
   \   000044 5F           CLRW      X
   \   000045 BF ..        LDW       S:?w4, X
     55                while (Packet_Data_Buffer[PSrceIndx] != ',') { /* copy till ','*/
   \                     ??Save_PValues_2:
   \   000047 C6 ....      LD        A, L:Packet_Data_Buffer
   \   00004A 5F           CLRW      X
   \   00004B 97           LD        XL, A
   \   00004C 72BB ....    ADDW      X, S:?w5
   \   000050 F6           LD        A, (X)
   \   000051 A1 2C        CP        A, #0x2c
   \   000053 27 24        JREQ      L:??Save_PValues_3
     56                  PBuffer[PDestIndx++] = Packet_Data_Buffer[PSrceIndx++];
   \   000055 C6 ....      LD        A, L:Packet_Data_Buffer
   \   000058 5F           CLRW      X
   \   000059 97           LD        XL, A
   \   00005A 72BB ....    ADDW      X, S:?w5
   \   00005E F6           LD        A, (X)
   \   00005F B7 ..        LD        S:?b0, A
   \   000061 C6 ....      LD        A, L:PBuffer
   \   000064 5F           CLRW      X
   \   000065 97           LD        XL, A
   \   000066 72BB ....    ADDW      X, S:?w4
   \   00006A B6 ..        LD        A, S:?b0
   \   00006C F7           LD        (X), A
   \   00006D BE ..        LDW       X, S:?w5
   \   00006F 5C           INCW      X
   \   000070 BF ..        LDW       S:?w5, X
   \   000072 BE ..        LDW       X, S:?w4
   \   000074 5C           INCW      X
   \   000075 BF ..        LDW       S:?w4, X
   \   000077 20 CE        JRA       L:??Save_PValues_2
     57                }
     58                SaveParameterInBlock(PNumber, &PBuffer);
   \                     ??Save_PValues_3:
   \   000079 AE ....      LDW       X, #PBuffer
   \   00007C C6 ....      LD        A, L:PNumber
   \   00007F 8D ......    CALLF     SaveParameterInBlock
   \   000083 20 AD        JRA       L:??Save_PValues_0
     59              }
     60          }
   \                     ??Save_PValues_1:
   \   000085 AC ......    JPF       L:?epilogue_l2_w6
     61          
     62          /*
     63          ******************************************************************************
     64          ****
     65          ****    get_Serial_Number
     66          ****
     67          **** finds the serial number, uses it to determine class, save the parameters
     68          ****            into the proper block, in the correct format.
     69          ****
     70          ******************************************************************************\
     71          */

   \                                 In section .far_func.text, align 1
     72          void get_Serial_Number(){
     73            CopyBufferCounted (&Device_Serial_number, &Packet_Data_Buffer, 16);
   \                     get_Serial_Number:
   \   000000 AE 0010      LDW       X, #0x10
   \   000003 BF ..        LDW       S:?w0, X
   \   000005 90AE ....    LDW       Y, #Packet_Data_Buffer
   \   000009 AE ....      LDW       X, #Device_Serial_number
   \   00000C 8D ......    CALLF     CopyBufferCounted
     74          }
   \   000010 87           RETF
     75          /*
     76          ******************************************************************************
     77          ****
     78          ****    get_Device_Class_Number
     79          ****
     80          **** finds the serial number, uses it to determine class, save the parameters
     81          ****            into the proper block, in the correct format.
     82          ****
     83          ******************************************************************************\
     84          */

   \                                 In section .far_func.text, align 1
     85          void get_Device_type(){
     86            CopyBufferCounted (&Device_Type_Number, &Device_Serial_number, 6);
   \                     get_Device_type:
   \   000000 AE 0006      LDW       X, #0x6
   \   000003 BF ..        LDW       S:?w0, X
   \   000005 90AE ....    LDW       Y, #Device_Serial_number
   \   000009 AE ....      LDW       X, #Device_Type_Number
   \   00000C 8D ......    CALLF     CopyBufferCounted
     87          }
   \   000010 87           RETF
     88          /******************************************************************************
     89          ****
     90          ****    Save_PValues
     91          ****
     92          **** finds the serial number, uses it to determine class, save the parameters
     93          ****            into the proper block, in the correct format.
     94          ****
     95          ******************************************************************************
     96          */

   \                                 In section .far_func.text, align 1
     97          void SaveParameterInBlock(char PNumb, char *PBfr){
     98          }
   \                     SaveParameterInBlock:
   \   000000 87           RETF

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  SaveParameterInBlock
     137  Save_PValues
      17  get_Device_type
      17  get_Serial_Number

 
 172 bytes in section .far_func.text
 
 172 bytes of CODE memory

Errors: none
Warnings: none
