###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             03/Jul/2013  08:31:01 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Parameter #
#                    BlockHandlers.c                                          #
#    Command line =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Parameter #
#                    BlockHandlers.c -e --enable_multibytes -On --no_cse      #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_cross_call --debug --code_model medium              #
#                    --data_model medium -o C:\Users\jurban\Documents\GitHub\ #
#                    7896_SNAP_100\Debug\Obj\ --dlib_config "C:\Program       #
#                    Files\IAR Systems\Embedded Workbench                     #
#                    6.5\stm8\LIB\dlstm8mmn.h" -D STM8S007 -lC                #
#                    C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\ -I .\ --no_system_include --require_prototypes        #
#                    --vregs 16                                               #
#    List file    =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Lis #
#                    t\ParameterBlockHandlers.lst                             #
#    Object file  =  C:\Users\jurban\Documents\GitHub\7896_SNAP_100\Debug\Obj #
#                    \ParameterBlockHandlers.o                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\jurban\Documents\GitHub\7896_SNAP_100\ParameterBlockHandlers.c
      1          /**
      2            ******************************************************************************
      3           ********************************************************************************
      4            * @file    Parameter Block Handlers.c
      5            * @author  JUrban
      6            * @version V1.0
      7            * @date    12-June-2013
      8            * @brief   This file contains all the functions for handling 
      9                          the parameter blocks.
     10            ******************************************************************************
     11            ******************************************************************************
     12            */
     13          #include "SNAP_Defines.h"
     14          /* external routines*/
     15          extern void FillBuffer (char bufr[],char filchr, int cntr);
     16          extern void Int2ASCII(void);
     17          /* local Routine prototypes */
     18          void Make_Website_Update_from_Processing_Buffer(void);
     19          void makePNumberHeader(char numb);
     20          void convertPNumber_to_ASCII(char numb);
     21          void copyPHeaderToWebsite(void);
     22          void Copy_ASCII_data_to_Website(void);
     23          void clear_tempblock(void);
     24          /* conversion routines/data*/
     25          extern char PNumber;
     26          extern int PCount;
     27          extern int ProcessPtr;
     28          extern int Packet_Data_Pointer;
     29          extern char B2ASCBuf[];
     30          extern char tempblock[];
     31          extern char PHeaderBuffer[];
     32          extern char Packet_Data_Buffer[];
     33          extern char Device_Processing_Buffer[];
     34          
     35          /*******************************************************************************
     36          *****        Make_Website_Update_from_Processing_Buffer                     ****
     37          *****   taskes the raw device data, and converts to ASCII for website       ****
     38          *****  makes a pnumber header in the following format:                      ****
     39          *****     /P1/... /P15/ then converts binary if necessary                   ****
     40          ***** this creates a buffer with ONLY parameter data, no other headers are  ****
     41          *****   included. ex. /P1/0000010123456789/P2/700/P3/800/P4/900.....        ****
     42          ***** the "httpsend = bwgroup.." is a stock block when ready to send the    ****
     43          ***** httpsend block is copied to the xmit buffer, then the parameters are added
     44          *****                                                                       ****
     45          *****  all data going into the Packet_Data_Buffer uses Website_Param_Pointer
     46          *****  to put it into the buffer
     47          *******************************************************************************/

   \                                 In section .far_func.text, align 1
     48          void Make_Website_Update_from_Processing_Buffer(void){
   \                     Make_Website_Update_from_Processing_Buffer:
   \   000000 3B ....      PUSH      S:?b8
     49          char i;
     50          PNumber = 1;
   \   000003 35 01 ....   MOV       L:PNumber, #0x1
     51          Packet_Data_Pointer = 0;
   \   000007 5F           CLRW      X
   \   000008 CF ....      LDW       L:Packet_Data_Pointer, X
     52          for (ProcessPtr =3; ProcessPtr <BFRSIZE;ProcessPtr++){
   \   00000B AE 0003      LDW       X, #0x3
   \   00000E CF ....      LDW       L:ProcessPtr, X
   \                     ??Make_Website_Update_from_Processing_Buffer_0:
   \   000011 CE ....      LDW       X, L:ProcessPtr
   \   000014 A3 00FF      CPW       X, #0xff
   \   000017 2F 03        JRSLT     ??lb_0
   \   000019 CC ....      JP        L:??Make_Website_Update_from_Processing_Buffer_1
     53            makePNumberHeader(PNumber); /* make /Pxx/ header for data*/
   \                     ??lb_0:
   \   00001C C6 ....      LD        A, L:PNumber
   \   00001F 8D ......    CALLF     makePNumberHeader
     54            if (Device_Processing_Buffer[ProcessPtr] == 'A'){
   \   000023 CE ....      LDW       X, L:ProcessPtr
   \   000026 A6 41        LD        A, #0x41
   \   000028 D1 ....      CP        A, (L:Device_Processing_Buffer,X)
   \   00002B 26 45        JRNE      L:??Make_Website_Update_from_Processing_Buffer_2
     55               copyPHeaderToWebsite();
   \   00002D 8D ......    CALLF     copyPHeaderToWebsite
     56               ProcessPtr++;
   \   000031 CE ....      LDW       X, L:ProcessPtr
   \   000034 5C           INCW      X
   \   000035 CF ....      LDW       L:ProcessPtr, X
     57              for (ProcessPtr=ProcessPtr ; ProcessPtr<BFRSIZE;ProcessPtr++){
   \   000038 CE ....      LDW       X, L:ProcessPtr
   \   00003B CF ....      LDW       L:ProcessPtr, X
   \                     ??Make_Website_Update_from_Processing_Buffer_3:
   \   00003E CE ....      LDW       X, L:ProcessPtr
   \   000041 A3 00FF      CPW       X, #0xff
   \   000044 2F 03        JRSLT     ??lb_1
   \   000046 CC ....      JP        L:??Make_Website_Update_from_Processing_Buffer_4
     58                  if (Device_Processing_Buffer[ProcessPtr] == ',') break;
   \                     ??lb_1:
   \   000049 CE ....      LDW       X, L:ProcessPtr
   \   00004C A6 2C        LD        A, #0x2c
   \   00004E D1 ....      CP        A, (L:Device_Processing_Buffer,X)
   \   000051 26 03        JRNE      L:??Make_Website_Update_from_Processing_Buffer_5
   \   000053 CC ....      JP        L:??Make_Website_Update_from_Processing_Buffer_4
     59                Packet_Data_Buffer[Packet_Data_Pointer] = Device_Processing_Buffer[ProcessPtr];
   \                     ??Make_Website_Update_from_Processing_Buffer_5:
   \   000056 CE ....      LDW       X, L:ProcessPtr
   \   000059 D6 ....      LD        A, (L:Device_Processing_Buffer,X)
   \   00005C CE ....      LDW       X, L:Packet_Data_Pointer
   \   00005F D7 ....      LD        (L:Packet_Data_Buffer,X), A
     60                Packet_Data_Pointer++;
   \   000062 CE ....      LDW       X, L:Packet_Data_Pointer
   \   000065 5C           INCW      X
   \   000066 CF ....      LDW       L:Packet_Data_Pointer, X
     61              }
   \   000069 CE ....      LDW       X, L:ProcessPtr
   \   00006C 5C           INCW      X
   \   00006D CF ....      LDW       L:ProcessPtr, X
   \   000070 20 CC        JRA       L:??Make_Website_Update_from_Processing_Buffer_3
     62            }
     63            else if (Device_Processing_Buffer[ProcessPtr] == 'B'){
   \                     ??Make_Website_Update_from_Processing_Buffer_2:
   \   000072 CE ....      LDW       X, L:ProcessPtr
   \   000075 A6 42        LD        A, #0x42
   \   000077 D1 ....      CP        A, (L:Device_Processing_Buffer,X)
   \   00007A 26 63        JRNE      L:??Make_Website_Update_from_Processing_Buffer_6
     64              clear_tempblock();
   \   00007C 8D ......    CALLF     clear_tempblock
     65              copyPHeaderToWebsite();
   \   000080 8D ......    CALLF     copyPHeaderToWebsite
     66              ProcessPtr++;
   \   000084 CE ....      LDW       X, L:ProcessPtr
   \   000087 5C           INCW      X
   \   000088 CF ....      LDW       L:ProcessPtr, X
     67              i = 0;
   \   00008B 4F           CLR       A
   \   00008C B7 ..        LD        S:?b8, A
     68              while (Device_Processing_Buffer[ProcessPtr]!= ',') {
   \                     ??Make_Website_Update_from_Processing_Buffer_7:
   \   00008E CE ....      LDW       X, L:ProcessPtr
   \   000091 A6 2C        LD        A, #0x2c
   \   000093 D1 ....      CP        A, (L:Device_Processing_Buffer,X)
   \   000096 27 1D        JREQ      L:??Make_Website_Update_from_Processing_Buffer_8
     69                tempblock[i] = Device_Processing_Buffer[ProcessPtr];
   \   000098 CE ....      LDW       X, L:ProcessPtr
   \   00009B D6 ....      LD        A, (L:Device_Processing_Buffer,X)
   \   00009E 5F           CLRW      X
   \   00009F 41           EXG       A, XL
   \   0000A0 B6 ..        LD        A, S:?b8
   \   0000A2 41           EXG       A, XL
   \   0000A3 D7 ....      LD        (L:tempblock,X), A
     70                i++;
   \   0000A6 B6 ..        LD        A, S:?b8
   \   0000A8 AB 01        ADD       A, #0x1
   \   0000AA B7 ..        LD        S:?b8, A
     71                ProcessPtr++;
   \   0000AC CE ....      LDW       X, L:ProcessPtr
   \   0000AF 5C           INCW      X
   \   0000B0 CF ....      LDW       L:ProcessPtr, X
   \   0000B3 20 D9        JRA       L:??Make_Website_Update_from_Processing_Buffer_7
     72              }
     73                Int2ASCII();
   \                     ??Make_Website_Update_from_Processing_Buffer_8:
   \   0000B5 8D ......    CALLF     Int2ASCII
     74              for (i=0;i<=7;i++){
   \   0000B9 4F           CLR       A
   \   0000BA B7 ..        LD        S:?b8, A
   \                     ??Make_Website_Update_from_Processing_Buffer_9:
   \   0000BC B6 ..        LD        A, S:?b8
   \   0000BE A1 08        CP        A, #0x8
   \   0000C0 24 28        JRNC      L:??Make_Website_Update_from_Processing_Buffer_4
     75                 Packet_Data_Buffer[Packet_Data_Pointer] = B2ASCBuf[i];
   \   0000C2 5F           CLRW      X
   \   0000C3 41           EXG       A, XL
   \   0000C4 B6 ..        LD        A, S:?b8
   \   0000C6 41           EXG       A, XL
   \   0000C7 D6 ....      LD        A, (L:B2ASCBuf,X)
   \   0000CA CE ....      LDW       X, L:Packet_Data_Pointer
   \   0000CD D7 ....      LD        (L:Packet_Data_Buffer,X), A
     76                 Packet_Data_Pointer++;
   \   0000D0 CE ....      LDW       X, L:Packet_Data_Pointer
   \   0000D3 5C           INCW      X
   \   0000D4 CF ....      LDW       L:Packet_Data_Pointer, X
     77                }
   \   0000D7 B6 ..        LD        A, S:?b8
   \   0000D9 AB 01        ADD       A, #0x1
   \   0000DB B7 ..        LD        S:?b8, A
   \   0000DD 20 DD        JRA       L:??Make_Website_Update_from_Processing_Buffer_9
     78              }
     79              else if (Device_Processing_Buffer[ProcessPtr] == 0x00){
   \                     ??Make_Website_Update_from_Processing_Buffer_6:
   \   0000DF CE ....      LDW       X, L:ProcessPtr
   \   0000E2 724D ....    TNZ       (L:Device_Processing_Buffer,X)
   \   0000E6 26 02        JRNE      L:??Make_Website_Update_from_Processing_Buffer_4
     80                break;
   \   0000E8 20 0A        JRA       L:??Make_Website_Update_from_Processing_Buffer_1
     81              }
     82                
     83            } 
   \                     ??Make_Website_Update_from_Processing_Buffer_4:
   \   0000EA CE ....      LDW       X, L:ProcessPtr
   \   0000ED 5C           INCW      X
   \   0000EE CF ....      LDW       L:ProcessPtr, X
   \   0000F1 CC ....      JP        L:??Make_Website_Update_from_Processing_Buffer_0
     84          }
   \                     ??Make_Website_Update_from_Processing_Buffer_1:
   \   0000F4 32 ....      POP       S:?b8
   \   0000F7 87           RETF

   \                                 In section .far_func.text, align 1
     85          void clear_tempblock(void){
     86           char i;
     87           for (i=0; i <= 4; i++)
   \                     clear_tempblock:
   \   000000 4F           CLR       A
   \   000001 B7 ..        LD        S:?b0, A
   \                     ??clear_tempblock_0:
   \   000003 B6 ..        LD        A, S:?b0
   \   000005 A1 05        CP        A, #0x5
   \   000007 24 11        JRNC      L:??clear_tempblock_1
     88             tempblock[i]=0x00;
   \   000009 5F           CLRW      X
   \   00000A 41           EXG       A, XL
   \   00000B B6 ..        LD        A, S:?b0
   \   00000D 41           EXG       A, XL
   \   00000E 4F           CLR       A
   \   00000F D7 ....      LD        (L:tempblock,X), A
   \   000012 B6 ..        LD        A, S:?b0
   \   000014 AB 01        ADD       A, #0x1
   \   000016 B7 ..        LD        S:?b0, A
   \   000018 20 E9        JRA       L:??clear_tempblock_0
     89          }
   \                     ??clear_tempblock_1:
   \   00001A 87           RETF

   \                                 In section .far_func.text, align 1
     90          void copyPHeaderToWebsite(void){
     91          char pntr=0;
   \                     copyPHeaderToWebsite:
   \   000000 3F ..        CLR       S:?b0
     92          while (PHeaderBuffer[pntr] != 0x00){
   \                     ??copyPHeaderToWebsite_0:
   \   000002 5F           CLRW      X
   \   000003 41           EXG       A, XL
   \   000004 B6 ..        LD        A, S:?b0
   \   000006 41           EXG       A, XL
   \   000007 724D ....    TNZ       (L:PHeaderBuffer,X)
   \   00000B 27 1D        JREQ      L:??copyPHeaderToWebsite_1
     93            Packet_Data_Buffer[Packet_Data_Pointer] = PHeaderBuffer[pntr];
   \   00000D 5F           CLRW      X
   \   00000E 41           EXG       A, XL
   \   00000F B6 ..        LD        A, S:?b0
   \   000011 41           EXG       A, XL
   \   000012 D6 ....      LD        A, (L:PHeaderBuffer,X)
   \   000015 CE ....      LDW       X, L:Packet_Data_Pointer
   \   000018 D7 ....      LD        (L:Packet_Data_Buffer,X), A
     94            Packet_Data_Pointer++;
   \   00001B CE ....      LDW       X, L:Packet_Data_Pointer
   \   00001E 5C           INCW      X
   \   00001F CF ....      LDW       L:Packet_Data_Pointer, X
     95            pntr++;
   \   000022 B6 ..        LD        A, S:?b0
   \   000024 AB 01        ADD       A, #0x1
   \   000026 B7 ..        LD        S:?b0, A
   \   000028 20 D8        JRA       L:??copyPHeaderToWebsite_0
     96          }
     97           
     98          }
   \                     ??copyPHeaderToWebsite_1:
   \   00002A 87           RETF

   \                                 In section .far_func.text, align 1
     99          void Copy_ASCII_data_to_Website(void){
    100          }
   \                     Copy_ASCII_data_to_Website:
   \   000000 87           RETF
    101          /*****************************************************************************
    102           *****             makePNumberHeader                                      ****
    103           ****************************************************************************/

   \                                 In section .far_func.text, align 1
    104          void makePNumberHeader(char numb){
   \                     makePNumberHeader:
   \   000000 3B ....      PUSH      S:?b8
   \   000003 B7 ..        LD        S:?b8, A
    105            FillBuffer(PHeaderBuffer,0x00, 6);
   \   000005 90AE 0006    LDW       Y, #0x6
   \   000009 4F           CLR       A
   \   00000A AE ....      LDW       X, #PHeaderBuffer
   \   00000D 8D ......    CALLF     FillBuffer
    106            clear_tempblock();
   \   000011 8D ......    CALLF     clear_tempblock
    107            tempblock[0] = numb;
   \   000015 B6 ..        LD        A, S:?b8
   \   000017 C7 ....      LD        L:tempblock, A
    108            Int2ASCII();
   \   00001A 8D ......    CALLF     Int2ASCII
    109            PHeaderBuffer[0] = '/';
   \   00001E 35 2F ....   MOV       L:PHeaderBuffer, #0x2f
    110            PHeaderBuffer[1] = 'P';
   \   000022 35 50 ....   MOV       L:PHeaderBuffer + 1, #0x50
    111              if (B2ASCBuf[6]!= '0'){
   \   000026 C6 ....      LD        A, L:B2ASCBuf + 6
   \   000029 A1 30        CP        A, #0x30
   \   00002B 27 12        JREQ      L:??makePNumberHeader_0
    112                PHeaderBuffer[2] = B2ASCBuf[6];
   \   00002D C6 ....      LD        A, L:B2ASCBuf + 6
   \   000030 C7 ....      LD        L:PHeaderBuffer + 2, A
    113                PHeaderBuffer[3] = B2ASCBuf[7];
   \   000033 C6 ....      LD        A, L:B2ASCBuf + 7
   \   000036 C7 ....      LD        L:PHeaderBuffer + 3, A
    114                PHeaderBuffer[4] = '/';
   \   000039 35 2F ....   MOV       L:PHeaderBuffer + 4, #0x2f
   \   00003D 20 0A        JRA       L:??makePNumberHeader_1
    115               }
    116               else{
    117                PHeaderBuffer[2] = B2ASCBuf[7];
   \                     ??makePNumberHeader_0:
   \   00003F C6 ....      LD        A, L:B2ASCBuf + 7
   \   000042 C7 ....      LD        L:PHeaderBuffer + 2, A
    118                PHeaderBuffer[3] = '/';
   \   000045 35 2F ....   MOV       L:PHeaderBuffer + 3, #0x2f
    119               }
    120                PNumber++;
   \                     ??makePNumberHeader_1:
   \   000049 C6 ....      LD        A, L:PNumber
   \   00004C AB 01        ADD       A, #0x1
   \   00004E C7 ....      LD        L:PNumber, A
    121          }
   \   000051 32 ....      POP       S:?b8
   \   000054 87           RETF

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  Copy_ASCII_data_to_Website
     248  Make_Website_Update_from_Processing_Buffer
      27  clear_tempblock
      43  copyPHeaderToWebsite
      85  makePNumberHeader

 
 404 bytes in section .far_func.text
 
 404 bytes of CODE memory

Errors: none
Warnings: none
