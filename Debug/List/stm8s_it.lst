###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             27/Jun/2013  14:55:14 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\SNAP_101\stm8s_it.c                                   #
#    Command line =  C:\SNAP_101\stm8s_it.c -e --enable_multibytes -On        #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_cross_call --debug --code_model medium    #
#                    --data_model medium -o C:\SNAP_101\Debug\Obj\            #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.5\stm8\LIB\dlstm8mmn.h" -D STM8S007 -lC      #
#                    C:\SNAP_101\Debug\List\ -I .\ --no_system_include        #
#                    --require_prototypes --vregs 16                          #
#    List file    =  C:\SNAP_101\Debug\List\stm8s_it.lst                      #
#    Object file  =  C:\SNAP_101\Debug\Obj\stm8s_it.o                         #
#                                                                             #
#                                                                             #
###############################################################################

C:\SNAP_101\stm8s_it.c
      1          /**
      2            ******************************************************************************
      3            * @file     stm8s_it.c
      4            * @author   MCD Application Team
      5            * @version  V2.1.0
      6            * @date     18-November-2011
      7            * @brief    Main Interrupt Service Routines.
      8            *           This file provides template for all peripherals interrupt service
      9            *           routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     14            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     15            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     16            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     17            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     18            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     19            * FOR MORE INFORMATION PLEASE READ CAREFULLY THE LICENSE AGREEMENT FILE LOCATED 
     20            * IN THE ROOT DIRECTORY OF THIS FIRMWARE PACKAGE.
     21          	*
     22            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     23            ******************************************************************************
     24            */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "stm8s_it.h"
     28          
     29          /** @addtogroup Template_Project
     30            * @{
     31            */
     32          void Get_Device_Char (void);
     33          void Send_Next_Char_to_Device(void);
     34          void GS1011_Received_Data_Handler(void);
     35          void Sending_GS1011_Data_Handler(void);
     36          /* Private typedef -----------------------------------------------------------*/
     37          /* Private define ------------------------------------------------------------*/
     38          /* Private macro -------------------------------------------------------------*/
     39          /* Private variables ---------------------------------------------------------*/

   \                                 In section .near.bss, align 1
     40          u16 EEWRTimout;
   \                     EEWRTimout:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     41          u16 StartupTimer;
   \                     StartupTimer:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     42          u16 SetCmdTempTimer1;
   \                     SetCmdTempTimer1:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     43          u16 SetCmdTempTimer2;
   \                     SetCmdTempTimer2:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     44          u16 SetCmdExitTimer;
   \                     SetCmdExitTimer:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     45          u16 SysOnOffTmr;
   \                     SysOnOffTmr:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     46          u16 LoopControlDelay;
   \                     LoopControlDelay:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     47          u16 FCTimer;
   \                     FCTimer:
   \   000000              DS8 2

   \                                 In section .near.bss, align 1
     48          u16 SysSSTimer;
   \                     SysSSTimer:
   \   000000              DS8 2
     49          
     50          /* Private function prototypes -----------------------------------------------*/
     51          /* Private functions ---------------------------------------------------------*/
     52          /* Public functions ----------------------------------------------------------*/
     53          
     54          #ifdef _COSMIC_
     55          /**
     56            * @brief Dummy Interrupt routine
     57            * @par Parameters:
     58            * None
     59            * @retval
     60            * None
     61          */
     62          INTERRUPT_HANDLER(NonHandledInterrupt, 25)
     63          {
     64            /* In order to detect unexpected events during development,
     65               it is recommended to set a breakpoint on the following instruction.
     66            */
     67          }
     68          #endif /*_COSMIC_*/
     69          
     70          /**
     71            * @brief TRAP Interrupt routine
     72            * @param  None
     73            * @retval None
     74            */

   \                                 In section .far_func.text, align 1
     75          INTERRUPT_HANDLER_TRAP(TRAP_IRQHandler)
     76          {
     77            /* In order to detect unexpected events during development,
     78               it is recommended to set a breakpoint on the following instruction.
     79            */
     80          }
   \                     TRAP_IRQHandler:
   \                     _interrupt_1:
   \   000000 80           IRET
     81          
     82          /**
     83            * @brief Top Level Interrupt routine.
     84            * @param  None
     85            * @retval None
     86            */

   \                                 In section .far_func.text, align 1
     87          INTERRUPT_HANDLER(TLI_IRQHandler, 0)
     88          
     89          {
     90            /* In order to detect unexpected events during development,
     91               it is recommended to set a breakpoint on the following instruction.
     92            */
     93          }
   \                     TLI_IRQHandler:
   \                     _interrupt_2:
   \   000000 80           IRET
     94          
     95          /**
     96            * @brief Auto Wake Up Interrupt routine.
     97            * @param  None
     98            * @retval None
     99            */

   \                                 In section .far_func.text, align 1
    100          INTERRUPT_HANDLER(AWU_IRQHandler, 1)
    101          {
    102            /* In order to detect unexpected events during development,
    103               it is recommended to set a breakpoint on the following instruction.
    104            */
    105          }
   \                     AWU_IRQHandler:
   \                     _interrupt_3:
   \   000000 80           IRET
    106          
    107          /**
    108            * @brief Clock Controller Interrupt routine.
    109            * @param  None
    110            * @retval None
    111            */

   \                                 In section .far_func.text, align 1
    112          INTERRUPT_HANDLER(CLK_IRQHandler, 2)
    113          {
    114            /* In order to detect unexpected events during development,
    115               it is recommended to set a breakpoint on the following instruction.
    116            */
    117          }
   \                     CLK_IRQHandler:
   \                     _interrupt_4:
   \   000000 80           IRET
    118          
    119          /**
    120            * @brief External Interrupt PORTA Interrupt routine.
    121            * @param  None
    122            * @retval None
    123            */

   \                                 In section .far_func.text, align 1
    124          INTERRUPT_HANDLER(EXTI_PORTA_IRQHandler, 3)
    125          {
    126            /* In order to detect unexpected events during development,
    127               it is recommended to set a breakpoint on the following instruction.
    128            */
    129          }
   \                     EXTI_PORTA_IRQHandler:
   \                     _interrupt_5:
   \   000000 80           IRET
    130          
    131          /**
    132            * @brief External Interrupt PORTB Interrupt routine.
    133            * @param  None
    134            * @retval None
    135            */

   \                                 In section .far_func.text, align 1
    136          INTERRUPT_HANDLER(EXTI_PORTB_IRQHandler, 4)
    137          {
    138            /* In order to detect unexpected events during development,
    139               it is recommended to set a breakpoint on the following instruction.
    140            */
    141          }
   \                     EXTI_PORTB_IRQHandler:
   \                     _interrupt_6:
   \   000000 80           IRET
    142          
    143          /**
    144            * @brief External Interrupt PORTC Interrupt routine.
    145            * @param  None
    146            * @retval None
    147            */

   \                                 In section .far_func.text, align 1
    148          INTERRUPT_HANDLER(EXTI_PORTC_IRQHandler, 5)
    149          {
    150            /* In order to detect unexpected events during development,
    151               it is recommended to set a breakpoint on the following instruction.
    152            */
    153          }
   \                     EXTI_PORTC_IRQHandler:
   \                     _interrupt_7:
   \   000000 80           IRET
    154          
    155          /**
    156            * @brief External Interrupt PORTD Interrupt routine.
    157            * @param  None
    158            * @retval None
    159            */

   \                                 In section .far_func.text, align 1
    160          INTERRUPT_HANDLER(EXTI_PORTD_IRQHandler, 6)
    161          {
    162            /* In order to detect unexpected events during development,
    163               it is recommended to set a breakpoint on the following instruction.
    164            */
    165          }
   \                     EXTI_PORTD_IRQHandler:
   \                     _interrupt_8:
   \   000000 80           IRET
    166          
    167          /**
    168            * @brief External Interrupt PORTE Interrupt routine.
    169            * @param  None
    170            * @retval None
    171            */

   \                                 In section .far_func.text, align 1
    172          INTERRUPT_HANDLER(EXTI_PORTE_IRQHandler, 7)
    173          {
    174            /* In order to detect unexpected events during development,
    175               it is recommended to set a breakpoint on the following instruction.
    176            */
    177          }
   \                     EXTI_PORTE_IRQHandler:
   \                     _interrupt_9:
   \   000000 80           IRET
    178          
    179          #ifdef STM8S903
    180          /**
    181            * @brief External Interrupt PORTF Interrupt routine.
    182            * @param  None
    183            * @retval None
    184            */
    185          INTERRUPT_HANDLER(EXTI_PORTF_IRQHandler, 8)
    186          {
    187            /* In order to detect unexpected events during development,
    188               it is recommended to set a breakpoint on the following instruction.
    189            */
    190          }
    191          #endif /*STM8S903*/
    192          
    193          #if defined (STM8S208) || defined (STM8AF52Ax)
    194          /**
    195            * @brief CAN RX Interrupt routine.
    196            * @param  None
    197            * @retval None
    198            */
    199          INTERRUPT_HANDLER(CAN_RX_IRQHandler, 8)
    200          {
    201            /* In order to detect unexpected events during development,
    202               it is recommended to set a breakpoint on the following instruction.
    203            */
    204          }
    205          
    206          /**
    207            * @brief CAN TX Interrupt routine.
    208            * @param  None
    209            * @retval None
    210            */
    211          INTERRUPT_HANDLER(CAN_TX_IRQHandler, 9)
    212          {
    213            /* In order to detect unexpected events during development,
    214               it is recommended to set a breakpoint on the following instruction.
    215            */
    216          }
    217          #endif /*STM8S208 || STM8AF52Ax */
    218          
    219          /**
    220            * @brief SPI Interrupt routine.
    221            * @param  None
    222            * @retval None
    223            */

   \                                 In section .far_func.text, align 1
    224          INTERRUPT_HANDLER(SPI_IRQHandler, 10)
    225          {
    226            /* In order to detect unexpected events during development,
    227               it is recommended to set a breakpoint on the following instruction.
    228            */
    229          }
   \                     SPI_IRQHandler:
   \                     _interrupt_12:
   \   000000 80           IRET
    230          
    231          /**
    232            * @brief Timer1 Update/Overflow/Trigger/Break Interrupt routine.
    233            * interrupts at 200hz (5ms per pass)
    234            * @retval None
    235            */

   \                                 In section .far_func.text, align 1
    236          INTERRUPT_HANDLER(TIM1_UPD_OVF_TRG_BRK_IRQHandler, 11){
    237            if(EEWRTimout){
   \                     TIM1_UPD_OVF_TRG_BRK_IRQHandler:
   \                     _interrupt_13:
   \   000000 CE ....      LDW       X, L:EEWRTimout
   \   000003 5D           TNZW      X
   \   000004 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0
    238              EEWRTimout++;
   \   000006 CE ....      LDW       X, L:EEWRTimout
   \   000009 5C           INCW      X
   \   00000A CF ....      LDW       L:EEWRTimout, X
    239            }
    240            if(StartupTimer){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_0:
   \   00000D CE ....      LDW       X, L:StartupTimer
   \   000010 5D           TNZW      X
   \   000011 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_1
    241              StartupTimer++;
   \   000013 CE ....      LDW       X, L:StartupTimer
   \   000016 5C           INCW      X
   \   000017 CF ....      LDW       L:StartupTimer, X
    242            }
    243            if(SetCmdTempTimer1){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_1:
   \   00001A CE ....      LDW       X, L:SetCmdTempTimer1
   \   00001D 5D           TNZW      X
   \   00001E 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_2
    244              SetCmdTempTimer1++;
   \   000020 CE ....      LDW       X, L:SetCmdTempTimer1
   \   000023 5C           INCW      X
   \   000024 CF ....      LDW       L:SetCmdTempTimer1, X
    245            }
    246            if(SetCmdTempTimer2){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_2:
   \   000027 CE ....      LDW       X, L:SetCmdTempTimer2
   \   00002A 5D           TNZW      X
   \   00002B 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_3
    247              SetCmdTempTimer2++;
   \   00002D CE ....      LDW       X, L:SetCmdTempTimer2
   \   000030 5C           INCW      X
   \   000031 CF ....      LDW       L:SetCmdTempTimer2, X
    248            }
    249            if(SetCmdExitTimer){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_3:
   \   000034 CE ....      LDW       X, L:SetCmdExitTimer
   \   000037 5D           TNZW      X
   \   000038 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_4
    250              SetCmdExitTimer++;
   \   00003A CE ....      LDW       X, L:SetCmdExitTimer
   \   00003D 5C           INCW      X
   \   00003E CF ....      LDW       L:SetCmdExitTimer, X
    251            }
    252            if(FCTimer){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_4:
   \   000041 CE ....      LDW       X, L:FCTimer
   \   000044 5D           TNZW      X
   \   000045 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_5
    253              FCTimer++;
   \   000047 CE ....      LDW       X, L:FCTimer
   \   00004A 5C           INCW      X
   \   00004B CF ....      LDW       L:FCTimer, X
    254            }
    255            if(SysOnOffTmr){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_5:
   \   00004E CE ....      LDW       X, L:SysOnOffTmr
   \   000051 5D           TNZW      X
   \   000052 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_6
    256              SysOnOffTmr++;
   \   000054 CE ....      LDW       X, L:SysOnOffTmr
   \   000057 5C           INCW      X
   \   000058 CF ....      LDW       L:SysOnOffTmr, X
    257            }
    258            if(SysSSTimer){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_6:
   \   00005B CE ....      LDW       X, L:SysSSTimer
   \   00005E 5D           TNZW      X
   \   00005F 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_7
    259              SysSSTimer++;
   \   000061 CE ....      LDW       X, L:SysSSTimer
   \   000064 5C           INCW      X
   \   000065 CF ....      LDW       L:SysSSTimer, X
    260            }
    261            if(LoopControlDelay){
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_7:
   \   000068 CE ....      LDW       X, L:LoopControlDelay
   \   00006B 5D           TNZW      X
   \   00006C 27 07        JREQ      L:??TIM1_UPD_OVF_TRG_BRK_IRQHandler_8
    262              LoopControlDelay++;
   \   00006E CE ....      LDW       X, L:LoopControlDelay
   \   000071 5C           INCW      X
   \   000072 CF ....      LDW       L:LoopControlDelay, X
    263            }
    264            TIM1->SR1 &= 0xFE;  /*CLR UIF INT BIT*/
   \                     ??TIM1_UPD_OVF_TRG_BRK_IRQHandler_8:
   \   000075 7211 5255    BRES      L:0x5255, #0x0
    265          }
   \   000079 80           IRET
    266          
    267          /**
    268            * @brief Timer1 Capture/Compare Interrupt routine.
    269            * @param  None
    270            * @retval None
    271            */

   \                                 In section .far_func.text, align 1
    272          INTERRUPT_HANDLER(TIM1_CAP_COM_IRQHandler, 12)
    273          {
    274            /* In order to detect unexpected events during development,
    275               it is recommended to set a breakpoint on the following instruction.
    276            */
    277          }
   \                     TIM1_CAP_COM_IRQHandler:
   \                     _interrupt_14:
   \   000000 80           IRET
    278          
    279          #ifdef STM8S903
    280          /**
    281            * @brief Timer5 Update/Overflow/Break/Trigger Interrupt routine.
    282            * @param  None
    283            * @retval None
    284            */
    285          INTERRUPT_HANDLER(TIM5_UPD_OVF_BRK_TRG_IRQHandler, 13)
    286          {
    287            /* In order to detect unexpected events during development,
    288               it is recommended to set a breakpoint on the following instruction.
    289            */
    290          }
    291          
    292          /**
    293            * @brief Timer5 Capture/Compare Interrupt routine.
    294            * @param  None
    295            * @retval None
    296            */
    297          INTERRUPT_HANDLER(TIM5_CAP_COM_IRQHandler, 14)
    298          {
    299            /* In order to detect unexpected events during development,
    300               it is recommended to set a breakpoint on the following instruction.
    301            */
    302          }
    303          
    304          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    305          /**
    306          * @brief Timer2 Update/Overflow/Break Interrupt routine.
    307          * @param  None
    308          * @retval None
    309          */

   \                                 In section .far_func.text, align 1
    310          INTERRUPT_HANDLER(TIM2_UPD_OVF_BRK_IRQHandler, 13)
    311          {
    312            /* In order to detect unexpected events during development,
    313            it is recommended to set a breakpoint on the following instruction.
    314            */
    315          }
   \                     TIM2_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_15:
   \   000000 80           IRET
    316          
    317          /**
    318          * @brief Timer2 Capture/Compare Interrupt routine.
    319          * @param  None
    320          * @retval None
    321          */

   \                                 In section .far_func.text, align 1
    322          INTERRUPT_HANDLER(TIM2_CAP_COM_IRQHandler, 14)
    323          {
    324            /* In order to detect unexpected events during development,
    325            it is recommended to set a breakpoint on the following instruction.
    326            */
    327          }
   \                     TIM2_CAP_COM_IRQHandler:
   \                     _interrupt_16:
   \   000000 80           IRET
    328          #endif /*STM8S903*/
    329          
    330          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S105) || \
    331              defined(STM8S005) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8AF626x)
    332          /**
    333            * @brief Timer3 Update/Overflow/Break Interrupt routine.
    334            * @param  None
    335            * @retval None
    336            */

   \                                 In section .far_func.text, align 1
    337          INTERRUPT_HANDLER(TIM3_UPD_OVF_BRK_IRQHandler, 15)
    338          {
    339            /* In order to detect unexpected events during development,
    340               it is recommended to set a breakpoint on the following instruction.
    341            */
    342          }
   \                     TIM3_UPD_OVF_BRK_IRQHandler:
   \                     _interrupt_17:
   \   000000 80           IRET
    343          
    344          /**
    345            * @brief Timer3 Capture/Compare Interrupt routine.
    346            * @param  None
    347            * @retval None
    348            */

   \                                 In section .far_func.text, align 1
    349          INTERRUPT_HANDLER(TIM3_CAP_COM_IRQHandler, 16)
    350          {
    351            /* In order to detect unexpected events during development,
    352               it is recommended to set a breakpoint on the following instruction.
    353            */
    354          }
   \                     TIM3_CAP_COM_IRQHandler:
   \                     _interrupt_18:
   \   000000 80           IRET
    355          #endif /*STM8S208, STM8S207 or STM8S105 or STM8AF62Ax or STM8AF52Ax or STM8AF626x */
    356          
    357          #if defined (STM8S208) || defined(STM8S207) || defined(STM8S007) || defined(STM8S103) || \
    358              defined(STM8S003) ||  defined (STM8AF62Ax) || defined (STM8AF52Ax) || defined (STM8S903)
    359          /**
    360            * @brief UART1 TX Interrupt routine.
    361            * @param  None
    362            * @retval None
    363            */

   \                                 In section .far_func.text, align 1
    364          INTERRUPT_HANDLER(UART1_TX_IRQHandler, 17)
    365          {
   \                     UART1_TX_IRQHandler:
   \                     _interrupt_19:
   \   000000 8A           PUSH      CC
   \   000001 84           POP       A
   \   000002 A4 BF        AND       A, #0xbf
   \   000004 88           PUSH      A
   \   000005 86           POP       CC
   \   000006 8D ......    CALLF     L:?push_l0
   \   00000A 8D ......    CALLF     L:?push_l1
    366            /* In order to detect unexpected events during development,
    367               it is recommended to set a breakpoint on the following instruction.
    368            */
    369            Sending_GS1011_Data_Handler();
   \   00000E 8D ......    CALLF     Sending_GS1011_Data_Handler
    370          }
   \   000012 8D ......    CALLF     L:?pop_l1
   \   000016 8D ......    CALLF     L:?pop_l0
   \   00001A 80           IRET
    371          
    372          /**
    373            * @brief UART1 RX Interrupt routine.
    374            * @param  None
    375            * @retval None
    376            */

   \                                 In section .far_func.text, align 1
    377          INTERRUPT_HANDLER(UART1_RX_IRQHandler, 18)
    378          {
   \                     UART1_RX_IRQHandler:
   \                     _interrupt_20:
   \   000000 8A           PUSH      CC
   \   000001 84           POP       A
   \   000002 A4 BF        AND       A, #0xbf
   \   000004 88           PUSH      A
   \   000005 86           POP       CC
   \   000006 8D ......    CALLF     L:?push_l0
   \   00000A 8D ......    CALLF     L:?push_l1
    379            GS1011_Received_Data_Handler();
   \   00000E 8D ......    CALLF     GS1011_Received_Data_Handler
    380            /* In order to detect unexpected events during development,
    381               it is recommended to set a breakpoint on the following instruction.
    382            */
    383          }
   \   000012 8D ......    CALLF     L:?pop_l1
   \   000016 8D ......    CALLF     L:?pop_l0
   \   00001A 80           IRET
    384          #endif /*STM8S208 or STM8S207 or STM8S103 or STM8S903 or STM8AF62Ax or STM8AF52Ax */
    385          
    386          /**
    387            * @brief I2C Interrupt routine.
    388            * @param  None
    389            * @retval None
    390            */

   \                                 In section .far_func.text, align 1
    391          INTERRUPT_HANDLER(I2C_IRQHandler, 19)
    392          {
    393            /* In order to detect unexpected events during development,
    394               it is recommended to set a breakpoint on the following instruction.
    395            */
    396          }
   \                     I2C_IRQHandler:
   \                     _interrupt_21:
   \   000000 80           IRET
    397          
    398          #if defined(STM8S105) || defined(STM8S005) ||  defined (STM8AF626x)
    399          /**
    400            * @brief UART2 TX interrupt routine.
    401            * @param  None
    402            * @retval None
    403            */
    404          INTERRUPT_HANDLER(UART2_TX_IRQHandler, 20)
    405          {
    406            /* In order to detect unexpected events during development,
    407               it is recommended to set a breakpoint on the following instruction.
    408            */
    409          }
    410          
    411          /**
    412            * @brief UART2 RX interrupt routine.
    413            * @param  None
    414            * @retval None
    415            */
    416          INTERRUPT_HANDLER(UART2_RX_IRQHandler, 21)
    417          {
    418            /* In order to detect unexpected events during development,
    419               it is recommended to set a breakpoint on the following instruction.
    420            */
    421          }
    422          #endif /* STM8S105 or STM8AF626x */
    423          
    424          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    425          /**
    426            * @brief UART3 TX interrupt routine.
    427            * @param  None
    428            * @retval None
    429            */

   \                                 In section .far_func.text, align 1
    430          INTERRUPT_HANDLER(UART3_TX_IRQHandler, 20)
    431          {
   \                     UART3_TX_IRQHandler:
   \                     _interrupt_22:
   \   000000 8A           PUSH      CC
   \   000001 84           POP       A
   \   000002 A4 BF        AND       A, #0xbf
   \   000004 88           PUSH      A
   \   000005 86           POP       CC
   \   000006 8D ......    CALLF     L:?push_l0
   \   00000A 8D ......    CALLF     L:?push_l1
    432            /* In order to detect unexpected events during development,
    433               it is recommended to set a breakpoint on the following instruction.
    434            */
    435            Send_Next_Char_to_Device();
   \   00000E 8D ......    CALLF     Send_Next_Char_to_Device
    436          }
   \   000012 8D ......    CALLF     L:?pop_l1
   \   000016 8D ......    CALLF     L:?pop_l0
   \   00001A 80           IRET
    437          
    438          /**
    439            * @brief UART3 RX interrupt routine.
    440            * @param  None
    441            * @retval None
    442            */

   \                                 In section .far_func.text, align 1
    443          INTERRUPT_HANDLER(UART3_RX_IRQHandler, 21)
    444          {
   \                     UART3_RX_IRQHandler:
   \                     _interrupt_23:
   \   000000 8A           PUSH      CC
   \   000001 84           POP       A
   \   000002 A4 BF        AND       A, #0xbf
   \   000004 88           PUSH      A
   \   000005 86           POP       CC
   \   000006 8D ......    CALLF     L:?push_l0
   \   00000A 8D ......    CALLF     L:?push_l1
    445            /* In order to detect unexpected events during development,
    446               it is recommended to set a breakpoint on the following instruction.
    447            */
    448            Get_Device_Char();
   \   00000E 8D ......    CALLF     Get_Device_Char
    449          }
   \   000012 8D ......    CALLF     L:?pop_l1
   \   000016 8D ......    CALLF     L:?pop_l0
   \   00001A 80           IRET
    450          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    451          
    452          #if defined(STM8S207) || defined(STM8S007) || defined(STM8S208) || defined (STM8AF52Ax) || defined (STM8AF62Ax)
    453          /**
    454            * @brief ADC2 interrupt routine.
    455            * @param  None
    456            * @retval None
    457            */

   \                                 In section .far_func.text, align 1
    458          INTERRUPT_HANDLER(ADC2_IRQHandler, 22)
    459          {
    460            /* In order to detect unexpected events during development,
    461               it is recommended to set a breakpoint on the following instruction.
    462            */
    463          }
   \                     ADC2_IRQHandler:
   \                     _interrupt_24:
   \   000000 80           IRET
    464          #else /*STM8S105, STM8S103 or STM8S903 or STM8AF626x */
    465          /**
    466          * @brief ADC1 interrupt routine.
    467          * @par Parameters:
    468          * None
    469          * @retval
    470          * None
    471          */
    472          INTERRUPT_HANDLER(ADC1_IRQHandler, 22)
    473          {
    474            /* In order to detect unexpected events during development,
    475            it is recommended to set a breakpoint on the following instruction.
    476            */
    477          }
    478          #endif /*STM8S208 or STM8S207 or STM8AF52Ax or STM8AF62Ax */
    479          
    480          #ifdef STM8S903
    481          /**
    482            * @brief Timer6 Update/Overflow/Trigger Interrupt routine.
    483            * @param  None
    484            * @retval None
    485            */
    486          INTERRUPT_HANDLER(TIM6_UPD_OVF_TRG_IRQHandler, 23)
    487          {
    488            /* In order to detect unexpected events during development,
    489               it is recommended to set a breakpoint on the following instruction.
    490            */
    491          }
    492          #else /*STM8S208, STM8S207, STM8S105 or STM8S103 or STM8AF52Ax or STM8AF62Ax or STM8AF626x */
    493          /**
    494          * @brief Timer4 Update/Overflow Interrupt routine.
    495          * @param  None
    496          * @retval None
    497          */

   \                                 In section .far_func.text, align 1
    498          INTERRUPT_HANDLER(TIM4_UPD_OVF_IRQHandler, 23)
    499          {
    500            /* In order to detect unexpected events during development,
    501            it is recommended to set a breakpoint on the following instruction.
    502            */
    503          }
   \                     TIM4_UPD_OVF_IRQHandler:
   \                     _interrupt_25:
   \   000000 80           IRET
    504          #endif /*STM8S903*/
    505          
    506          /**
    507            * @brief Eeprom EEC Interrupt routine.
    508            * @param  None
    509            * @retval None
    510            */

   \                                 In section .far_func.text, align 1
    511          INTERRUPT_HANDLER(EEPROM_EEC_IRQHandler, 24)
    512          {
    513            /* In order to detect unexpected events during development,
    514               it is recommended to set a breakpoint on the following instruction.
    515            */
    516          }
   \                     EEPROM_EEC_IRQHandler:
   \                     _interrupt_26:
   \   000000 80           IRET
    517          
    518          /**
    519            * @}
    520            */
    521          
    522          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  ADC2_IRQHandler
       1  AWU_IRQHandler
       1  CLK_IRQHandler
       1  EEPROM_EEC_IRQHandler
       2  EEWRTimout
       1  EXTI_PORTA_IRQHandler
       1  EXTI_PORTB_IRQHandler
       1  EXTI_PORTC_IRQHandler
       1  EXTI_PORTD_IRQHandler
       1  EXTI_PORTE_IRQHandler
       2  FCTimer
       1  I2C_IRQHandler
       2  LoopControlDelay
       1  SPI_IRQHandler
       2  SetCmdExitTimer
       2  SetCmdTempTimer1
       2  SetCmdTempTimer2
       2  StartupTimer
       2  SysOnOffTmr
       2  SysSSTimer
       1  TIM1_CAP_COM_IRQHandler
     122  TIM1_UPD_OVF_TRG_BRK_IRQHandler
       1  TIM2_CAP_COM_IRQHandler
       1  TIM2_UPD_OVF_BRK_IRQHandler
       1  TIM3_CAP_COM_IRQHandler
       1  TIM3_UPD_OVF_BRK_IRQHandler
       1  TIM4_UPD_OVF_IRQHandler
       1  TLI_IRQHandler
       1  TRAP_IRQHandler
      27  UART1_RX_IRQHandler
      27  UART1_TX_IRQHandler
      27  UART3_RX_IRQHandler
      27  UART3_TX_IRQHandler

 
 249 bytes in section .far_func.text
  18 bytes in section .near.bss
 
 249 bytes of CODE memory
  18 bytes of DATA memory

Errors: none
Warnings: none
