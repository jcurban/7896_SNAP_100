###############################################################################
#                                                                             #
# IAR C/C++ Compiler V1.40.1.50106 for STM8             28/May/2013  13:15:19 #
# Copyright 2010-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\SNAP\SNAP_100\main.c                                  #
#    Command line =  C:\SNAP\SNAP_100\main.c -e -Oh --code_model small        #
#                    --data_model small -o C:\SNAP\SNAP_100\Release\Obj\      #
#                    --dlib_config "C:\Program Files\IAR Systems\Embedded     #
#                    Workbench 6.5\stm8\LIB\dlstm8ssn.h" -D NDEBUG -D         #
#                    STM8S007 -lC C:\SNAP\SNAP_100\Release\List\ -I .\        #
#                    --no_system_include --vregs 16                           #
#    List file    =  C:\SNAP\SNAP_100\Release\List\main.lst                   #
#    Object file  =  C:\SNAP\SNAP_100\Release\Obj\main.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\SNAP\SNAP_100\main.c
      1          /*------------------------------------------------------------------------------------*/
      2          /* SNAP JOB#7896 USES STM8007C8T6 PROCESSOR                                           */
      3          /* - 32K FLASH 2KRAM  128 EEPROM  ver 1.00                                            */
      4          /*------------------------------------------------------------------------------------*/
      5          /* Includes ------------------------------------------------------------------*/
      6          #include "main.h"
      7          /* Local Var------------------------------------------------------------------*/

   \                                 In section .tiny.bss, align 1
      8          u8  Mode1;   /* bit 0 = 1(DegF),0(DegC)*/
   \                     Mode1:
   \   000000              DS8 1

   \                                 In section .tiny.bss, align 1
      9          u8  BLCNT_INDX;
   \                     BLCNT_INDX:
   \   000000              DS8 1

   \                                 In section .tiny.bss, align 1
     10          u8  BLCNT_STATE;
   \                     BLCNT_STATE:
   \   000000              DS8 1

   \                                 In section .tiny.bss, align 1
     11          u8  BLCNT_VAL;         /*VERSION BLINK VALUE*/
   \                     BLCNT_VAL:
   \   000000              DS8 1

   \                                 In section .tiny.bss, align 1
     12          u8  SysError;          /* bit 0 = 1 if Temp reading out of limits
   \                     SysError:
   \   000000              DS8 1
     13                                    bit 1 = 1 if command start and no response*/
     14          /*--------------VERSION NUMBER OF THIS FIRMWARE-------------------------------*/

   \                                 In section .tiny.data, align 1
     15          u8 VER[4] = {VER0,VER1,VER2,VER3};
   \                     VER:
   \   000000 00 02 00 04  DC8 0, 2, 0, 4
     16          /*----------------------------------------------------------------------------*/
     17          
     18          /* Private function prototypes -----------------------------------------------*/
     19          void RCC_Configuration(void);
     20          void GPIO_Configuration(void);
     21          void TIMER1_Configuration (void);
     22          void InitEEData(void);
     23          void InitDeviceUART(void);
     24          void InitGS1011UART(void);
     25          void assert_failed(uint8_t* file, uint32_t line);
     26          /*external Functions ---------------------------------------------------------*/
     27          void UART1_Init(uint32_t BaudRate, UART1_WordLength_TypeDef WordLength, 
     28                          UART1_StopBits_TypeDef StopBits, UART1_Parity_TypeDef Parity, 
     29                          UART1_SyncMode_TypeDef SyncMode, UART1_Mode_TypeDef Mode);
     30          void UART3_Init(uint32_t BaudRate, UART3_WordLength_TypeDef WordLength, 
     31                          UART3_StopBits_TypeDef StopBits, UART3_Parity_TypeDef Parity, 
     32                          UART3_Mode_TypeDef Mode);

   \                                 In section .near_func.text, align 1
     33          int main( void ){
     34          
     35            /* System Clocks Configuration */
     36            RCC_Configuration();
   \                     main:
   \   000000 CD ....      CALL      L:?Subroutine1
     37            /* Configure the GPIO ports */
     38            GPIO_Configuration();
   \                     ??CrossCallReturnLabel_1:
   \   000003 CD ....      CALL      L:GPIO_Configuration
     39            /*CONFIGURE TIMER1*/
     40            TIMER1_Configuration();
   \   000006 CD ....      CALL      L:TIMER1_Configuration
     41            /*Configure device UART*/
     42            InitDeviceUART();
   \   000009 CD ....      CALL      L:?Subroutine0
   \                     ??CrossCallReturnLabel_5:
   \   00000C CD ....      CALL      L:UART1_Init
     43            /*Configure GS101 UART*/
     44            InitGS1011UART();
   \   00000F 35 0C ....   MOV       S:?b6, #0xc
   \   000013 CD ....      CALL      L:??Subroutine2_0
   \                     ??CrossCallReturnLabel_3:
   \   000016 CD ....      CALL      L:UART3_Init
     45            /*get data from EEPROM */
     46            
     47            
     48            InitEEData();
     49             /* Infinite loop */
     50            while (1)
   \                     ??main_0:
   \   000019 20 FE        JRA       L:??main_0
     51            {}
     52           /*infinite loop*/
     53          }
     54          /* Get the EEData on startup-------------------------------------------------*/
     55          /*                                                                           */
     56          /*---------------------------------------------------------------------------*/

   \                                 In section .near_func.text, align 1
     57          void InitEEData(void){
     58          }
   \                     InitEEData:
   \   000000 81           RET

   \                                 In section .near_func.text, align 1
     59          void assert_failed(uint8_t* file, uint32_t line)
     60          {
     61            /* User can add his own implementation to report the file name and line number,
     62               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
     63          }
   \                     assert_failed:
   \   000000 81           RET
     64          /*******************************************************************************
     65          * Function Name  : RCC_Configuration
     66          * Description    : Configures the different system clocks.
     67          *                 16MHZ INTERNAL OSCILLATOR HSI ENABLED BY DEFAULT
     68          * Input          : None
     69          * Output         : None
     70          * Return         : None
     71          *******************************************************************************/

   \                                 In section .near_func.text, align 1
     72          void RCC_Configuration(void){
     73            CLK->SWCR = 0x08;     /*SWIF SET TO AUTO*/
   \                     RCC_Configuration:
   \   000000 CD ....      CALL      L:?Subroutine1
     74            CLK->CKDIVR = 0;      /*SET TO FULL SPEED 16MHZ*/
     75            CLK->PCKENR1 = 0x81;  /*TIM1, I2C CLOCK ENABLED*/
     76            CLK->PCKENR2 = 0x08;  /*ADC CLOCK ENABLED*/
     77            CLK->CSSR = 0x00;     /*security off*/
     78          }
   \                     ??CrossCallReturnLabel_0:
   \   000003 81           RET

   \                                 In section .near_func.text, align 1
   \                     ?Subroutine1:
   \   000000 35 08 50C5   MOV       L:0x50c5, #0x8
   \   000004 725F 50C6    CLR       L:0x50c6
   \   000008 35 81 50C7   MOV       L:0x50c7, #0x81
   \   00000C 35 08 50CA   MOV       L:0x50ca, #0x8
   \   000010 725F 50C8    CLR       L:0x50c8
   \   000014 81           RET
     79          /*******************************************************************************
     80          * Function Name  : GPIO_Configuration
     81          * Description    : Configures the different GPIO ports.
     82          * Input          : None
     83          * Output         : None
     84          * Return         : None
     85          *******************************************************************************/

   \                                 In section .near_func.text, align 1
     86          void GPIO_Configuration(void){
     87            GPIOA->DDR = 0xFF;  /*all outputs*/
   \                     GPIO_Configuration:
   \   000000 35 FF 5002   MOV       L:0x5002, #0xff
     88            GPIOA->CR1 = 0x70; /*default inputs floating outputs OD*/
   \   000004 35 70 5003   MOV       L:0x5003, #0x70
     89            GPIOA->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000008 725F 5004    CLR       L:0x5004
     90            GPIOB->DDR = 0xF0;  /*4-7 outputs, 0-3 inputs*/
   \   00000C 35 F0 5007   MOV       L:0x5007, #0xf0
     91            GPIOB->CR1 = 0; /*default inputs floating outputs OD*/
   \   000010 725F 5008    CLR       L:0x5008
     92            GPIOB->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000014 725F 5009    CLR       L:0x5009
     93            GPIOC->DDR = 0xFF;  /*all outputs*/
   \   000018 35 FF 500C   MOV       L:0x500c, #0xff
     94            GPIOC->CR1 = 0xFF; /*outputs push pull*/
   \   00001C 35 FF 500D   MOV       L:0x500d, #0xff
     95            GPIOC->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000020 725F 500E    CLR       L:0x500e
     96            GPIOD->DDR = 0xFD;  /*all outputs except D1 */
   \   000024 35 FD 5011   MOV       L:0x5011, #0xfd
     97            GPIOD->CR1 = 0xE1; /*outputs push pull except 2,3,4 OD*/
   \   000028 35 E1 5012   MOV       L:0x5012, #0xe1
     98            GPIOD->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   00002C 725F 5013    CLR       L:0x5013
     99            GPIOE->DDR = 0xFF;  /*all outputs */
   \   000030 35 FF 5016   MOV       L:0x5016, #0xff
    100            GPIOE->CR1 = 0x09; /*default inputs floating outputs OD*/
   \   000034 35 09 5017   MOV       L:0x5017, #0x9
    101            GPIOE->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000038 725F 5018    CLR       L:0x5018
    102            GPIOG->DDR = 0xFE;  /*all outputs except PG0 */
   \   00003C 35 FE 5020   MOV       L:0x5020, #0xfe
    103            GPIOG->CR1 = 0xFE; /*outputs push pull input is floating */
   \   000040 35 FE 5021   MOV       L:0x5021, #0xfe
    104            GPIOG->CR2 = 0; /*default values no ints, 2mhz speed*/
   \   000044 725F 5022    CLR       L:0x5022
    105          }
   \   000048 81           RET
    106          
    107          /* TIMER1 configuration -----------------------------------------------------*/
    108          /*USED FOR GP TIMING RUN AT 200HZ                                            */
    109          /*---------------------------------------------------------------------------*/

   \                                 In section .near_func.text, align 1
    110          void TIMER1_Configuration (void){
    111            TIM1->PSCRH = 0x00; /*prescale div by 4  (16m/4 = 4mhz)*/
   \                     TIMER1_Configuration:
   \   000000 725F 5260    CLR       L:0x5260
    112            TIM1->PSCRL = 0x03; /*prescale div by 4  (16m/4 = 4mhz)*/
   \   000004 35 03 5261   MOV       L:0x5261, #0x3
    113            TIM1->ARRH = 0x4E; /*auto reload = 20000 (4m/20k = 200)*/
   \   000008 35 4E 5262   MOV       L:0x5262, #0x4e
    114            TIM1->ARRL = 0x20;
   \   00000C 35 20 5263   MOV       L:0x5263, #0x20
    115            TIM1->CR1 = 0x91; /*enable counter with interrupts on overflow*/
   \   000010 35 91 5250   MOV       L:0x5250, #0x91
    116            TIM1->IER = 0x01; /*enable interrupts*/
   \   000014 35 01 5254   MOV       L:0x5254, #0x1
    117          }
   \   000018 81           RET

   \                                 In section .near_func.text, align 1
    118          void InitDeviceUART(void){
    119            UART1_Init(9600,  UART1_WORDLENGTH_8D, UART1_STOPBITS_1, UART1_PARITY_NO, UART1_SYNCMODE_CLOCK_DISABLE,  UART1_MODE_TXRX_ENABLE);
   \                     InitDeviceUART:
   \   000000 CD ....      CALL      L:?Subroutine0
   \                     ??CrossCallReturnLabel_4:
   \   000003 CC ....      JP        L:UART1_Init
    120          }

   \                                 In section .near_func.text, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000 35 0C ....   MOV       S:?b7, #0xc
   \   000004 35 80 ....   MOV       S:?b6, #0x80
   \   000008              REQUIRE ??Subroutine2_0
   \   000008              ;               // Fall through to label ??Subroutine2_0

   \                                 In section .near_func.text, align 1
   \                     ??Subroutine2_0:
   \   000000 3F ..        CLR       S:?b5
   \   000002 3F ..        CLR       S:?b4
   \   000004 4F           CLR       A
   \   000005 AE 2580      LDW       X, #0x2580
   \   000008 BF ..        LDW       S:?w1, X
   \   00000A 5F           CLRW      X
   \   00000B BF ..        LDW       S:?w0, X
   \   00000D 81           RET

   \                                 In section .near_func.text, align 1
    121          void InitGS1011UART(void){
    122            UART3_Init(9600, UART3_WORDLENGTH_8D, 
    123                           UART3_STOPBITS_1,  UART3_PARITY_NO, 
    124                           UART3_MODE_TXRX_ENABLE);
   \                     InitGS1011UART:
   \   000000 35 0C ....   MOV       S:?b6, #0xc
   \   000004 CD ....      CALL      L:??Subroutine2_0
   \                     ??CrossCallReturnLabel_2:
   \   000007 CC ....      JP        L:UART3_Init
    125          }
    126          

   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  ??Subroutine2_0
       8  ?Subroutine0
      21  ?Subroutine1
       1  BLCNT_INDX
       1  BLCNT_STATE
       1  BLCNT_VAL
      73  GPIO_Configuration
       6  InitDeviceUART
       1  InitEEData
      10  InitGS1011UART
       1  Mode1
       4  RCC_Configuration
       1  SysError
      25  TIMER1_Configuration
       4  VER
       1  assert_failed
      27  main

 
 190 bytes in section .near_func.text
   5 bytes in section .tiny.bss
   4 bytes in section .tiny.data
 
 190 bytes of CODE memory
   9 bytes of DATA memory

Errors: none
Warnings: none
